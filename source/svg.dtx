% \CheckSum{3155}
% \iffalse meta-comment
%
%  svg         -- Include SVG pictures in LaTeX documents using Inkscape
% ----------------------------------------------------------------------------
%  svg-extract -- Extract independent graphic files from SVG pictures
% ----------------------------------------------------------------------------
%
%  Copyright (C) Philip Ilten <philten@cern.ch>,  2012-2016  
%  Copyright (C) Falk Hanisch <hanisch.latex@outlook.com>, 2017-
%
% ----------------------------------------------------------------------------
%
%  This work may be distributed and/or modified under the conditions of the
%  LaTeX Project Public License, version 1.3c of the license. The latest
%  version of this license is in http://www.latex-project.org/lppl.txt and
%  version 1.3c or later is part of all distributions of LaTeX 2005/12/01
%  or later and of this work. This work has the LPPL maintenance status
%  "author-maintained". The current maintainer and author of this work
%  is Falk Hanisch.
%
% ----------------------------------------------------------------------------
%
%<*batchfile>
\ifx\documentclass\@undefined
\input docstrip.tex
\keepsilent

\begingroup
\catcode`\^^M=13 \catcode`\ =12 %
\gdef\svgpreamble{%
Copyright (C) Philip Ilten <philten@cern.ch>,  2012-2016  
Copyright (C) Falk Hanisch <hanisch.latex@outlook.com>, 2017-

This file was generated from file svg.dtx.
----------------------------------------------------------------------------

This work may be distributed and/or modified under the conditions
of the LaTeX Project Public License, version 1.3c of the license.
The latest version of this license is in
    http://www.latex-project.org/lppl.txt
and version 1.3c or later is part of all distributions of
LaTeX 2005/12/01 or later and of this work.

This work has the LPPL maintenance status "author-maintained".

The current maintainer and author of this work is Falk Hanisch.

This work consists of the main source file svg.dtx%
%^^A%and the derived files
%^^A%    README
%^^A%    svg.dtx (with derived files svg.sty, svg.pdf, Fig.1a.pdf, Fig.1b.eps, 
%^^A%    Fig.2.pdf, Fig.2.png),
%^^A%    preamble.tex, example.svg (with derived files example.pdf and 
%^^A%    example.pdf_tex), 
%^^A%    root.C (with derived files root.svg, root.pdf, and root.pdf_tex). 
%^^A%
%^^A% The svg package by Philip Ilten.
%^^A%
%^^A% To extract package files and create documentation:
%^^A%
%^^A%      pdflatex -shell-escape svg.dtx
%^^A%
%^^A% Please note that Inkscape generates TeX files with comments, and
%^^A% since this document is generated using docstrip which interprets
%^^A% comments, special versions of example.pdf_tex and root.pdf_tex have
%^^A% been provided with the comments removed. This package will fail to
%^^A% compile when example.pdf/example.pdf_tex has an older modification
%^^A% date than example.svg and root.pdf/root.pdf_tex has an older
%^^A% modification date than root.svg as this package will generate new
%^^A% versions of example.pdf_tex and root.pdf_tex with comments.
%^^A%
%^^A% To finish the installation move the following file into a directory
%^^A% searched by LaTeX:
%^^A%
%^^A%      svg.sty
%^^A%
%^^A%
}
\endgroup

\declarepreamble\svgbasepreamble

svg -- Include SVG pictures in LaTeX documents using Inkscape

\svgpreamble

\endpreamble
\declarepreamble\svgextractpreamble

svg-extract -- Extract independent graphic files from SVG pictures

\svgpreamble

\endpreamble
\askforoverwritefalse
\usedir{tex/latex/svg}
\generate{%
  \usepreamble\svgbasepreamble
  \file{svg-new.sty}{%
    \from{svg.dtx}{package,option,base}%
    \from{svg.dtx}{package,body,base}%
  }
  \usepreamble\svgextractpreamble
  \file{svg-extract.sty}{%
    \from{svg.dtx}{package,option,extract}%
    \from{svg.dtx}{package,body,extract}%
  }
}
\else
\let\endbatchfile\relax
\fi
\endbatchfile
%</batchfile>
%
% \fi
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
% \iffalse
%<*driver>
\ifx\ProvidesFile\@undefined\def\ProvidesFile#1[#2]{}\fi
\ProvidesFile{svg.dtx}[%
%</driver>
%<package&option>\NeedsTeXFormat{LaTeX2e}
%<package&option&base>\ProvidesPackage{svg}[%
%<package&option&extract>\ProvidesPackage{svg-extract}[%
%<*driver|package&option>
  2017/00/00 v2.00\space%
%<package&option&base>  (include SVG pictures)%
%<package&option&extract>  (extract independent graphics from SVG pictures)%
]
%</driver|package&option>
%<*driver>
\documentclass[english,xindy]{tudscrdoc}
\usepackage{selinput}\SelectInputMappings{adieresis={ä},germandbls={ß}}
\usepackage[T1]{fontenc}
\usepackage{babel}
\KOMAoptions{parskip=half-}
\usepackage{marginnote}

\usepackage{svg-new}
\usepackage{xpatch}
\ifdefined\includesvg
  \xpretocmd{\includesvg}{\MakePercentComment}{}{}
  \xapptocmd{\includesvg}{\MakePercentIgnore}{}{}
\fi
\ifdefined\includeinkscape
  \xpretocmd{\includeinkscape}{\MakePercentComment}{}{}
  \xapptocmd{\includeinkscape}{\MakePercentIgnore}{}{}
\fi
\pdfsuppresswarningpagegroup=1

\usepackage{listings}
\lstnewenvironment{example}{%
  \lstset{%
    basicstyle=\footnotesize\ttfamily,columns=flexible,frame=single,%
    backgroundcolor=\color{yellow!20},xleftmargin=\fboxsep,%
    xrightmargin=\fboxsep,gobble=1%
  }%
}{}

%TODO out!
\usepackage{relsize}
\usepackage{subfig}

\usepackage{bookmark}
\usepackage[babel]{microtype}

%\EnableCrossrefs
\CodelineIndex
\RecordChanges
\GetFileInfo{svg.dtx}
\title{The packages \pkg{svg} and \pkg{svg-extract}}
\author{%
  Philip Ilten (2012--2016) \\
  Falk Hanisch (2017--) \\
  \url{https://github.com/mrpiggi/svg} \\
  \mailto{hanisch.latex@outlook.com}
}
\date{\fileversion\nobreakspace(\filedate)}

\begin{document}
  \maketitle
  \begin{abstract}
    \noindent
    The package \pkg{svg} is intended for the automated integration of 
    \file{svg}~graphics using the command line tool of \app{Inkscape}. The 
    capabilities of \app{Inkscape} are used to export the text within a 
    \file{svg}~graphic to a separate file, which is then rendered or compiled 
    by \LaTeX.
    
    In addition, the package \pkg{svg-extract} is provided which allows n.
    extracting these graphics into independent files in different file formats.
  \end{abstract}
  \ToDo{replace 2017/00/00 with release date in svg.dtx and README.md}[Release]
  \ToDo{create \file{svg.sty} instead of \file{svg-new.sty}}[Release]
  \ToDo{update derived files in batch preamble}[Release]
  \ToDo{mail to Johan B. C. Engelen (\pkg{svg-inkscape})}[Release]
  \tableofcontents
  \DocInput{\filename}
\end{document}
%</driver>
% \fi
%
% \changes{v1.0}{2004/11/05}{initial version by Philip Ilten}
% \changes{v2.00}{2016/09/23}{new maintainer: Falk Hanisch}
% \changes{v2.00}{2017/00/00}{re-implementation from scratch}
% \changes{v2.00}{2017/00/00}{package \pkg{subfig} not required anymore}
% \changes{v2.00}{2017/00/00}{%
%   support of subfigures stopped due to the huge number of packages which deal 
%   with this topic and the large variety of implementing this functionality; 
%   naming exported graphics after their consecutive numbering can't be ensured
%   for all variants of subfigures, so it's neglected
% }
%
% \part{User documentation}
% \section{Introduction}
%
% The open source program \app{Inkscape} has provided an excellent resource for 
% the simple and easy creation of images and diagrams using a graphical user
% interface. The work by Johan\,B.\,C.~Engelen has further enhanced the ability
% of \app{Inkscape} to split a \file{svg}~file into a text component that can 
% be compiled with \LaTeX, and an image component that can be imported as a 
% \file{pdf}~file. For further information see the documentation of 
% \hrfn{http://www.ctan.org/pkg/svg-inkscape}{\pkg{svg-inkscape} on CTAN}.
% The procedure described therein is taken up and consistently expanded. 
% Consequently, the command \cs{includesvg} is provided as central interface 
% for the user. Thus, it is now possible to include an \file{svg}~file into a 
% \LaTeX~document where the text within the \file{svg}~graphic will be rendered
% natively by \LaTeX.
% 
% An working installation of \app{Inkscape} is required for the automated 
% integration of \file{svg}~graphics, whereby the installation path must be 
% known to the operating system. By typing \file{inkscape -V} on shell this can 
% be checked.
% 
% Both packages \pkg{svg} and \pkg{svg-extract} rely heavily upon executing 
% commands from the shell using the \cs{ShellEscape} or respectively the old
% known \cs{write18} command for executing a variety of commands directly to 
% the system. So it is necessary to include the flag \file{-shell-escape} when 
% compiling documents using \pkg{svg} and/or \pkg{svg-extract}. It may be
% necessary to change the binary paths and options for each individual command, 
% which can be done with the appropriate options listed below. If you don't
% want to use the \file{-shell-escape} flag, either for security reasons or
% because you're exporting the \file{svg}~files otherwise, there's also command
% \cs{includeinkscape}, which includes files already exported by \app{Inkscape}.
%
%
%
% \section{Usage of package \pkg{svg}}
%
% \ToDo{List/name all loaded packages, hint for graphicx with options}
% The purpose of this package is twofold. First, the syntax of the
% command \cs{includegraphics} from the \pkg{graphicx} package has been
% extended to an \cs{includesvg} command, which allows the specification
% of the \file{svg}~file width and height using keys in an optional first
% argument. 
%
% \DescribeOptions{usexcolor,noxcolor,usetransparent,notransparent}
%
% \DescribeMacro{\svgsetup}
% The \oarg{options}, described in detail below, can be specified globally for
% the package
% \begin{example}
%   \usepackage[<options>]{svg}
% \end{example}
% and reset locally when supplied to the \cs{includesvg} macro. The options can
% also be reset globally using the macro \cs{svgsetup} either in the preamble 
% or within the document
% \begin{example}
%   \svgsetup{<options>}
% \end{example}
% where \marg{options} is a comma separated list of options.
%
% \DescribeMacro{\svgpath}
% The root paths to \file{svg}~files can be specified using the \cs{svgpath}
% command in the same way as \cs{graphicspath} is used. Every given path should 
% terminate with \file{/}.
% \ToDo{Hint to format like \cs{graphicspath}}
% \ToDo{Search order}
% If neither \cs{svgpath} nor \cs{graphicspath} is given, only the current
% directory \file{./} is searched.
%
% \DescribeOption{inkscape}
% \ToDo{onlynewer not with xelatex}
%
% \DescribeOption{inkscapeformat}
%
% \DescribeOption{inkscapearea}
%  page (notice that the \opt{-C} option indicates page and not drawing). 
%
% \DescribeOption{inkscapelatex}
%
% \DescribeOption{inkscapedpi}
%
% \DescribeOptions{inkscapeexe,inkscapeopt}
% For the inclusion of an \file{svg}~file, \app{Inkscape} is used to separate 
% the text and image from the \file{svg}~file and can be set using the
% \opt{inkscapeexe} option. By default the \opt{inkscapeexe} option is set to 
% \file{inkscape} and the hard coded switch \file{-z} which performs a non-gui
% export of the given \file{svg}~file.
%
% \DescribeOption{inkscapepath}
%
% \DescribeOptions{width,height,scale}
% The width of the \file{svg}~file can be
% specified via the \opt{width} option and the height by the \opt{height}
% option. If both the width and height are specified, the width will
% be used and the height will be rescaled to match the aspect ratio of
% the \file{svg}~file. 
%
% \DescribeOptions{pretex,apptex}
% Commands prior and post to the inclusion of the \file{svg}~file may be
% desired, such as font or color commands. For example, to change the text size
% of the include \file{svg}~file text one could use
% \begin{example}
%   {\tiny \includsvg[<options>]{<svg filename>}}
% \end{example}
% where now the text will be rendered in the font size specified by \cs{tiny}.
% In this example, however, the \cs{tiny} command would not be
% included in the extracted output and so the options \opt{pretex} and
% \opt{apptex} are provided where the \LaTeX~code provided to \opt{pretex} is
% included before the \file{svg}~file, and \opt{apptex} after the 
% \file{svg}~file. Consequently, the example above can be rewritten as
% \begin{example}
%   \includsvg[pretex=\tiny,<additional options>]{<svg filename>}
% \end{example}
% where now the changed font size will be propagated to the extracted
% output.
%
% \DescribeOption{lastpage}
%
% \DescribeOption{draft}
%
% \DescribeMacro{\includesvg}
% \ToDo{onlynewer not with xelatex}
% \ToDo{no quotes with dvi for file name!}
% The command to include an \file{svg}~file is
% similar to the \cs{includegraphics} command provided by the \pkg{graphicx}
% package. However, now the command
% \begin{example}
%   \includesvg[<options>]{<svg filename>}
% \end{example}
% is used where \marg{svg filename} is the filename of the \file{svg}~file 
% without the path or the \file{.svg} postfix.
% 
% \begin{DescribeParameterParent}{Macro}{\includesvg}
% \DescribeParameters{%
%   inkscape,inkscapeformat,inkscapearea,inkscapelatex,inkscapedpi,%
%   inkscapeexe,inkscapeopt,inkscapepath%
% }
%
% \DescribeParameters{width,height,scale}
%
% \DescribeParameters{pretex,apptex}
%
% \DescribeParameter{lastpage}
%
% \DescribeParameter{draft}
%
% \DescribeParameter{angle}
% \ToDo{angle after widht, height and scale}
%
% \DescribeParameter{origin}
% \end{DescribeParameterParent}
%
% \DescribeMacro{\includeinkscape}
% 
% \begin{DescribeParameterParent}{Macro}{\includeinkscape}
% \DescribeParameters{%
%   inkscapeformat,inkscapelatex,inkscapepath%
% }
%
% \DescribeParameters{width,height,scale}
%
% \DescribeParameters{pretex,apptex}
%
% \DescribeParameter{lastpage}
%
% \DescribeParameter{draft}
%
% \DescribeParameter{angle}
% \ToDo{angle after widht, height and scale}
%
% \DescribeParameter{origin}
% \end{DescribeParameterParent}
%
%
%
% \section{Usage of package \pkg{svg-extract}}
%
% Second, this package allows for the extraction of the
% \file{svg}~file, as rendered within the \LaTeX~document, to an independent
% image file. This is particularly useful when attempting to provide
% images to journals or collaborators, and one wishes the image to
% appear exactly as it does within the original \LaTeX~document.
%
% In order to extract to \file{eps} and 
% \file{png} formats, the programs \app{pdftops} and \app{magick} on Windows 
% or \app{convert} on unix-like operating systems (part of ImageMagick) must be
% installed respectively. Finally, this package will not work on
% Windows, but should run on any *nix platform as long as the paths to
% the appropriate programs are correctly defined.
%
% In contrast to package \pkg{svg}, the console commands for graphic extraction 
% are executed with each LaTeX run by package \pkg{svg-extract} when 
% \val{--shell-escape} mode is activated.
%
%
%
%
% In version~v1.0 the option \opt{name} could be used to name the extracted 
% files like the numbering of the current \env{subfig} environment. As the 
% package \pkg{subfig} causes problems very often this feature was removed. 
% Because of the large amount of different packages, which all provide the 
% possibility to include subfigures with very different implemetations, this 
% functionality can't be provided relaibly by \pkg{svg-extract}.
%
%
%
% \subsection{Extract independent grahic files}
%
% The extraction will render the \file{svg}~file to the specified output(s) of
% choice using the same size as specified within the \cs{includesvg} command.
% Consequently, the scale between the image and text in the extracted output(s)
% will remain identical to the scale within the document from which the
% \file{svg}~file was extracted.
%
% \DescribeOption{extract}
%
% \DescribeOption{extractformat}
% The included \file{svg}~file can be extracted from the document into a 
% independent graphic file of type \file{pdf}, \file{eps} or \file{ps}. The 
% option can be used either with a single value (e.g.~\opt{extractformat=pdf}) 
% or a comma separated list. For example,
% \begin{example}
%   \includesvg[extractformat={pdf,eps},<additional options>]{<svg filename>}
% \end{example}
% will extract the \file{svg}~file to both \file{pdf} and \file{eps} formats.
% By default, \opt{extractformat=pdf} is set unless dvi output was detected. In 
% this case the default setting is \opt{extractformat=eps}.
%
% \DescribeOptions{extractwidth,extractheight,extractscale}
%
% \DescribeOptions{extractpretex,extractapptex}
%
% \DescribeOptions{extractpreamble,extractpreambleend}
% Specialized \LaTeX~macros can be used in the \file{svg}~file which can then
% be defined in the preamble of the \LaTeX~document in which the
% \file{svg}~file is to be included. Additionally, specialized packages such as
% \cs{relsize} may be needed by the \LaTeX~code extracted from the
% \file{svg}~file. Consequently, the preamble of the current \LaTeX~document is
% used for the extraction of the \file{svg}~file by default. It is possible,
% however, to specify a different preamble with the option 
% \opt{extractpreamble} where the file to use as the preamble (including path
% and postfix) is given as the argument. The default definition of
% \opt{extractpreamble} is \file{\cs{jobname}.tex}---more precisely the file 
% extension given by option \opt{latexext} is used---and should suffice for
% most cases. The preamble up to the line defined by the option
% \opt{extractpreambleend} will be used, which is set to a default of
% \cs{begin\{document\}}. 
%
% \DescribeMacros{\svghidepreamblestart,\svghidepreambleend}
%
% \DescribeOption{extractruns}
%
% \DescribeOptions{latexexe,latexopt,latexext}
% For the extraction of a independent grahic file, the \LaTeX~program is used
% which is set by the \opt{latexexe} option. Depending on the \LaTeX~processor 
% used for the current document, it is set to \file{pdflatex}, \file{lualatex},
% \file{xelatex} or \file{latex} by default. It's also possible to specify 
% additional flags or switches for the \LaTeX~runs, which are performed during 
% the extraction process by the \opt{latexopt} option. If you are used to 
% utilize a different file extension for \LaTeX~files than \file{tex}, option 
% \opt{latexext} can be used, for example for something like \opt{latexext=ltx}.
%
% \DescribeOptions{dvipsopt,pstoepsopt,pstopdfopt,pdftoepsopt,pdftopsopt}
% Depending on the used \LaTeX~processor the file type of the extracted graphic 
% differs. In order to create all formats, which where requested with option 
% \opt{extractformat}, several converting tools provided by most of the 
% \LaTeXe~distributions are invoked. Specifically, these are \file{dvips}, 
% \file{ps2eps}, \file{ps2pdf} and/or \file{pdftops} and can't be changed. It's 
% only possible to specify additional option for every single tool with options 
% \opt{dvipsopt}, \opt{pstoepsopt}, \opt{pstopdfopt}, \opt{pdftoepsopt} and 
% \opt{pdftopsopt}.
%
% \DescribeOption{clean}
% Because a large number of files is generated for each \file{svg}~file
% extraction, it is oftentimes desirable to automatically remove the temporary
% files. Using the option \opt{clean} will remove any generated files created
% other than the extracted output(s) requested. The \opt{clean} option is by
% default set as \val{false} to enable debugging. 
%
% \DescribeOption{exclude}
% Sometimes it may be necessary to export an \file{svg}~file without including
% it in the current document. If the flag \opt{exclude} is specified, the
% \file{svg}~file will not be rendered in the current document, but will be
% extracted to the requested output(s).
%
% \DescribeOptions{extractpath}
% A path for the extracted files can also be specified with the 
% \opt{extractpath} option, which must terminate with a \file{/}. The default
% \opt{extractpath} is set to the current directory, \file{./}.
%
%
%
% \subsection{Convert extracted grahic files}
%
% \DescribeOption{convert}
%
% \DescribeOption{convertformat}
% \ToDo{used input format for conversion (\opt{extractformat})}
% \ToDo{describe format specific options/keys/parameters}
%
% \DescribeOption{convertdpi}
% This options controls the used density for all or a specific file format,
% whether \app{ImageMagick} or \app{Ghostscript} is used for the graphic 
% conversion. The desired resolution of the converted file is given in dots per
% inch~(DPI) either as a scalar value (e.g.~\opt{convertdpi=600}) or with 
% different resolutions in x- and y"~direction (e.g.~\opt{convertdpi=600x400}).
%
% \DescribeOptions{magickexe,magicksetting,magickoperator}
% The conversion with \app{ImageMagick} via the \app{magick} or \app{convert} 
% command-line~tool can be controlled with these options. The option
% \opt{magickexe} determines the used executable and is set to \file{magick} on
% Windows and otherwise to \file{convert} by default. Additionally there are
% the two options \opt{magicksetting} and \opt{magickoperator} which can be
% used to define \emph{settings} and \emph{operators} for the conversion
% process. For further information see the documentation of
% \hrfn{http://www.imagemagick.org/script/command-line-processing.php}%
% {\app{ImageMagick} command-line tool}.
%
% \DescribeOptions{gsexe,gsdevice,gsopt}
%
%
%
% \section{Example}\label{sec:example}
%
% \ToDo{REVISE!, remove \cs{href}?}
% As an example\footnote{The image used here is a slightly modified
% version of the image used in the initial documentation on how to
% include an \file{svg}~file in \LaTeX{} by Johan\,B.\,C.~Engelen available on
% \href{http://www.ctan.org/tex-archive/info/svg-inkscape}{CTAN}.}
% take the following lines of code
% \begin{example}
%   \begin{figure}
%     \subfloat[This text is too large!]{%
%       \includesvg[clean,preamble=preamble.tex,pdf,width=5cm]{example}%
%     }%
%     \subfloat[This text fits better.]{%
%       \includesvg[%
%         clean,preamble=preamble.tex,eps,pretex=\relscale{0.5},width=5cm%
%       ]{example}%
%     }%
%     \caption{An example figure.\label{fig:example}}
%   \end{figure}
% \end{example}
% where the \file{example.svg} within this directory has been 
% included twice using the \cs{svginclude} command. The output is shown in 
% Figure \ref{fig:example}.
%
% \begin{figure}
%   \begin{center}
%     \subfloat[This text is too large!]{%
%       \includesvg[%
%         name=Fig.1a,clean,preamble=examples/preamble.tex,pdf,width=5cm%
%       ]{examples/example}%
%     }%
%     \subfloat[This text fits better.]{%
%       \includesvg[%
%         name=Fig.1b,clean,preamble=examples/preamble.tex,%
%         eps,pretex=\relscale{0.5},width=5cm%
%       ]{examples/example}%
%     }%
%     \caption{An example figure.\label{fig:example}}
%   \end{center}
% \end{figure}
%
% The first subfigure is created with the export option \prm{pdf} with the
% default \prm{name}, and so the file \file{Fig.1a.pdf} is extracted. However,
% the text is overrunning the margins of the image, and so the second
% subfigure decreases the relative size of the text within the image
% using the \prm{pretex} option. Now, an \file{eps}~file is requested for
% extraction, and so the file \file{Fig.1b.eps} is created.
%
% Notice that for both subfigures, the \prm{preamble} was set to
% \file{preamble.tex}, also included in this current directory, rather than
% the default current document. Additionally, the flag \prm{clean} has
% been used which forces the cleanup of any extraneous generated
% files.
%
% \section{ROOT}\label{sec:root}
%
% There is actually a third purpose to this package, which will almost
% certainly be relevant to experimental particle physicists only, who
% frequently use the analysis package \app{Root}. Further details on how to
% obtain beautiful \app{Root} plots using this package are given in Section
% \ref{sec:root}.
%
% \ToDo{REVISE!, remove \cs{href}?}
% \app{Root} has the ability to export directly to an \file{svg}~file, which
% means
% that it is possible to completely by-pass all of \app{Root}'s internal
% text rendering machinery, and let \LaTeX{} handle the text
% natively. This means that all of the ugly fonts that are rendered by
% \app{Root} can now be completely avoided, with the additional bonus of
% being able to add references within plots. So how does one go about
% using this package with \app{Root}?
% \begin{enumerate}
% \item Create the plot with \app{Root} as normal, but turn off all 
%   \LaTeX~interpretation of text strings. This is a bit tricky, but can be
%   accomplished by setting the font in \app{Root} to a precision of zero
%   as described in the documentation for
%   \href{http://root.cern.ch/root/html/TAttText.html}{\ttfamily TAttFill}. 
%   Remember that the font is set using the function
%   |(TAttFill*)->SetTextFont(i)| with
%   \[\texttt{i}=\textrm{(font type)} \times 10 + \textrm{(font precision)}\]
%   In the following lines of code, a |TStyle| is defined which sets the font
%   to type ``Courier New'' with a precision of zero.
%   \begin{example}
%     TStyle *style = new TStyle("style","style"); int FONT = 80;
%     style->SetTextFont(FONT);
%     style->SetLabelFont(FONT,"XYZ");
%     style->SetTitleFont(FONT,"XYZ");
%     style->SetTitleFont(FONT,"");
%     gROOT->SetStyle("style");
%     gROOT->ForceStyle();
%   \end{example}
%   Now, just use the standard \LaTeX~syntax for creating labels,
%   etc. Note however, that the backslash must be escaped due to
%   interpretation of special characters by C++.
% \item Print the plot as an \file{svg}~file.
%   \begin{example}
%     gPad->Print("foo.svg");
%   \end{example}
% \item Include the \file{svg}~file within the document using this package.
%   \begin{example}
%     \usepackage[clean,pdf]{svg}
%     ...
%     \includesvg[width=\columnwidth]{foo}
%   \end{example}
% \end{enumerate}
%
% \begin{figure}
%   \begin{center}
%     \includesvg[%
%       clean,preamble=examples/preamble.tex,pdf,png,height=6cm,pretex=\tiny,%
%       inkscapearea=page%
%     ]{examples/root}
%   \end{center}
%   \caption{%
%     Rendering of a \app{Root} plot (no more ``Comic CERNs'').\label{fig:root}%
%   }
% \end{figure}
%
% Consider the example image produced by \app{Root} in Figure
% \ref{fig:root}. This figure was generated by the \app{Root} macro
% \file{root.C}, provided within this directory, which produces the
% file \file{root.svg} when run. The code used to produce this \file{svg}~file 
% from within\app{Root} is
% \lstinputlisting[basicstyle=\footnotesize\ttfamily,columns=flexible,
% frame=single,backgroundcolor=\color{yellow!20},xleftmargin=\fboxsep,
% xrightmargin=\fboxsep,gobble=1]{examples/root.C} where the text produced
% within the \app{Root} plot is set to a precision of zero. The plot was
% then included within this document using the \LaTeX~code
% \begin{example}
%   \begin{figure}
%     \begin{center}
%       \includesvg[clean,preamble=preamble.tex,pdf,png,height=6cm,pretex=\tiny]
%       {root}
%     \end{center}
%     \caption{Rendering of a \app{Root} plot (no more ``Comic
%     CERNs'').\label{fig:root}}
%   \end{figure}
% \end{example}
% which produces the extracted images \file{Fig.2.pdf} and
% \file{Fig.2.png}. Enjoy plots from \app{Root} with natively rendered \LaTeX!
%
% \StopEventually{\PrintIndex\PrintChanges\PrintToDos}
%
% \iffalse
%<*package&option>
% \fi
%
% \appendix
% \part{Implementation}
% \section{Initialization}
%
% The package \pkg{svg} requires \pkg{scrbase} for options processing, the
% packages \pkg{ifluatex}, \pkg{ifpdf} and \pkg{ifxetex} for detecting the 
% used \LaTeX{} engine, \pkg{pdftexcmds} for pdf\TeX{} primitives when using
% Lua\TeX, \pkg{shellesc} and \pkg{ifplatform} for engine independent access to 
% systems commands and files as well as \pkg{graphicx} for the inclusion of
% \file{pdf}~files. The usage of packages \pkg{xcolor} and \pkg{transparent}
% can be switched of with the corresponding options. Package \pkg{svg-extract} 
% only needs package \pkg{svg} itself.
% \ToDo{update required release date of \pkg{scrbase}}[v3.23]
%    \begin{macrocode}
%<*base>
\RequirePackage{scrbase}[2016/06/14]
\RequirePackage{ifluatex}[2016/05/16]
\RequirePackage{ifpdf}[2016/05/14]
\RequirePackage{ifxetex}[2010/09/12]
\RequirePackage{pdftexcmds}[2016/05/21]
\RequirePackage{shellesc}[2016/06/07]
\RequirePackage{graphicx}[1999/02/16]
%</base>
%<*extract>
\RequirePackage{svg-new}[2017/00/00]
%</extract>
%    \end{macrocode}
% With the interface provided by package \pkg{scrbase} all options, which can 
% be set either as package options or with \cs{svgsetup}, as well as the
% optional parameters for both user commands  
% \cs{includesvg}\oarg{parameters}\marg{svgfile} and
% \cs{includeinkscape}\oarg{parameters}\marg{exportfile} are defined.
%    \begin{macrocode}
\DefineFamily{SVG}
\DefineFamilyMember{SVG}
%    \end{macrocode}
% \begin{macro}{\svg@deprecated@key}
% With version v2.00 the whole user interface was renewed. For reasons of 
% compatibility, outdated options and parameters from version~v1.0 are also 
% provided. If an old key was given, a warning is issued and the valid key is
% used.
%    \begin{macrocode}
%<*base>
\newcommand*\svg@deprecated@key[3][svg]{%
  \PackageWarning{#1}{%
    The option key `#2' is deprecated.\MessageBreak%
    It's recommended to use `#3'\MessageBreak%
    instead%
  }%
  \FamilyOptions{SVG}{#3}%
}
%</base>
%    \end{macrocode}
% \end{macro}^^A \svg@deprecated@key
% \begin{macro}{\svg@tempa}
% \begin{macro}{\svg@tempb}
% \begin{macro}{\if@svg@tempswa}
% \begin{macro}{\svg@tempcnt}
% Internal temporary macros.
%    \begin{macrocode}
%<*base>
\newcommand*\svg@tempa{}
\newcommand*\svg@tempb{}
\newif\if@svg@tempswa
\newcount\svg@tempcnt
%</base>
%    \end{macrocode}
% \end{macro}^^A \svg@tempcnt
% \end{macro}^^A \if@svg@tempswa
% \end{macro}^^A \svg@tempb
% \end{macro}^^A \svg@tempa
%
% \iffalse
%</package&option>
%<*package&base>
%<*option>
% \fi
%
% \section{Including \file{svg} files with package \pkg{svg}}
% \subsection{Options}
%
% Within the exported \LaTeX~files of \app{Inkscape}, some commands are used 
% out of additional packages. But maybe the user doesn't want to load this 
% packages anyways.
%
% \begin{option}{usexcolor}
% \changes{v2.00}{2017/02/17}{new}
% \begin{option}{noxcolor}
% \changes{v2.00}{2017/02/17}{new}
% \begin{macro}{\if@svg@use@xcolor}
% \begin{option}{usetransparent}
% \changes{v2.00}{2017/02/17}{new}
% \begin{option}{notransparent}
% \changes{v2.00}{2017/02/17}{new}
% \begin{macro}{\if@svg@use@transparent}
% Options for preventing packages \pkg{xcolor} and \pkg{transparent} to be 
% loaded.
%    \begin{macrocode}
\newif\if@svg@use@xcolor
\FamilyBoolKey{SVG}{usexcolor}{@svg@use@xcolor}
\DeclareOption{noxcolor}{\FamilyOptions{SVG}{usexcolor=false}}
\newif\if@svg@use@transparent
\FamilyBoolKey{SVG}{usetransparent}{@svg@use@transparent}
\DeclareOption{notransparent}{\FamilyOptions{SVG}{usetransparent=false}}
%    \end{macrocode}
% They are only available during the loading process of package \pkg{svg}.
%    \begin{macrocode}
\AtEndOfPackage{%
  \RelaxFamilyKey{SVG}{usexcolor}%
  \RelaxFamilyKey{SVG}{usetransparent}%
  \if@svg@use@xcolor%
    \RequirePackage{xcolor}[2016/05/11]%
  \else%
    \AfterPackage*{xcolor}{%
      \PackageWarning{svg}{Package `xcolor' was loaded anyway}%
    }%
  \fi%
  \if@svg@use@transparent%
    \RequirePackage{transparent}[2016/05/16]%
  \else%
    \AfterPackage*{transparent}{%
      \PackageWarning{svg}{Package `transparent' was loaded anyway}%
    }%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \if@svg@use@transparent
% \end{option}^^A notransparent
% \end{option}^^A usetransparent
% \end{macro}^^A \if@svg@use@xcolor
% \end{option}^^A noxcolor
% \end{option}^^A usexcolor
%
% \subsubsection{The invocation of \app{Inkscape}}
%
% The Application \app{Inkscape} is used to create includable graphic files in 
% a desired format (\file{pdf/eps/ps/png}) out of files in \file{svg}~format, 
% whereas the support of \LaTeX{} can optionally be used.
%
% \begin{option}{inkscape}
% \changes{v2.00}{2017/02/17}{changed/extended}
% \begin{macro}{\svg@ink@mode}
% The intension of option \opt{inkscape} is to control the running behaviour of 
% \app{Inkscape}. It can be switched off at all or invoked only if necessarry 
% or the command line call can be forced with every run of \LaTeX. Additionally 
% option \opt{inkscape} can be used as wrapper for options \opt{inkscapeformat},
% \opt{inkscapearea}, \opt{inkscapelatex} and \opt{inkscapedpi}, which are
% declared later.
%    \begin{macrocode}
\newcommand*\svg@ink@mode{}
\DefineFamilyKey{SVG}{inkscape}[true]{%
  \FamilySetNumerical{SVG}{inkscape}{svg@tempa}{%
    {false}{0},{off}{0},{no}{0},%
    {true}{1},{on}{1},{yes}{1},{onlynewer}{1},{newer}{1},%
    {force}{2},{forced}{2},{overwrite}{2},%
    {pdf}{3},{eps}{4},{ps}{5},{png}{6},%
    {drawing}{7},{crop}{7},%
    {page}{8},{nocrop}{8},%
    {tex}{9},{latex}{9},{exportlatex}{9},{latexexport}{9},%
    {notex}{10},{nolatex}{10},{noexportlatex}{10},{nolatexexport}{10},%
    {latexnoexport}{10},{raw}{10},{plain}{10},{simple}{10}%
  }{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \ifnum\svg@tempa<\thr@@\relax%
      \let\svg@ink@mode\svg@tempa%
    \else%
      \ifcase\svg@tempa\relax\or\or\or% pdf
        \FamilyOptions{SVG}{inkscapeformat=pdf}%
      \or% eps
        \FamilyOptions{SVG}{inkscapeformat=eps}%
      \or% ps
        \FamilyOptions{SVG}{inkscapeformat=ps}%
      \or% png
        \FamilyOptions{SVG}{inkscapeformat=png}%
      \or% drawing
        \FamilyOptions{SVG}{inkscapearea=drawing}%
      \or% page
        \FamilyOptions{SVG}{inkscapearea=page}%
      \or% tex
        \FamilyOptions{SVG}{inkscapelatex=true}%
      \or% notex
        \FamilyOptions{SVG}{inkscapelatex=false}%
      \fi%
    \fi%
%    \end{macrocode}
% It's also possible to set the option \opt{inkscapedpi} by passing a number 
% followed by \val{dpi} like \opt{inkscape=\val{300dpi}}.
%    \begin{macrocode}
  \else% dpi
    \def\svg@tempa##1dpi##2\@nil{%
      \ifstr{##2}{dpi}{\FamilyOptions{SVG}{inkscapedpi=##1}}{}%
    }%
    \lowercase{\svg@tempa#1dpi\@nil}%
%    \end{macrocode}
% In version~v1.0 the option \opt{inkscape} was used to set both the executable 
% and options for \app{Inkscape}. This is taken into account here.
%    \begin{macrocode}
    \ifx\FamilyKeyState\FamilyKeyStateProcessed\else%
%    \end{macrocode}
% Splitting executable from options with delimitted macros. After calling 
% \cs{svg@tempa} with the given value, the part for the executable is stored in 
% \cs{svg@tempa} and the option part---which is recognized by the first \val{-} 
% character--- in \cs{svg@tempb}.
%    \begin{macrocode}
      \def\svg@tempa##1-##2\@nil{%
        \IfArgIsEmpty{##2}{\def\svg@tempb{}}{%
          \def\svg@tempa##1####1\@nil{\def\svg@tempb{####1}}%
          \svg@tempa#1\@nil%
        }%
        \def\svg@tempa{##1}%
      }%
      \svg@tempa#1-\@nil%
      \PackageWarning{svg}{%
        Setting the executable%
        \ifx\svg@tempb\@empty\else%
          \space and associated options%
        \fi%
        \MessageBreak%
        for Inkscape should be done with options\MessageBreak%
        `inkscapeexe=\svg@tempa'%
        \ifx\svg@tempb\@empty\else%
          \MessageBreak and `inkscapeopt=\svg@tempb'%
        \fi.\MessageBreak% 
        Nevertheless, this was done by now anyway%
      }%
      \edef\svg@tempa{%
        \noexpand\FamilyOptions{SVG}{inkscapeexe=\svg@tempa}%
        \ifx\svg@tempb\@empty\else%
          \noexpand\FamilyOptions{SVG}{inkscapeopt=\svg@tempb}%
        \fi%
      }%
      \svg@tempa%
    \fi%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \svg@ink@mode
% \end{option}^^A inkscape
% \begin{option}{on}
% \changes{v2.00}{2017/02/24}{new}
% \begin{option}{off}
% \changes{v2.00}{2017/02/24}{new}
% Package options which can be used to switch functionality on or off during 
% the loading of package \pkg{svg}.
%    \begin{macrocode}
\DeclareOption{on}{\FamilyOptions{SVG}{inkscape=true}}
\DeclareOption{off}{\FamilyOptions{SVG}{inkscape=false}}
%    \end{macrocode}
% \end{option}^^A off
% \end{option}^^A on
% \begin{option}{inkscapeformat}
% \changes{v2.00}{2017/02/17}{new}
% \begin{macro}{\svg@ink@format}
% With option \opt{inkscapeformat} the output format of the \app{Inkscape} 
% export function, which is called via \cs{ShellEscape}, can be configured.
% It is set to \val{pdf} or, if dvi output could be detected, to \val{eps} 
% during initialization.
%    \begin{macrocode}
\newcommand*\svg@ink@format{pdf}
\ifxetex\else\ifpdf\else
  \renewcommand*\svg@ink@format{eps}
\fi\fi
\DefineFamilyKey{SVG}{inkscapeformat}{%
  \FamilySetNumerical{SVG}{inkscapeformat}{svg@tempa}{%
    {pdf}{0},{eps}{1},{ps}{2},{png}{3}%
  }{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \ifcase\svg@tempa\relax% latex
      \renewcommand*\svg@ink@format{pdf}%
    \or% eps
      \renewcommand*\svg@ink@format{eps}%
    \or% ps
      \renewcommand*\svg@ink@format{ps}%
    \or% png
      \renewcommand*\svg@ink@format{png}%
    \fi%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \svg@ink@format
% \end{option}^^A inkscapeformat
% \begin{option}{inkscapearea}
% \changes{v2.00}{2017/02/17}{new}
% \begin{macro}{\svg@ink@area}
% The exported area for an \app{Inkscape} graphic can be set with this option.
%    \begin{macrocode}
\newcommand*\svg@ink@area{}
\DefineFamilyKey{SVG}{inkscapearea}{%
  \FamilySetNumerical{SVG}{inkscapearea}{svg@tempa}{%
    {drawing}{0},{crop}{0},%
    {page}{1},{nocrop}{1}%
  }{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \ifcase\svg@tempa\relax% drawing
      \renewcommand*\svg@ink@area{-D}%
    \else% page
      \renewcommand*\svg@ink@area{-C}%
    \fi%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \svg@ink@area
% \end{option}^^A inkscapearea
% \begin{option}{inkscapelatex}
% \changes{v2.00}{2017/02/17}{new}
% \begin{macro}{\svg@ink@latex}
% This options controls whether the \app{Inkscape} export will be invoked with 
% or without the generation of a seperate \LaTeX{}~file.
%    \begin{macrocode}
\newif\if@svg@ink@latex
\FamilyBoolKey{SVG}{inkscapelatex}{@svg@ink@latex}
%    \end{macrocode}
% \end{macro}^^A \svg@ink@latex
% \end{option}^^A inkscapelatex
% \begin{option}{inkscapedpi}
% \changes{v2.00}{2017/02/17}{new}
% \begin{option}{inkscapedensity}
% \begin{macro}{\svg@ink@dpi}
% A density can be chosen, which is used during export with \app{Inkscape} for 
% bitmaps and rasterization of filters.
%    \begin{macrocode}
\newcommand*\svg@ink@dpi{}
\let\svg@ink@dpi\relax
\DefineFamilyKey{SVG}{inkscapedpi}{%
  \FamilyKeyStateUnknownValue%
  \svg@ifvalueisrelax{#1}{%
    \let\svg@ink@dpi\relax%
    \FamilyKeyStateProcessed%
  }{%
    \def\svg@tempa##1dpi##2\@nil{\def\svg@tempa{##1}}%
    \lowercase{\svg@tempa#1dpi\@nil}%
    \ifnumber{\svg@tempa}{%
      \edef\svg@ink@dpi{\svg@tempa}%
      \FamilyKeyStateProcessed%
    }{}%
  }%
}
\DefineFamilyKey{SVG}{inkscapedensity}{\FamilyOptions{SVG}{inkscapedpi=#1}}
%    \end{macrocode}
% \end{macro}^^A \svg@ink@dpi
% \end{option}^^A inkscapedensity
% \end{option}^^A inkscapedpi
% \begin{option}{inkscapeexe}
% \changes{v2.00}{2017/02/17}{new}
% \begin{macro}{\svg@ink@exe}
% \begin{option}{inkscapeopt}
% \changes{v2.00}{2017/02/17}{new}
% \begin{macro}{\svg@ink@opt}
% With these options, the terminal command for invoking \app{Inkscape} as well 
% as additional options can be defined.
%    \begin{macrocode}
\newcommand*\svg@ink@exe{inkscape}
\DefineFamilyKey{SVG}{inkscapeexe}{%
  \renewcommand*\svg@ink@exe{#1}%
  \FamilyKeyStateProcessed%
}
\newcommand*\svg@ink@opt{}
\DefineFamilyKey{SVG}{inkscapeopt}{%
  \renewcommand*\svg@ink@opt{#1}%
  \FamilyKeyStateProcessed%
}
%    \end{macrocode}
% \end{macro}^^A \svg@ink@opt
% \end{option}^^A inkscapeopt
% \end{macro}^^A \svg@ink@exe
% \end{option}^^A inkscapeexe
%
% \subsubsection{Setting input folder}
%
% \begin{option}{svgpath}
% \changes{v2.00}{2017/02/12}{deprecated}
% In version~v1.0 setting the path to \file{svg}~files was done via option. So 
% this method is provided as well.
%    \begin{macrocode}
\DefineFamilyKey{SVG}{svgpath}{%
  \PackageWarning{svg}{%
    The key `svgpath' is deprecated. It's recommended\MessageBreak%
    to use `\string\svgpath' instead%
  }%
  \ifx\svgpath\@undefined%
    \AtEndOfPackage{\svgpath{{#1}}}%
  \else%
    \svgpath{{#1}}%
  \fi%
  \FamilyKeyStateProcessed%
}
%    \end{macrocode}
% \end{option}^^A svgpath
%
% \subsubsection{Setting output folder}
%
% \begin{option}{inkscapepath}
% \changes{v2.00}{2017/02/17}{new}
% \begin{option}{inkscapename}
% \changes{v2.00}{2017/02/17}{new}
% \begin{macro}{\svg@out@path}
% \begin{macro}{\svg@out@name}
% \begin{macro}{\svg@out@base}
% The option \opt{inkscapepath} controls, in which folder the results of the
% \app{Inkscape} export will be located. With option \opt{inkscapename} the 
% name of the exported file itself can be changed.
%    \begin{macrocode}
\newcommand*\svg@out@path{}
\newcommand*\svg@out@name{\svg@file@name\svg@file@ext}
\newcommand*\svg@out@base{\svg@out@path\svg@out@name.\svg@ink@format}
\DefineFamilyKey{SVG}{inkscapepath}{%
  \FamilySetNumerical{SVG}{inkscapepath}{svg@tempa}{%
    {svgpath}{0},{svgdir}{0},%
    {svgsubpath}{1},{svgsubdir}{1},%
    {basepath}{2},{basedir}{2},{jobpath}{2},{jobdir}{2},%
    {basesubpath}{3},{basesubdir}{3},{jobsubpath}{3},{jobsubdir}{3}%
  }{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \ifcase\svg@tempa\relax% svgpath
      \renewcommand*\svg@out@path{\svg@file@path}%
    \or% svgsubpath
      \renewcommand*\svg@out@path{\svg@file@path svg-export/}%
    \or% basepath
      \renewcommand*\svg@out@path{./}%
    \or% basesubpath
      \renewcommand*\svg@out@path{./svg-export/}%
    \fi%
  \else%
    \renewcommand*\svg@out@path{#1}%
    \svg@normalize@path{\svg@out@path}%
    \FamilyKeyStateProcessed%
  \fi%
}
\DefineFamilyKey{SVG}{inkscapename}{%
  \renewcommand*\svg@out@name{#1\svg@file@ext}%
  \FamilyKeyStateProcessed%
}
%    \end{macrocode}
% \end{macro}^^A \svg@out@base
% \end{macro}^^A \svg@out@name
% \end{macro}^^A \svg@out@path
% \end{option}^^A inkscapename
% \end{option}^^A inkscapepath
%
% \subsubsection{Options for the inclusion of graphics}
%
% After the graphic export with \app{Inkscape}, the inclusion of those graphics 
% can be controlled with the following options.
%
% \begin{option}{width}
% \begin{macro}{\svg@param@width}
% \begin{option}{height}
% \changes{v2.00}{2017/02/17}{new}
% \begin{macro}{\svg@param@width}
% \begin{option}{scale}
% \changes{v2.00}{2017/02/17}{new}
% \begin{macro}{\svg@param@scale}
% These options determine the size of the included graphics. The usage of
% \val{\cs{relax}} as value resets the respective option to the default 
% behavior.
%    \begin{macrocode}
\newcommand*\svg@param@width{\z@}
\DefineFamilyKey{SVG}{width}{%
  \FamilyKeyStateUnknownValue%
  \svg@ifvalueisrelax{#1}{%
    \renewcommand*\svg@param@width{\z@}%
    \FamilyKeyStateProcessed%
  }{%
    \FamilySetLengthMacro{SVG}{width}{\svg@param@width}{#1}%
    \ifdim\svg@param@width<\z@\relax%
      \FamilyKeyStateUnknownValue%
    \fi%
  }%
}
\newcommand*\svg@param@height{\z@}
\DefineFamilyKey{SVG}{height}{%
  \FamilyKeyStateUnknownValue%
  \svg@ifvalueisrelax{#1}{%
    \renewcommand*\svg@param@height{\z@}%
    \FamilyKeyStateProcessed%
  }{%
    \FamilySetLengthMacro{SVG}{height}{\svg@param@height}{#1}%
    \ifdim\svg@param@height<\z@\relax%
      \FamilyKeyStateUnknownValue%
    \fi%
  }%
}
\newcommand*\svg@param@scale{1}
\DefineFamilyKey{SVG}{scale}{%
  \FamilyKeyStateUnknownValue%
  \svg@ifvalueisrelax{#1}{%
    \renewcommand*\svg@param@scale{1}%
    \FamilyKeyStateProcessed%
  }{%
    \ifisdimension{#1\p@}{%
      \ifdim\dimexpr#1\p@\relax>\z@\relax%
        \renewcommand*\svg@param@scale{#1}%
        \FamilyKeyStateProcessed%
      \fi%
    }{}%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \svg@param@scale
% \end{option}^^A scale
% \end{macro}^^A \svg@param@height
% \end{option}^^A height
% \end{macro}^^A \svg@param@width
% \end{option}^^A width
% \begin{option}{pretex}
% \begin{macro}{\svg@param@pretex}
% \begin{option}{apptex}
% \begin{macro}{\svg@param@apptex}
% \begin{option}{postex}
% \changes{v2.00}{2017/03/02}{deprecated}
% For executing code right before or after the graphic inclusion, two hooks are 
% defined.
%    \begin{macrocode}
\newcommand*\svg@param@pretex{}
\let\svg@param@pretex\relax
\DefineFamilyKey{SVG}{pretex}{%
  \svg@ifvalueisrelax{#1}{%
    \let\svg@param@pretex\relax%
  }{%
    \def\svg@param@pretex{#1}%
  }%
  \FamilyKeyStateProcessed%
}
\newcommand*\svg@param@apptex{}
\let\svg@param@apptex\relax
\DefineFamilyKey{SVG}{apptex}{%
  \svg@ifvalueisrelax{#1}{%
    \let\svg@param@apptex\relax%
  }{%
    \def\svg@param@apptex{#1}%
  }%
  \FamilyKeyStateProcessed%
}
\DefineFamilyKey{SVG}{postex}{%
  \svg@deprecated@key{postex=#1}{apptex=#1}%
}
%    \end{macrocode}
% \end{option}^^A postex
% \end{macro}^^A \svg@param@apptex
% \end{option}^^A apptex
% \end{macro}^^A \svg@param@pretex
% \end{option}^^A pretex
% \begin{option}{lastpage}
% \changes{v2.00}{2017/02/20}{new}
% \begin{counter}{svg@param@lastpage}
% For \app{Inkscape}~0.91 a bug concerning the \LaTeX{} export has been reproted
% (\url{https://bugs.launchpad.net/ubuntu/+source/inkscape/+bug/1417470}). 
% Sometimes the \LaTeX{}~file created by \app{Inkscape} tries to include more
% pages than actually are present in the \file{pdf}~file. To work around this 
% problem, a patch is provided. For this purpose, the total page number is read 
% from the \file{pdf}~file. 
%    \begin{macrocode}
\newcounter{svg@param@lastpage}
\DefineFamilyKey{SVG}{lastpage}{%
  \FamilySetNumerical{SVG}{lastpage}{svg@tempa}{%
    {false}{0},{off}{0},{no}{0},{ignore}{0},%
    {true}{1},{on}{1},{yes}{1},{auto}{1}%
  }{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \ifcase\svg@tempa\relax% false
      \FamilySetCounter{SVG}{lastpage}{svg@param@lastpage}{\m@ne}%
    \or% true
      \FamilySetCounter{SVG}{lastpage}{svg@param@lastpage}{\z@}%
    \fi%
  \fi%
}
%    \end{macrocode}
% \end{counter}^^A svg@param@lastpage
% \end{option}^^A lastpage
% \begin{option}{draft}
% \changes{v2.00}{2017/02/17}{new}
% \begin{macro}{\if@svg@draft}
% The option \opt{draft} has the same effect as the eponymous option of package
% \pkg{graphicx}.
%    \begin{macrocode}
\newif\if@svg@draft
\FamilyBoolKey{SVG}{draft}{@svg@draft}
\AtBeginDocument{\if@svg@draft\else\ifGin@draft\@svg@drafttrue\fi\fi}
%    \end{macrocode}
% \end{macro}^^A \if@svg@draft
% \end{option}^^A draft
%
% \subsection{Handling path information}
%
% Both packages \pkg{svg} and \pkg{svg-extract} should be able to handle 
% user-defined input and output paths. As there is the possibility for users to 
% provide paths with or without quotes to \LaTeX, this is taken into account.
%
% \begin{macro}{\svg@quotes@remove}
% \begin{macro}{\svg@quotes@@remove}
% These two commands are used to remove all occuring quotes within a string. 
% The only argument passed to \cs{svg@quotes@remove} is not the string itself
% but a macro in which a string is stored.
%    \begin{macrocode}
\newcommand*\svg@quotes@remove[1]{%
  \begingroup%
    \edef\svg@tempa{#1}%
    \expandafter\svg@quotes@@remove\svg@tempa""\@nil%
    \edef\svg@tempb{%
      \endgroup%
      \noexpand\def\noexpand#1{\unexpanded\expandafter{\svg@tempa}}%
    }%
  \svg@tempb%
}
\newcommand*\svg@quotes@@remove{}
\def\svg@quotes@@remove#1"#2"#3\@nil{%
  \IfArgIsEmpty{#2}{%
    \edef\svg@tempa{#1}%
  }{%
    \svg@quotes@@remove#1#2#3""\@nil%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \svg@quotes@@remove
% \end{macro}^^A \svg@quotes@remove
% \begin{macro}{\svg@quotes@check}
% \begin{macro}{\svg@quotes@@check}
% \begin{macro}{\if@svg@quotes@found}
% During the treatment of paths, it may be necessary to temporarily remove 
% quotes and, if required, add them again later. For this purpose, the switch 
% \cs{if@svg@quotes@found} as well as the commands \cs{svg@quotes@check} and
% \cs{svg@quotes@@check}, which controls the switch, are defined. As before, 
% the string is passed in a macro to \cs{svg@quotes@check}.
%    \begin{macrocode}
\newif\if@svg@quotes@found
\newcommand*\svg@quotes@check[1]{%
  \expandafter\svg@quotes@@check#1"\@nil%
}
\newcommand*\svg@quotes@@check{}
\def\svg@quotes@@check#1"#2\@nil{%
  \IfArgIsEmpty{#2}{\@svg@quotes@foundfalse}{\@svg@quotes@foundtrue}%
}
%    \end{macrocode}
% \end{macro}^^A \if@svg@quotes@found
% \end{macro}^^A \svg@quotes@@check
% \end{macro}^^A \svg@quotes@check
% \begin{macro}{\svg@normalize@path}
% \begin{macro}{\svg@normalize@@path}
% If any path is given, a trailing slash is needed. These two macros ensure
% that this condition is fulfilled in any case, even if this is not considered
% by the user. As before, a macro containgin the path string is passed to 
% \cs{svg@normalize@path}.
%    \begin{macrocode}
\newcommand*\svg@normalize@path[1]{%
  \begingroup%
    \svg@quotes@check{#1}%
    \svg@quotes@remove{#1}%
    \expandafter\svg@normalize@@path#1//\@nil%
    \edef\svg@tempb{%
      \endgroup%
      \if@svg@quotes@found%
        \noexpand\def\noexpand#1{"\unexpanded\expandafter{\svg@tempa}"}%
      \else%
        \noexpand\def\noexpand#1{\unexpanded\expandafter{\svg@tempa}}%
      \fi%
    }%
  \svg@tempb%
}
\newcommand*\svg@normalize@@path{}
\def\svg@normalize@@path#1/#2/\@nil{%
  \IfArgIsEmpty{#2}{%
    \IfArgIsEmpty{#1}{\def\svg@tempa{}}{\def\svg@tempa{#1/}}%
  }{%
    \svg@normalize@@path#2/\@nil%
    \edef\svg@tempa{#1/\unexpanded\expandafter{\svg@tempa}}%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \svg@normalize@@path
% \end{macro}^^A \svg@normalize@path
% \begin{macro}{\svg@ifvalueisrelax}
% For some keys the usage of \val{\cs{relax}} as a value should lead to a 
% special reaction, such as restoring to default behavior or reseting the key.
% Therefore, \cs{svg@ifvalueisrelax} checks, whether \val{\cs{relax}} was used
% as value or not.
%    \begin{macrocode}
\newcommand*\svg@ifvalueisrelax[1]{%
  \begingroup%
    \def\svg@tempa{#1}%
    \def\svg@tempb{\relax}%
    \ifx\svg@tempa\svg@tempb\relax%
      \aftergroup\@firstoftwo%
    \else%
      \aftergroup\@secondoftwo%
    \fi%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \svg@ifvalueisrelax
%
% \iffalse
%</option>
%<*body>
% \fi
%
% \begin{macro}{\svg@get@path}
% \begin{macro}{\svg@get@@path}
% \begin{macro}{\if@svg@file@found}
% \begin{macro}{\svg@file@path}
% \begin{macro}{\svg@file@name}
% \begin{macro}{\svg@file@base}
% \begin{macro}{\svg@file@ext}
% The command \cs{svg@get@path} tries to find a given \file{svg}~file. If the 
% searched file wasn't found in the current path, all paths given with 
% \cs{svgpath} are evaluated. If there was no appropriate file again, all paths
% given by \cs{graphicspath} are examined. In the last step, a given path 
% within the second mandatory argument is browsed. The results for file path
% and name are stored in \cs{svg@file@path} and \cs{svg@file@name} as well as
% the compound of both is saved in \cs{svg@file@base}.
%    \begin{macrocode}
\newif\if@svg@file@found
\newcommand*\svg@file@path{}
\newcommand*\svg@file@name{}
\newcommand*\svg@file@base{}
\newcommand*\svg@file@ext{}
\newcommand*\svg@get@path[3][svg]{%
  \begingroup%
%    \end{macrocode}
% A maybe given, unneeded file extension is removed.
%    \begin{macrocode}
    \edef\svg@tempa{#2}%
    \svg@quotes@check{\svg@tempa}%
    \svg@quotes@remove{\svg@tempa}%
    \def\svg@tempb##1.#1##2\@nil{%
      \IfArgIsEmpty{##2}{%
        \def\svg@tempa{##1.#1}%
      }{%
        \ifstr{##2}{_tex.#1}{\def\svg@tempa{##1.#1}}{}%
      }%
    }%
    \expandafter\svg@tempb\svg@tempa.#1\@nil%
    \if@svg@quotes@found%
      \edef\svg@tempa{"\svg@tempa"}%
    \fi%
%    \end{macrocode}
%    \begin{macrocode}
    \@svg@file@foundfalse%
    \svg@get@@path{\svg@tempa}%
    \if@svg@file@found\else%
      \ifx\svg@path\@undefined\else%
        \let\input@path\svg@path%
        \svg@get@@path{\svg@tempa}%
      \fi%
    \fi%
    \if@svg@file@found\else%
      \ifx\Ginput@path\@undefined\else%
        \let\input@path\Ginput@path%
        \svg@get@@path{\svg@tempa}%
      \fi%
    \fi%
    \IfArgIsEmpty{#3}{}{%
      \if@svg@file@found\else%
        \ifx#3\@undefined\else%
          \edef\svg@tempb{{#3}}%
          \let\input@path\svg@tempb%
          \svg@get@@path{\svg@tempa}%
        \fi%
      \fi%
    }%
    \edef\svg@tempa{%
      \endgroup%
      \if@svg@file@found%
        \noexpand\@svg@file@foundtrue%
        \noexpand\def\noexpand\svg@file@path{\filename@area}%
        \noexpand\def\noexpand\svg@file@name{\filename@base}%
        \noexpand\def\noexpand\svg@file@base{\filename@area\filename@base}%
      \else%
        \noexpand\@svg@file@foundfalse%
        \noexpand\def\noexpand\svg@file@path{}%
        \noexpand\def\noexpand\svg@file@name{#2}%
        \noexpand\def\noexpand\svg@file@base{#2}%
      \fi%
    }%
  \svg@tempa%
}
%    \end{macrocode}
% The macro \cs{svg@get@@path} does the actual search job.
%    \begin{macrocode}
\newcommand*\svg@get@@path[1]{%
% The specified file is searched with \cs{IfFileExists}. If the file search was 
% succesful, the macro \cs{svg@filename@parse} is called with the result.
%    \begin{macrocode}
  \expandafter\IfFileExists\expandafter{#1}{%
    \@svg@file@foundtrue%
    \expandafter\svg@filename@parse\expandafter{\@filef@und}%
  }{}%
}
%    \end{macrocode}
% \end{macro}^^A \svg@file@ext
% \end{macro}^^A \svg@file@base
% \end{macro}^^A \svg@file@name
% \end{macro}^^A \svg@file@path
% \end{macro}^^A \if@svg@file@found
% \end{macro}^^A \svg@get@@path
% \end{macro}^^A \svg@get@path
% \begin{macro}{\svg@filename@parse}
% As the internal \LaTeXe{} command \cs{filename@parse} is not able to split a 
% given file name containing quotes, \cs{svg@filename@parse} is defined to 
% resolve this problem.
%    \begin{macrocode}
\newcommand*\svg@filename@parse[1]{%
  \begingroup%
    \def\svg@tempa##1{%
      \def\svg@tempb####1####2\@nil{%
        \ifstr{####1}{"}{\def\svg@tempb{####2}}{\def\svg@tempb{####1####2}}%
      }%
      \expandafter\svg@tempb##1\@nil%
      \edef##1{\svg@tempb}%
    }%
%    \end{macrocode}
% The given path and file is parsed with \cs{filename@parse}. If an extension 
% was found, it is appended to the file name for a second parsing run.
%    \begin{macrocode}
    \filename@parse{#1}%
    \ifx\filename@ext\relax\else%
      \edef\filename@base{\filename@base.\filename@ext}%
    \fi%
%    \end{macrocode}
% If there are quotes in the file path, the closing one will be found as first 
% character in \cs{filename@base} as \cs{filename@area} is splitted at the last
% slash. This leading quote is removed from \cs{filename@base} with 
% \cs{svg@tempa}.
%    \begin{macrocode}
    \svg@quotes@check{\filename@area}%
    \if@svg@quotes@found%
      \svg@quotes@remove{\filename@area}%
      \edef\filename@area{"\filename@area"}%
      \svg@tempa{\filename@base}%
    \fi%
%    \end{macrocode}
% Before the second call of \cs{filename@parse} remaining quotes are removed 
% and the path in \cs{filename@area} is temporary stored in \cs{svg@tempa}.
%    \begin{macrocode}
    \svg@quotes@check{\filename@base}%
    \if@svg@quotes@found%
      \svg@quotes@remove{\filename@base}%
    \fi%
    \let\svg@tempa\filename@area%
    \expandafter\filename@parse\expandafter{\filename@base}%
    \let\filename@area\svg@tempa%
    \if@svg@quotes@found%
       \edef\filename@base{"\filename@base"}%
    \fi%
%    \end{macrocode}
% With \cs{svg@tempa} the group is closed and the results are saved in the
% macros \cs{filename@\dots}.
%    \begin{macrocode}
    \edef\svg@tempa{%
      \noexpand\endgroup%
      \noexpand\def\noexpand\filename@area{\filename@area}%
      \noexpand\def\noexpand\filename@base{\filename@base}%
      \ifx\filename@ext\relax%
        \noexpand\let\noexpand\filename@ext\noexpand\relax%
      \else%
        \noexpand\def\noexpand\filename@ext{\filename@ext}%
      \fi%
    }%
  \svg@tempa%
}
%    \end{macrocode}
% \end{macro}^^A \svg@filename@parse
% \begin{macro}{\svg@file@missing}
% The error message, which is raised, if an file is missing either after the 
% export with \app{Inkscape} or in general.
%    \begin{macrocode}
\newcommand*\svg@file@missing[3][]{%
  \begingroup%
    \edef\svg@tempa{#2}%
    \expandafter\svg@filename@parse\expandafter{\svg@tempa}%
    \svg@quotes@remove{\filename@area}%
    \svg@quotes@remove{\filename@base}%
    \svg@quotes@remove{\filename@ext}%
    \IfArgIsEmpty{#1}{%
      \def\svg@tempa{%
        Did you run the export with Inkscape? There's no file\MessageBreak%
        `\filename@area\filename@base.\filename@ext'%
      }%
    }{%
      \edef\filename@ext{#1}%
      \edef\svg@tempb{#3}%
      \ifstr{\svg@tempb}{./}{\let\svg@tempb\@empty}{}%
      \ifstr{\filename@area}{./}{\let\filename@area\@empty}{}%
      \def\svg@tempa{%
        There's no file `\filename@base.\filename@ext'\MessageBreak%
        \ifx\filename@area\@empty%
          neither in the current directory nor\MessageBreak%
          any other searched path given by\MessageBreak%
          \string\svgpath%
          \ifx\svg@path\@undefined\space\else%
            \space(\svg@path)\MessageBreak%
          \fi%
           or \string\graphicspath%
          \ifx\Ginput@path\@undefined\else%
            \space(\Ginput@path)%
          \fi%
          \ifx\svg@tempb\@empty\else%
            \MessageBreak or even `inkscapepath' (`\svg@tempb')%
          \fi.%
        \else%
          in folder `\filename@area'.%
        \fi%
      }%
    }%
    \PackageError{svg}{%
      File `\filename@base.\filename@ext' is missing%
    }{\svg@tempa}%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \svg@file@missing
% \begin{macro}{\svg@iffilenewer}
% The macro \cs{svg@iffilenewer} is used to decide, whether the export with 
% \app{Inkscape} is necessarry due to an updated \file{svg}~file. This can only 
% be done, if \cs{pdf@filemoddate} is definied. Unfortunately this functionality
% isn't provided by Xe\TeX.
%    \begin{macrocode}
\ifx\pdf@filemoddate\@undefined
  \newcommand*\svg@iffilenewer[2]{\@gobbletwo}
\else
  \newcommand*\svg@iffilenewer[2]{%
    \begingroup%
      \edef\svg@tempa{\pdf@filemoddate{#1}}%
      \edef\svg@tempb{\pdf@filemoddate{#2}}%
      \ifnum\pdf@strcmp{\svg@tempa}{\svg@tempb}>\z@\relax%
        \aftergroup\@firstoftwo%
      \else%
        \aftergroup\@secondoftwo%
      \fi%
    \endgroup%
  }
\fi
%    \end{macrocode}
% \end{macro}^^A \svg@iffilenewer
%
% \subsection{Optional Parameters for user commands}
%
% \begin{macro}{\svg@local@param@set}
% \begin{macro}{\svg@local@param@use}
% \begin{macro}{\svg@local@param@def}
% Most of the package options can also be used as optional parameters for 
% \cs{includesvg} or \cs{includeinkscape}. Some of them are overloaded for the 
% usage as optional argument and there are some keys, which \emph{only} can be
% used as optional parameters. This is realized in such a way that
% \cs{svg@local@param@use} is extended with \cs{svg@local@param@def} by the
% definition of local keys during the loading of package \pkg{svg}.
%    \begin{macrocode}
\newcommand*\svg@local@param@set[1]{%
  \svg@local@param@use%
  \FamilyOptions{SVG}{#1}%
%    \end{macrocode}
% As \cs{svg@local@param@set} is always used in a local group, it is possible 
% to set \opt{inkscapelatex} to \val{false}, if the output format was set to 
% \val{png} with option \opt{inkscapeformat}.
%    \begin{macrocode}
  \ifstr{\svg@ink@format}{png}{\FamilyOptions{SVG}{inkscapelatex=false}}{}%
}
\newcommand*\svg@local@param@use{}
\newcommand*\svg@local@param@def[1]{%
  \edef\svg@local@param@use{%
    \unexpanded\expandafter{\svg@local@param@use}\unexpanded{#1}%
  }%
}
\DefineFamilyMember[.param]{SVG}
%    \end{macrocode}
% \end{macro}^^A \svg@local@param@def
% \end{macro}^^A \svg@local@param@use
% \end{macro}^^A \svg@local@param@set
%
% \subsection{User commands}
%
% \begin{macro}{\svgsetup}
% \changes{v2.00}{2017/02/17}{new}
% \begin{macro}{\setsvg}
% \changes{v2.00}{2017/02/17}{deprecated}
% The macro \cs{svgsetup} can be used to change options after loading the 
% package \pkg{svg} both in preamble and the document body. For compatibility 
% reasons, \cs{setsvg} is also defined.
%    \begin{macrocode}
\newcommand*\svgsetup{\FamilyOptions{SVG}}
\newcommand*\setsvg{\FamilyOptions{SVG}}
%    \end{macrocode}
% \end{macro}^^A \setsvg
% \end{macro}^^A \svgsetup
% \begin{macro}{\svgpath}
% \changes{v2.00}{2017/02/12}{new}
% \begin{macro}{\svg@path}
% With \cs{svgpath} the user can give several root paths to \file{svg}~files in 
% the same way as \cs{graphicspath} is used. The only difference is that a 
% missing slash is added at the end of the path, if needed.
%    \begin{macrocode}
\newcommand*\svg@path{}
\let\svg@path\@undefined
\newcommand*\svgpath[1]{%
  \def\svg@path{}%
  \@tfor\svg@tempa:=#1\do{%
    \svg@normalize@path{\svg@tempa}%
    \edef\svg@path{\svg@path{\svg@tempa}}%
  }%
  \ifx\svg@path\@empty%
    \let\svg@path\@undefined%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \svg@path
% \end{macro}^^A \svgpath
% \begin{macro}{\includesvg}
% \changes{v2.00}{2017/02/17}{changes, especially to optional parameters}
% For the inclusion of \file{svg}~files the command \cs{includesvg} is defined.
%    \begin{macrocode}
\newcommand*{\includesvg}[2][]{%
  \begingroup%
%    \end{macrocode}
% Checking for deprecated commands \cs{svgwidth} and \cs{svgscale}.
%    \begin{macrocode}
    \svg@deprecated@param%
%    \end{macrocode}
% \begin{parameter}{inkscape}
% \changes{v2.00}{2017/02/17}{new}
% \begin{parameter}{inkscapeformat}
% \changes{v2.00}{2017/02/17}{new}
% \begin{parameter}{inkscapearea}
% \changes{v2.00}{2017/02/17}{new}
% \begin{parameter}{inkscapelatex}
% \changes{v2.00}{2017/02/17}{new}
% \begin{parameter}{inkscapedpi}
% \changes{v2.00}{2017/02/17}{new}
% \begin{parameter}{inkscapeexe}
% \changes{v2.00}{2017/02/17}{new}
% \begin{parameter}{inkscapeopt}
% \changes{v2.00}{2017/02/17}{new}
% \begin{parameter}{inkscapepath}
% \changes{v2.00}{2017/02/17}{new}
% \begin{parameter}{width}
% \begin{parameter}{height}
% \changes{v2.00}{2017/02/17}{new}
% \begin{parameter}{scale}
% \changes{v2.00}{2017/02/17}{new}
% \begin{parameter}{pretex}
% \begin{parameter}{apptex}
% \begin{parameter}{lastpage}
% \changes{v2.00}{2017/02/17}{new}
% \begin{parameter}{angle}
% \changes{v2.00}{2017/02/17}{new}
% \begin{parameter}{origin}
% \changes{v2.00}{2017/02/17}{new}
% Most of the optional parameters have the same effect as the identically named
% options. Only parameter \prm{lastpage} is extended (see below). Moreover,
% there are some additional parameters, which can only be used as optional
% argument for \cs{includesvg} (\prm{angle} and \prm{origin}) but not as an 
% option. Now all parameters are set in local context (within a group).
%    \begin{macrocode}
    \svg@local@param@set{#1}%
%    \end{macrocode}
% \end{parameter}^^A origin
% \end{parameter}^^A angle
% \end{parameter}^^A lastpage
% \end{parameter}^^A apptex
% \end{parameter}^^A pretex
% \end{parameter}^^A scale
% \end{parameter}^^A height
% \end{parameter}^^A width
% \end{parameter}^^A inkscapepath
% \end{parameter}^^A inkscapeopt
% \end{parameter}^^A inkscapeexe
% \end{parameter}^^A inkscapedpi
% \end{parameter}^^A inkscapelatex
% \end{parameter}^^A inkscapearea
% \end{parameter}^^A inkscapeformat
% \end{parameter}^^A inkscape
% The file suffix used by both packages \pkg{svg} and \pkg{svg-extract}.
%    \begin{macrocode}
    \if@svg@ink@latex%
      \def\svg@file@ext{_svg-tex}%
    \else%
      \def\svg@file@ext{_svg-raw}%
    \fi%
    \@onelevel@sanitize\svg@file@ext%
%    \end{macrocode}
% Searching all given paths for the relevant \file{svg}~file.
%    \begin{macrocode}
    \svg@get@path{#2}{}%
    \if@svg@file@found%
%    \end{macrocode}
% Running the export with \app{Inkscape} (if necessarry) and checking the 
% required files for graphic inclusion.
%    \begin{macrocode}
      \svg@ink@run%
      \IfFileExists{\svg@out@base}{}{%
        \@svg@file@foundfalse%
        \svg@file@missing{\svg@out@base}{}%
      }%
      \if@svg@ink@latex%
        \IfFileExists{\svg@out@base_tex}{}{%
          \@svg@file@foundfalse%
          \svg@file@missing{\svg@out@base_tex}{}%
        }%
      \fi%
%    \end{macrocode}
% Include the resulting graphic file and maybe extract independent files.
%    \begin{macrocode}
      \if@svg@file@found%
        \svg@input{\svg@out@base}%
        \svg@extract{\svg@out@base}%
      \fi%
    \else%
%    \end{macrocode}
% Raise an error, if the requested \file{svg}~file wasn't found.
%    \begin{macrocode}
      \svg@file@missing[svg]{\svg@file@base}{}%
    \fi%
  \endgroup%
}
%    \end{macrocode}
% \begin{parameter}{lastpage}
% \changes{v2.00}{2017/02/17}{new}
% In addition to the automatic finding of the last page, which is included, it 
% can also be given directly as parameter.
%    \begin{macrocode}
\svg@local@param@def{%
  \FamilyCounterKey[.param]{SVG}{lastpage}{svg@param@lastpage}%
}
%    \end{macrocode}
% \end{parameter}^^A lastpage
% \begin{parameter}{angle}
% \changes{v2.00}{2017/02/17}{new}
% \begin{parameter}{origin}
% \changes{v2.00}{2017/02/17}{new}
% The parameters \prm{angle} and \prm{origin} are definied as pendants to the 
% keys provided by \cs{includegraphics}.
%    \begin{macrocode}
\newcommand*\svg@param@angle{0}
\svg@local@param@def{%
  \DefineFamilyKey[.param]{SVG}{angle}{%
    \renewcommand*\svg@param@angle{#1}%
    \FamilyKeyStateProcessed%
  }%
}
\newcommand*\svg@param@origin{c}
\svg@local@param@def{%
  \DefineFamilyKey[.param]{SVG}{origin}[c]{%
    \renewcommand*\svg@param@origin{#1}%
    \FamilyKeyStateProcessed%
  }%
}
%    \end{macrocode}
% \end{parameter}^^A origin
% \end{parameter}^^A angle
% \end{macro}^^A \includesvg
% \begin{macro}{\includeinkscape}
% \changes{v2.00}{2017/02/23}{new}
% The command \cs{includeinkscape} can be used for including the export results 
% of \app{Inkscape}, if this part of the job was done in another way.
%    \begin{macrocode}
\newcommand*{\includeinkscape}[2][]{%
  \begingroup%
%    \end{macrocode}
% Checking for deprecated commands \cs{svgwidth} and \cs{svgscale}.
%    \begin{macrocode}
    \svg@deprecated@param%
%    \end{macrocode}
% The given file extension is examined. If there's a suffix \val{\_tex}, the 
% option \opt{inkscapelatex} is set to \val{true} by default.
%    \begin{macrocode}
    \filename@parse{#2}%
    \ifx\filename@ext\relax\else%
      \svg@quotes@remove{\filename@ext}%
      \ifstr{\filename@ext}{\svg@ink@format_tex}{%
        \FamilyOptions{SVG}{inkscapelatex=true}%
      }{}%
    \fi%
%    \end{macrocode}
% \begin{parameter}{inkscapeformat}
% \begin{parameter}{inkscapelatex}
% \begin{parameter}{inkscapepath}
% \begin{parameter}{width}
% \begin{parameter}{height}
% \begin{parameter}{scale}
% \begin{parameter}{pretex}
% \begin{parameter}{apptex}
% \begin{parameter}{lastpage}
% \begin{parameter}{angle}
% \begin{parameter}{origin}
% All parameters which are supported by \cs{includesvg} can also be used with 
% \cs{includeinkscape} even if some of them---more precisely those that control 
% the export with \app{Inkscape}---don't have an effect at all. Nevertheless, 
% they are set right now in local context (within a group).
%    \begin{macrocode}
    \svg@local@param@set{#1}%
%    \end{macrocode}
% \end{parameter}^^A origin
% \end{parameter}^^A angle
% \end{parameter}^^A lastpage
% \end{parameter}^^A apptex
% \end{parameter}^^A pretex
% \end{parameter}^^A scale
% \end{parameter}^^A height
% \end{parameter}^^A width
% \end{parameter}^^A inkscapepath
% \end{parameter}^^A inkscapelatex
% \end{parameter}^^A inkscapeformat
% Searching all given paths for the relevant \file{pdf/eps}~file.
%    \begin{macrocode}
    \expandafter\svg@get@path\expandafter[\svg@ink@format]{#2}{\svg@out@path}%
    \if@svg@file@found%
%    \end{macrocode}
% Checking the required files for graphic inclusion.
%    \begin{macrocode}
      \edef\svg@out@name{\svg@file@name}%
      \edef\svg@out@base{\svg@file@path\svg@file@name.\svg@ink@format}%
      \if@svg@ink@latex%
        \IfFileExists{\svg@out@base_tex}{}{%
          \@svg@file@foundfalse%
          \svg@file@missing{\svg@out@base_tex}{}%
        }%
      \fi%
%    \end{macrocode}
% Include the resulting graphic file and maybe extract independent files.
%    \begin{macrocode}
      \if@svg@file@found%
        \svg@input{\svg@out@base}%
        \svg@extract{\svg@out@base}%
      \fi%
    \else%
%    \end{macrocode}
% Raise an error, if the requested \file{pdf/eps}~file wasn't found.
%    \begin{macrocode}
      \svg@file@missing[\svg@ink@format]{\svg@file@base}{\svg@out@path}%
    \fi%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \includeinkscape
%
% \subsection{Auxiliary macros}
%
% \begin{macro}{\svg@deprecated@param}
% This macro checks, if \cs{svgwidth} or \cs{svgscale} are defined. In this 
% case, the given values are passed to the correlating parameters and a warning 
% is raised.
%    \begin{macrocode}
\newcommand*\svg@deprecated@param{%
  \@svg@tempswafalse%
  \ifx\svgwidth\@undefined\else%
    \edef\svg@tempa{\noexpand\FamilyOptions{SVG}{width=\svgwidth}}%
    \svg@tempa%
    \@svg@tempswatrue%
  \fi%
  \ifx\svgscale\@undefined\else%
    \edef\svg@tempa{\noexpand\FamilyOptions{SVG}{scale=\svgscale}}%
    \svg@tempa%
    \@svg@tempswatrue%
  \fi%
  \if@svg@tempswa%
    \PackageWarning{svg}{%
      You should specify the image size with parameters\MessageBreak%
      `width' and `height' or `scale' instead of using\MessageBreak%
      `\string\svgscale' or `\string\svgwidth'%
    }%
    \let\svgwidth\@undefined%
    \let\svgscale\@undefined%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \svg@deprecated@param
% \begin{macro}{\svg@ink@run}
% \begin{macro}{\if@svg@ink@run}
% The command, which performs the call of \app{Inkscape} via \cs{ShellEscape}.
%    \begin{macrocode}
\newif\if@svg@ink@run
\newcommand*\svg@ink@run{%
  \ifnum\svg@ink@mode>\z@\relax%
    \begingroup%
%    \end{macrocode}
% If the mode for \opt{inkscape} was set to \val{force}, \app{Inkscape} will be 
% called in any case. Otherwise, some checks are performed to detect, if a run 
% of \app{Inkscape} is actually necessarry.
%    \begin{macrocode}
      \@svg@ink@runtrue%
      \ifnum\svg@ink@mode=\tw@\relax\else%
%    \end{macrocode}
% This is the case when the \file{svg}~file is newer than the corresponding
% exported file, or if the latter isn't present at all.
%    \begin{macrocode}
        \svg@iffilenewer{\svg@file@base.svg}{\svg@out@base}{}{%
          \@svg@ink@runfalse%
        }%
%    \end{macrocode}
% The same is true, when the associated \LaTeX{}~file is missing. But when this 
% file already exists, maybe the user did some changes to this file. In this 
% case, overwriting this file is maybe not intended.
%    \begin{macrocode}
        \if@svg@ink@latex%
          \IfFileExists{\svg@out@base_tex}{%
            \ifnum\pdf@shellescape=\@ne\relax\if@svg@ink@run%
              \svg@iffilenewer{\svg@out@base_tex}{\svg@out@base}{%
                \@svg@ink@runfalse%
                \edef\svg@tempa{\svg@out@base}%
                \svg@quotes@remove{\svg@tempa}%
                \PackageWarning{svg}{%
                  Since the encountered filedate of file\MessageBreak%
                  `\svg@tempa_tex' is newer than \MessageBreak%
                  `\svg@tempa' it's supposed that\MessageBreak%
                  you customized this file. To avoid an accidental\MessageBreak%
                  overwriting of this file, the Inkscape export\MessageBreak%
                  won't be done. If you want to overwrite the\MessageBreak%
                  existing file please choose the parameter\MessageBreak%
                  `inkscape=force'%
                }%
              }{}%
            \fi\fi%
          }{\@svg@ink@runtrue}%
        \fi%
      \fi%
%    \end{macrocode}
% If all checks were positive, the export with \app{Inkscape} can be done in 
% case \val{--shell-escape} is enabled.
%    \begin{macrocode}
      \if@svg@ink@run%
        \ifnum\pdf@shellescape=\@ne\relax%
%    \end{macrocode}
% For exporting \file{png}~files, the used density ist set to \val{300dpi}, if 
% no value was given.
%    \begin{macrocode}
          \ifx\svg@ink@dpi\relax%
            \ifstr{\svg@ink@format}{png}{%
              \FamilyOptions{SVG}{inkscapedpi=300}%
            }{}%
          \fi%
          \PackageInfo{svg}{%
            Calling Inkscape%
            \ifx\svg@ink@opt\@empty\else%
              \space with added options `\svg@ink@opt'%
            \fi%
          }%
%    \end{macrocode}
% Executing \app{Inkscape} on command line. Afterwards, the export results are 
% moved into the given output path.
%    \begin{macrocode}
          \edef\svg@tempa{\svg@file@base}%
          \edef\svg@tempb{\svg@out@name}%
          \svg@quotes@remove{\svg@tempa}%
          \svg@quotes@remove{\svg@tempb}%
          \ShellEscape{\svg@ink@cmd{\svg@tempa}{\svg@tempb}}%
          \IfFileExists{\svg@out@name.\svg@ink@format}{%
            \edef\svg@tempb{\svg@tempb.\svg@ink@format}%
            \svg@quotes@remove{\svg@out@base}%
            \svg@shell@mkdir{\svg@out@path}%
            \svg@shell@move{\svg@tempb}{\svg@out@base}%
            \if@svg@ink@latex%
              \svg@shell@move{\svg@tempb_tex}{\svg@out@base_tex}%
            \fi%
          }{%
            \PackageWarning{svg}{%
              The export with Inkscape failed for file\MessageBreak%
              `\svg@tempa.svg'\MessageBreak%
              Troubleshooting: Please check in the log file how\MessageBreak%
              the invocation of Inkscape took place and try to\MessageBreak%
              execute it yourself in the terminal%
            }%
          }%
%    \end{macrocode}
% If \val{--shell-escape} wasn't enabled, a warning is issued.
%    \begin{macrocode}
        \else%
          \edef\svg@tempa{\svg@file@base}%
          \svg@quotes@remove{\svg@tempa}%
          \PackageWarning{svg}{%
            You didn't enable `shell escape' (or `write18')\MessageBreak%
            so it wasn't possible to launch the Inkscape export\MessageBreak%
            for `\svg@tempa.svg'%
          }%
        \fi%
      \fi%
    \endgroup%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \if@svg@ink@run
% \end{macro}^^A \svg@ink@run
% \begin{macro}{\svg@ink@cmd}
% The actual call of \app{Inkscape} at command line.
%    \begin{macrocode}
\newcommand*\svg@ink@cmd[2]{%
  \svg@ink@exe\space-z\space\svg@ink@area\space%
  \ifx\svg@ink@dpi\relax\else--export-dpi=\svg@ink@dpi\space\fi%
  \if@svg@ink@latex--export-latex\space\fi%
  \svg@ink@opt\space%
  --file="#1.svg"\space%
  --export-\svg@ink@format="#2.\svg@ink@format"\space%
}
%    \end{macrocode}
% \end{macro}^^A \svg@ink@cmd
% \begin{macro}{\svg@get@lastpage}
% This macro is used to circumvent the multiple pages bug for \file{pdf}~files 
% of \app{Inkscape}~0.91, when the the \LaTeX{} export was enabled. For this
% purpose, the total page number is read from the \file{pdf}~file. 
%    \begin{macrocode}
\newcommand*\svg@get@lastpage[1]{%
  \ifstr{\svg@ink@format}{pdf}{%
    \begingroup%
      \svg@tempcnt=\m@ne\relax%
      \ifx\XeTeXpdfpagecount\@undefined%
        \ifpdf%
          \ifx\pdfximage\@undefined%
            \ifx\saveimageresource\@undefined\else%
              \saveimageresource{#1}%
              \svg@tempcnt=\lastsavedimageresourcepages\relax%
            \fi%
          \else%
            \pdfximage{#1}%
            \svg@tempcnt=\pdflastximagepages\relax%
          \fi%
        \fi%
      \else%
        \svg@tempcnt=\XeTeXpdfpagecount#1\relax%
      \fi%
      \ifnum\svg@tempcnt=\m@ne\relax%
        \PackageWarning{svg}{%
          It wasn't possible to detect the last page\MessageBreak%
          of `#1'%
        }%
      \else%
        \PackageInfo{svg}{Last page of `#1' is \the\svg@tempcnt}%
      \fi%
      \edef\svg@tempa{%
        \noexpand\endgroup%
        \noexpand\FamilyOptions{SVG}{lastpage=\the\svg@tempcnt}%
      }%
    \svg@tempa%
  }{}%
}
%    \end{macrocode}
% \end{macro}^^A \svg@get@lastpage
% \begin{macro}{\svg@wrn@scale}
% The option \opt{scale} respectively the parameter \prm{scale} is only 
% considered if the size was not specified.
%    \begin{macrocode}
\newcommand*\svg@wrn@scale{%
  \ifdim\dimexpr\svg@param@scale\p@\relax=\p@\relax\else%
    \@svg@tempswafalse%
    \ifdim\svg@param@width>\z@\relax%
      \@svg@tempswatrue%
    \fi%
    \ifdim\svg@param@height>\z@\relax%
      \@svg@tempswatrue%
    \fi%
    \if@svg@tempswa%
      \PackageWarning{svg}{%
        The parameter `scale' is only considered if neither\MessageBreak%
        `width' nor `height' are specified%
      }%
    \fi%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \svg@wrn@scale
% \begin{macro}{\svg@input}
% \begin{macro}{\svg@@input}
% With \cs{svg@@input} the export results of \app{Inkscape} are included. The 
% macro \cs{svg@input} is defined in order to realize the option \opt{exclude} 
% for package \pkg{svg-extract}.
%    \begin{macrocode}
\newcommand*\svg@input{\svg@@input}
\newcommand*\svg@@input[2][]{%
  \IfArgIsEmpty{#1}{}{\svg@local@param@set{#1}}%
  \if@svg@draft%
    \@svg@ink@latexfalse%
  \fi%
%    \end{macrocode}
% If the export with \app{Inkscape} was done with \LaTeX{} support enabled, the 
% corresponding file will be used together with \cs{input}. The necessary 
% patches to environment \env{picture} as well as command \cs{includegraphics} 
% are made beforehand with \cs{svg@patches}.
%    \begin{macrocode}
  \edef\svg@tempa{#2}%
  \if@svg@ink@latex%
    \svg@patches{\svg@tempa}%
    \ifnum\value{svg@param@lastpage}=\z@\relax%
      \expandafter\svg@get@lastpage\expandafter{\svg@tempa}%
    \fi%
    \edef\svg@tempa{%
      \ifx\svg@param@pretex\relax\else%
        \noexpand\svg@param@pretex%
      \fi%
      \noexpand\input{\svg@tempa_tex}%
      \ifx\svg@param@apptex\relax\else%
        \noexpand\svg@param@apptex%
      \fi%
    }%
%    \end{macrocode}
% If a rotation angle was given, the input is done within \cs{rotatebox}.
%    \begin{macrocode}
    \ifdim\dimexpr\svg@param@angle\p@\relax=\z@\relax%
      \svg@tempa%
    \else%
      \edef\svg@tempb{origin=\svg@param@origin}%
      \expandafter\rotatebox\expandafter[\svg@tempb]{\svg@param@angle}{%
        \svg@tempa%
      }%
    \fi%
  \else%
%    \end{macrocode}
% If the export with \app{Inkscape} was done without \LaTeX{} support, the 
% resulting graphic file will be included with \cs{includegraphics}.
%    \begin{macrocode}
    \svg@wrn@scale%
    \edef\svg@tempb{keepaspectratio,scale=\svg@param@scale}%
    \ifdim\svg@param@height>\z@\relax%
      \edef\svg@tempb{\svg@tempb,height=\svg@param@height}%
    \fi%
    \ifdim\svg@param@width>\z@\relax%
      \edef\svg@tempb{\svg@tempb,width=\svg@param@width}%
    \fi%
    \ifdim\dimexpr\svg@param@angle\p@\relax=\z@\relax\else%
      \edef\svg@tempb{%
        \svg@tempb,origin=\svg@param@origin,angle=\svg@param@angle%
      }%
    \fi%
    \if@svg@draft%
      \edef\svg@tempb{\svg@tempb,draft}%
    \else%
      \edef\svg@tempb{\svg@tempb,draft=false}%
    \fi%
    \expandafter\includegraphics\expandafter[\svg@tempb]{\svg@tempa}%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \svg@@input
% \end{macro}^^A \svg@input
%
% \subsection{Patches}
%
% \begin{macro}{\svg@patches}
% For including the export results from \app{Inkscape} with \LaTeX{} support 
% enabled, there are some patches necessarry for environment \env{picture} and 
% \cs{includegraphics}. Those patches are done with \cs{svg@patches}.
%    \begin{macrocode}
\newcommand*\svg@patches[1]{%
  \let\svg@picture@saved\picture%
  \let\picture\svg@picture@patched%
  \let\svg@includegraphics@saved\includegraphics%
  \let\includegraphics\svg@includegraphics@patched%
  \edef\svg@includegraphics@file{#1}%
}
%    \end{macrocode}
% \end{macro}^^A \svg@patches
% \begin{macro}{\svg@picture@saved}
% \begin{macro}{\svg@pictur@patched}
% In order to provide the possibility specify the desired width of a graphic, 
% the appropriate \cs{unitlength} is calculated at the beginning of the 
% \env{picture}~environment.
%    \begin{macrocode}
\newcommand*\svg@picture@saved{}
\newcommand*\svg@picture@patched{}
\newcommand*\svg@pictur@patched{}
\long\def\svg@picture@patched#1{\svg@pictur@patched@#1}
\def\svg@pictur@patched@(#1,#2){%
  \svg@wrn@scale%
%    \end{macrocode}
% If a desired height is present, the resulting \cs{unitlength} is calculated 
% with the ratio of the coordinates of the \env{picture}~environment given as 
% arguments for x- and y-direction by using \cs{Gscale@div}. With this factor, 
% \cs{unitlength}---which is connected to the x-coordinate---can be scaled in a 
% suitable manner.
%    \begin{macrocode}
  \ifdim\svg@param@height>\z@\relax%
    \Gscale@div\svg@tempa{#1\p@}{#2\p@}%
    \setlength\unitlength{\svg@param@height}%
    \setlength\unitlength{\svg@tempa\unitlength}%
    \ifdim\svg@param@width>\z@\relax%
      \ifdim\unitlength>\svg@param@width\relax%
        \setlength\unitlength{\svg@param@width}%
      \fi%
    \fi%
  \else%
%    \end{macrocode}
% If no height is given, \cs{unitlength} can be set easily.
%    \begin{macrocode}
    \ifdim\svg@param@width>\z@\relax%
      \setlength\unitlength{\svg@param@width}%
    \else%
      \setlength\unitlength{\svg@param@scale\unitlength}%
    \fi%
  \fi%
%    \end{macrocode}
% After setting \cs{unitlength}, the \env{picture}~environment can be called 
% with its original definition.
%    \begin{macrocode}
  \svg@picture@saved(#1,#2)%
}
%    \end{macrocode}
% \end{macro}^^A \svg@pictur@patched
% \end{macro}^^A \svg@picture@saved
% \begin{macro}{\svg@includegraphics@saved}
% \begin{macro}{\svg@includegraphics@patched}
% \begin{macro}{\svg@includegraphics@file}
% The patch to \cs{includegraphics} is meant to dissolve the \app{Inkscape} bug 
% concerning the inclusion of more \file{pdf}~pages than actually are existing.
%
% The given optional parameters to \cs{includegraphics} are processed and the 
% counter \cnt{svg@param@currpage} is set to the value of a given \prm{page}. 
% The value of parameter \prm{width} is ignored.
%    \begin{macrocode}
\DefineFamily{SVGpatch}
\DefineFamilyMember{SVGpatch}
\newcounter{svg@param@currpage}
\setcounter{svg@param@currpage}{\m@ne}
\FamilyCounterKey{SVGpatch}{page}{svg@param@currpage}
\DefineFamilyKey{SVGpatch}{width}{\FamilyKeyStateProcessed}
\newcommand*\svg@includegraphics@file{}
\newcommand*\svg@includegraphics@saved{}
\newcommand*\svg@includegraphics@patched[2][]{%
  \FamilyOptions{SVGpatch}{#1}%
%    \end{macrocode}
% If option \opt{lastpage} was set to \val{false}, each page is included---even 
% if it doesn't exist, which may cause errors.
%    \begin{macrocode}
  \ifnum\value{svg@param@lastpage}<\z@\relax%
    \FamilySetCounter{SVGpatch}{page}{svg@param@currpage}{%
      \the\value{svg@param@lastpage}%
    }%
  \fi%
%    \end{macrocode}
% Pages are only included, if counter \cnt{svg@param@lastpage} is smaller than 
% \cnt{svg@param@currpage}, where \cnt{svg@param@lastpage} was either given as 
% a number with parameter \prm{lastpage} or was automatically calculated with 
% \cs{svg@get@lastpage}.
%    \begin{macrocode}
  \ifnum\value{svg@param@currpage}>\value{svg@param@lastpage}\relax\else%
%    \end{macrocode}
% A page is included with the original definition of \cs{includegraphics}. All 
% optional parameters are passed.
%    \begin{macrocode}
    \svg@includegraphics@saved[{#1}]{\svg@includegraphics@file}%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \svg@includegraphics@file
% \end{macro}^^A \svg@includegraphics@patched
% \end{macro}^^A \svg@includegraphics@saved
%
% \iffalse
%</body>
%</package&base>
%<*package&option>
% \fi
%
% \section{Extracting independent graphic files with package \pkg{svg-extract}}
% \subsection{Options}
%
% For package \pkg{svg-extract} the user interface is extended. The following 
% options can either be set with \cs{svgsetup} or be used as local optional 
% parameters for \cs{includesvg} and \cs{includeinkscape}.
%
% \begin{macro}{\svg@dummy@key}
% If package \pkg{svg-extract} wasn't loaded, the following options are defined 
% for package \pkg{svg} in order to raise a warning message. Primarily this is 
% done for compatibility reasons.
%    \begin{macrocode}
%<*base>
\DefineFamilyMember[.dummy]{SVG}
\newcommand*\svg@dummy@key[2][]{%
  \IfArgIsEmpty{#1}{%
    \DefineFamilyKey[.dummy]{SVG}{#2}{%
      \PackageWarning{svg}{%
        The option key `#2' can only\MessageBreak%
        be used with package `svg-extract', but\MessageBreak%
        you didn't load it%
      }%
      \FamilyKeyStateProcessed%
    }%
  }{%
    \DefineFamilyKey[.dummy]{SVG}{#2}[{#1}]{%
      \PackageWarning{svg}{%
        The option key `#2' can only\MessageBreak%
        be used with package `svg-extract', but\MessageBreak%
        you didn't load it%
      }%
      \FamilyKeyStateProcessed%
    }%
  }%
%    \end{macrocode}
% Before package \pkg{svg-extract} the key of family member \val{.dummy} is 
% relaxed.
%    \begin{macrocode}
  \BeforePackage{svg-extract}{\RelaxFamilyKey[.dummy]{SVG}{#2}}%
}
%</base>
%    \end{macrocode}
% \end{macro}^^A \svg@dummy@key
%
% \subsubsection{Controlling the extract process}
%
% \begin{option}{extract}
% \changes{v2.00}{2017/02/24}{new}
% \begin{macro}{\if@svgx@run}
% With option \opt{extract} it can be controlled, if the extraction of 
% independent graphic files should be done.
%    \begin{macrocode}
%<*base>
\svg@dummy@key[true]{extract}
%</base>
%<*extract>
\newif\if@svgx@run
\DefineFamilyKey{SVG}{extract}[true]{%
  \FamilySetNumerical{SVG}{extract}{svg@tempa}{%
    {false}{0},{off}{0},{no}{0},%
    {true}{1},{on}{1},{yes}{1},{onlynewer}{1},{newer}{1},%
    {overwrite}{1},{force}{1},{forced}{1},%
    {pdf}{2},{eps}{3},{ps}{4}%
  }{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \ifcase\svg@tempa\relax% false
      \@svgx@runfalse%
    \or% true
      \@svgx@runtrue%
    \or% pdf
      \FamilyOptions{SVG}{extractformat=pdf}%
    \or% eps
      \FamilyOptions{SVG}{extractformat=eps}%
    \or% ps
      \FamilyOptions{SVG}{extractformat=ps}%
    \fi%
  \fi%
}
%</extract>
%    \end{macrocode}
% \end{macro}^^A \if@svgx@run
% \end{option}^^A extract
% \begin{option}{on}
% \changes{v2.00}{2017/02/24}{new}
% \begin{option}{off}
% \changes{v2.00}{2017/02/24}{new}
% Package options which can be used to switch functionality on or off during 
% the loading of package \pkg{svg-extract}.
%    \begin{macrocode}
%<*extract>
\DeclareOption{on}{\FamilyOptions{SVG}{extract=true}}
\DeclareOption{off}{\FamilyOptions{SVG}{extract=false}}
%</extract>
%    \end{macrocode}
% \end{option}^^A off
% \end{option}^^A on
% \begin{option}{extractformat}
% \changes{v2.00}{2017/02/24}{new}
% \begin{macro}{\svgx@format}
% \begin{option}{pdf}
% \changes{v2.00}{2017/03/02}{deprecated}
% \begin{option}{eps}
% \changes{v2.00}{2017/03/02}{deprecated}
% Option \opt{extractformat} controls the output format (\val{pdf/eps/ps}). It
% is set to \val{pdf} or, if dvi output could be detected, to \val{eps} during
% initialization.
%    \begin{macrocode}
%<*base>
\svg@dummy@key{extractformat}
\svg@dummy@key[true]{pdf}
\svg@dummy@key[true]{eps}
%</base>
%<*extract>
\newcommand*\svgx@format{pdf}
\ifxetex\else\ifpdf\else
  \renewcommand*\svgx@format{eps}
\fi\fi
\DefineFamilyKey{SVG}{extractformat}{%
  \edef\svgx@format{#1}%
  \FamilyKeyStateProcessed%
}
\DefineFamilyKey{SVG}{pdf}[true]{%
  \FamilySetBool{SVG}{pdf}{@svg@tempswa}{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \if@svg@tempswa%
      \svgx@ifinlist{pdf}{\svgx@format}{}{%
        \edef\svgx@format{\svgx@format,pdf}%
      }%
      \svg@deprecated@key{pdf}{extractformat={\svgx@format}}%
    \else%
      \FamilyKeyStateUnknownValue
    \fi%
  \fi%
}
\DefineFamilyKey{SVG}{eps}[true]{%
  \FamilySetBool{SVG}{eps}{@svg@tempswa}{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \if@svg@tempswa%
      \svgx@ifinlist{eps}{\svgx@format}{}{%
        \edef\svgx@format{\svgx@format,eps}%
      }%
      \svg@deprecated@key{eps}{extractformat={\svgx@format}}%
    \else%
      \FamilyKeyStateUnknownValue
    \fi%
  \fi%
}
%</extract>
%    \end{macrocode}
% \end{option}^^A eps
% \end{option}^^A pdf
% \end{macro}^^A \svgx@format
% \end{option}^^A extractformat
% \begin{option}{extractpreamble}
% \changes{v2.00}{2017/02/24}{new}
% \begin{option}{preamble}
% \changes{v2.00}{2017/02/24}{deprecated}
% \begin{macro}{\svgx@preamble}
% \begin{option}{extractpreambleend}
% \changes{v2.00}{2017/02/24}{new}
% \begin{option}{end}
% \changes{v2.00}{2017/02/24}{deprecated}
% \begin{macro}{\svgx@endpreamble}
% For the extraction process, a preamble is necessarry for a separate auxiliary 
% \LaTeX~file. By default, the preamble of the main document is used, which end
% is detected at \cs{begin\{document\}}.
%    \begin{macrocode}
%<*base>
\svg@dummy@key{extractpreamble}
\svg@dummy@key{preamble}
\svg@dummy@key{extractpreambleend}
\svg@dummy@key{end}
%</base>
%<*extract>
\newcommand*\svgx@preamble{\jobname.\svgx@latex@ext}%
\DefineFamilyKey{SVG}{extractpreamble}{%
  \renewcommand*\svgx@preamble{#1}%
  \FamilyKeyStateProcessed%
}
\DefineFamilyKey{SVG}{preamble}{%
  \svg@deprecated@key[svg-extract]{preamble=#1}{extractpreamble=#1}%
}
\newcommand*\svgx@endpreamble{}
\expandafter\def\expandafter\svgx@endpreamble\expandafter{%
  \csname begin\endcsname{document}%
}
\DefineFamilyKey{SVG}{extractpreambleend}{%
  \renewcommand*\svgx@endpreamble{#1}%
  \FamilyKeyStateProcessed%
}
\DefineFamilyKey{SVG}{end}{%
  \svg@deprecated@key[svg-extract]{end=#1}{extractpreambleend=#1}%
}
%</extract>
%    \end{macrocode}
% \end{macro}^^A \svgx@endpreamble
% \end{option}^^A end
% \end{option}^^A extractpreambleend
% \end{macro}^^A \svgx@preamble
% \end{option}^^A preamble
% \end{option}^^A extractpreamble
% \begin{option}{extractruns}
% \changes{v2.00}{2017/02/24}{new}
% \begin{counter}{svgx@runs}
% With this option, the number of \LaTeX~runs for the separate auxiliary file 
% can be set.
%    \begin{macrocode}
%<*base>
\svg@dummy@key{extractruns}
%</base>
%<*extract>
\newcounter{svgx@runs}
\DefineFamilyKey{SVG}{extractruns}{%
  \FamilySetCounter{SVG}{extractruns}{svgx@runs}{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \ifnum\value{svgx@runs}<\@ne\relax%
      \PackageWarning{svg-extract}{%
        The count for runs has to be at least one%
      }%
      \FamilySetCounter{SVG}{extractruns}{svgx@runs}{\@ne}%
    \fi%
  \fi%
}
%</extract>
%    \end{macrocode}
% \end{counter}^^A svgx@runs
% \end{option}^^A extractruns
% \begin{option}{latexexe}
% \changes{v2.00}{2017/02/24}{new}
% \begin{option}{pdflatex}
% \changes{v2.00}{2017/02/24}{deprecated}
% \begin{macro}{\svgx@latex@exe}
% \begin{option}{latexopt}
% \changes{v2.00}{2017/02/24}{new}
% \begin{macro}{\svgx@latex@opt}
% \begin{option}{latexext}
% \changes{v2.00}{2017/02/24}{new}
% \begin{macro}{\svgx@latex@ext}
% The command and facultative options for the \LaTeX~call of the separate 
% auxiliary file. The default is set according to the currently used compiler.
%    \begin{macrocode}
%<*base>
\svg@dummy@key{latexexe}
\svg@dummy@key{pdflatex}
\svg@dummy@key{latexopt}
\svg@dummy@key{latexext}
%</base>
%<*extract>
\ifxetex
  \newcommand*\svgx@latex@exe{xelatex}
\else\ifluatex
  \ifpdf
    \newcommand*\svgx@latex@exe{lualatex}
  \else
    \newcommand*\svgx@latex@exe{lualatex --output-format=dvi}
  \fi
\else\ifpdf
  \newcommand*\svgx@latex@exe{pdflatex}
\else
  \newcommand*\svgx@latex@exe{latex}
\fi\fi\fi
\DefineFamilyKey{SVG}{latexexe}{%
  \renewcommand*\svgx@latex@exe{#1}%
  \FamilyKeyStateProcessed%
}
\DefineFamilyKey{SVG}{pdflatex}{%
  \svg@deprecated@key[svg-extract]{pdflatex=#1}{latexexe=#1}%
}
\newcommand*\svgx@latex@opt{}
\DefineFamilyKey{SVG}{latexopt}{%
  \renewcommand*\svgx@latex@opt{#1}%
  \FamilyKeyStateProcessed%
}
\newcommand*\svgx@latex@ext{tex}
\DefineFamilyKey{SVG}{latexext}{%
  \renewcommand*\svgx@latex@ext{#1}%
  \FamilyKeyStateProcessed%
}
%</extract>
%    \end{macrocode}
% \end{macro}^^A \svgx@latex@ext
% \end{option}^^A latexext
% \end{macro}^^A \svgx@latex@opt
% \end{option}^^A latexopt
% \end{macro}^^A \svgx@latex@exe
% \end{option}^^A latexexe
% \end{option}^^A pdflatexexe
% \begin{option}{dvipsopt}
% \changes{v2.00}{2017/02/24}{new}
% \begin{macro}{\svgx@dvips@exe}
% \begin{macro}{\svgx@dvips@opt}
% \begin{option}{pstoepsopt}
% \changes{v2.00}{2017/02/24}{new}
% \begin{macro}{\svgx@pstoeps@exe}
% \begin{macro}{\svgx@pstoeps@opt}
% \begin{option}{pstopdfopt}
% \changes{v2.00}{2017/02/24}{new}
% \begin{macro}{\svgx@pstopdf@exe}
% \begin{macro}{\svgx@pstopdf@opt}
% \begin{option}{pdftoepsopt}
% \changes{v2.00}{2017/02/24}{new}
% \begin{macro}{\svgx@pdftoeps@exe}
% \begin{macro}{\svgx@pdftoeps@opt}
% \begin{option}{pdftopsopt}
% \changes{v2.00}{2017/02/24}{new}
% \begin{macro}{\svgx@pdftops@exe}
% \begin{macro}{\svgx@pdftops@opt}
% \begin{option}{pdftops}
% \changes{v2.00}{2017/02/24}{deprecated}
% Options and macros for calling convert commands, which are supplied by most
% \LaTeXe~distributions. These are used to generate all files, which are 
% supported by option \opt{extractformat}, as they don't need an additional
% application.
%    \begin{macrocode}
%<*base>
\svg@dummy@key{dvipsopt}
\svg@dummy@key{pstoepsopt}
\svg@dummy@key{pstopdfopt}
\svg@dummy@key{pdftoepsopt}
\svg@dummy@key{pdftopsopt}
\svg@dummy@key{pdftops}
%</base>
%<*extract>
\newcommand*\svgx@dvips@exe{dvips}
\newcommand*\svgx@dvips@opt{}
\DefineFamilyKey{SVG}{dvipsopt}{%
  \renewcommand*\svgx@dvips@opt{#1}%
  \FamilyKeyStateProcessed%
}
\newcommand*\svgx@pstoeps@exe{ps2eps}
\newcommand*\svgx@pstoeps@opt{-B -C}
\DefineFamilyKey{SVG}{pstoepsopt}{%
  \renewcommand*\svgx@pstoeps@opt{#1}%
  \FamilyKeyStateProcessed%
}
\newcommand*\svgx@pstopdf@exe{ps2pdf}
\newcommand*\svgx@pstopdf@opt{}
\DefineFamilyKey{SVG}{pstopdfopt}{%
  \renewcommand*\svgx@pstopdf@opt{#1}%
  \FamilyKeyStateProcessed%
}
\newcommand*\svgx@pdftoeps@exe{pdftops -eps}
\newcommand*\svgx@pdftoeps@opt{}
\DefineFamilyKey{SVG}{pdftoepsopt}{%
  \renewcommand*\svgx@pdftoeps@opt{#1}%
  \FamilyKeyStateProcessed%
}
\newcommand*\svgx@pdftops@exe{pdftops}
\newcommand*\svgx@pdftops@opt{}
\DefineFamilyKey{SVG}{pdftopsopt}{%
  \renewcommand*\svgx@pdftops@opt{#1}%
  \FamilyKeyStateProcessed%
}
\DefineFamilyKey{SVG}{pdftops}{%
  \PackageWarning{#1}{%
    The option key `pdftops' is deprecated.\MessageBreak%
    You should use either `pdftoepsopt' or\MessageBreak%
    `pdftopsopt' instead. See the manual for\MessageBreak%
    more. Nothing was done%
  }%
  \FamilyKeyStateProcessed
}
%</extract>
%    \end{macrocode}
% \end{option}^^A pdftops
% \end{macro}^^A \svgx@pdftops@opt
% \end{macro}^^A \svgx@pdftops@exe
% \end{option}^^A pdftopsopt
% \end{macro}^^A \svgx@pdftoeps@opt
% \end{macro}^^A \svgx@pdftoeps@exe
% \end{option}^^A pdftoepsopt
% \end{macro}^^A \svgx@pstopdf@opt
% \end{macro}^^A \svgx@pstopdf@exe
% \end{option}^^A pstopdfopt
% \end{macro}^^A \svgx@pstoeps@opt
% \end{macro}^^A \svgx@pstoeps@exe
% \end{option}^^A pstoepsopt
% \end{macro}^^A \svgx@dvips@opt
% \end{macro}^^A \svgx@dvips@exe
% \end{option}^^A dvipsopt
%
% \subsubsection{Invoking external application for graphic conversion}
%
% Besides the use of a conversion tool supplied by \LaTeXe, the applications 
% \app{ImageMagick} and \app{Ghostscript} can be used for converting graphics.
%
% \begin{option}{convert}
% \changes{v2.00}{2017/02/24}{changed/extended}
% \begin{macro}{\if@svgx@cnv@run}
% \begin{macro}{\svgx@cnv@cmd}
% The option \opt{convert} can be used to define, which of both applications 
% should be use. \app{ImageMagick} is set by default.
%    \begin{macrocode}
%<*base>
\svg@dummy@key[true]{convert}
%</base>
%<*extract>
\newif\if@svgx@cnv@run
\newcommand*\svgx@cnv@cmd{}
\DefineFamilyKey{SVG}{convert}[true]{%
  \FamilySetNumerical{SVG}{convert}{svg@tempa}{%
    {false}{0},{off}{0},{no}{0},%
    {true}{1},{on}{1},{yes}{1},{onlynewer}{1},{newer}{1},%
    {overwrite}{1},{force}{1},{forced}{1},%
    {magick}{2},{imagemagick}{2},%
    {gs}{3},{ghostscript}{3},%
    {gs64}{4},{ghostscript64}{4},%
    {gs32}{5},{ghostscript32}{5}%
  }{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \ifcase\svg@tempa\relax% false
      \@svgx@cnv@runfalse%
    \or% true
      \@svgx@cnv@runtrue%
    \or% magick
      \@svgx@cnv@runtrue%
      \renewcommand*\svgx@cnv@cmd{\svgx@magick@cmd}%
    \or% gs
      \@svgx@cnv@runtrue%
      \renewcommand*\svgx@cnv@cmd{\svgx@gs@cmd}%
    \or% gs64
      \@svgx@cnv@runtrue%
      \renewcommand*\svgx@cnv@cmd{\svgx@gs@cmd}%
      \svgx@onlywindows{%
        \renewcommand*\svgx@gs@exe{gswin64c}%
      }%
    \or% gs32
      \@svgx@cnv@runtrue%
      \renewcommand*\svgx@cnv@cmd{\svgx@gs@cmd}%
      \svgx@onlywindows{%
        \renewcommand*\svgx@gs@exe{gswin32c}%
      }%
    \fi%
%    \end{macrocode}
% In version~v1.0 the option \opt{convert} was used to set both the executable 
% and options for the conversion application, meant for the usage of 
% \app{ImageMagick}. This is taken into account here.
%    \begin{macrocode}
  \else%
%    \end{macrocode}
% Same doing like with option \opt{inkscape}.
%    \begin{macrocode}
    \def\svg@tempa##1-##2\@nil{%
      \IfArgIsEmpty{##2}{\def\svg@tempb{}}{%
        \def\svg@tempa##1####1\@nil{\def\svg@tempb{####1}}%
        \svg@tempa#1\@nil%
      }%
      \def\svg@tempa{##1}%
    }%
    \svg@tempa#1-\@nil%
    \PackageWarning{svg-extract}{%
      Setting the executable%
      \ifx\svg@tempb\@empty\else%
        \space and associated options%
      \fi%
      \MessageBreak% 
      for ImageMagick should be done with options\MessageBreak%
      `magickexe=\svg@tempa'%
      \ifx\svg@tempb\@empty\else%
        \MessageBreak and `magicksetting' and/or `magickoperator'%
      \fi.\MessageBreak% 
      Nevertheless, this was done by now%
      \ifx\svg@tempb\@empty\else%
        , whereby \MessageBreak `magicksetting=\svg@tempb' was used%
    }%
    \FamilyOptions{SVG}{convert=magick}%
    \edef\svg@tempa{%
      \noexpand\FamilyOptions{SVG}{magickexe=\svg@tempa}%
      \ifx\svg@tempb\@empty\else%
        \noexpand\FamilyOptions{SVG}{magicksetting=\svg@tempb}%
      \fi%
    }%
    \svg@tempa%
  \fi%
}
%</extract>
%    \end{macrocode}
% \end{macro}^^A \svgx@cnv@cmd
% \end{macro}^^A \if@svgx@cnv@run
% \end{option}^^A convert
% \begin{option}{convertformat}
% \changes{v2.00}{2017/02/24}{new}
% \begin{macro}{\svgx@cnv@format}
% \begin{option}{png}
% \changes{v2.00}{2017/03/02}{deprecated}
% Option \opt{convertformat} controls the output format for converted files. It
% is set to \val{png} by default.
%    \begin{macrocode}
%<*base>
\svg@dummy@key{convertformat}
\svg@dummy@key[true]{png}
%</base>
%<*extract>
\newcommand*\svgx@cnv@format{png}
\DefineFamilyKey{SVG}{convertformat}{%
  \edef\svgx@cnv@format{#1}%
  \ifx\svgx@cnv@format\@empty\else%
    \@svgx@cnv@runtrue%
  \fi%
  \FamilyKeyStateProcessed%
}
\DefineFamilyKey{SVG}{png}[true]{%
  \FamilySetBool{SVG}{png}{@svg@tempswa}{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \if@svg@tempswa%
      \svgx@ifinlist{png}{\svgx@cnv@format}{}{%
        \edef\svgx@cnv@format{\svgx@cnv@format,png}%
      }%
      \svg@deprecated@key{png}{convertformat={\svgx@cnv@format}}%
    \else%
      \FamilyKeyStateUnknownValue
    \fi%
  \fi%
}
%</extract>
%    \end{macrocode}
% \end{option}^^A png
% \end{macro}^^A \svgx@cnv@format
% \end{option}^^A convertformat
% \begin{option}{convertdpi}
% \changes{v2.00}{2017/02/24}{new}
% \begin{option}{convertdensity}
% \begin{macro}{\svgx@cnv@dpi}
% The option \opt{convertdpi} is meant to define the used density during the 
% conversion process. It can be set either for all designated output formats or 
% targeted for a specific format. It's also possible to use something like 
% \val{500x300} as value. The given value is resolved by \cs{svgx@cnv@get@dpi}.
% The option ist used like \opt{convertdpi=300} or \opt{convertdpi={png=600}}.
% If the option is used for a specific or for all output formats is recocnized 
% by \cs{svgx@ifkeyandval}.
%    \begin{macrocode}
%<*base>
\svg@dummy@key{convertdpi}
\svg@dummy@key{convertdensity}
%</base>
%<*extract>
\newcommand*\svgx@cnv@dpi{}
\let\svgx@cnv@dpi\relax
\DefineFamilyKey{SVG}{convertdpi}{%
  \FamilyKeyStateUnknownValue%
  \svgx@ifkeyandval{#1}{%
    \svgx@cnv@get@dpi{##2}%
    \ifx\svg@tempa\relax\else%
      \expandafter\edef\csname svgx@cnv@dpi@##1\endcsname{\svg@tempa}%
      \FamilyKeyStateProcessed%
    \fi%
  }{%
    \svgx@cnv@get@dpi{##1}%
    \ifx\svg@tempa\relax\else%
      \edef\svgx@cnv@dpi{\svg@tempa}%
      \FamilyKeyStateProcessed%
    \fi%
  }%
}
\DefineFamilyKey{SVG}{convertdensity}{\FamilyOptions{SVG}{convertdpi=#1}}
%</extract>
%    \end{macrocode}
% \end{macro}^^A \svgx@cnv@dpi
% \end{option}^^A convertdensity
% \end{option}^^A convertdpi
% \begin{option}{magickexe}
% \changes{v2.00}{2017/02/24}{new}
% \begin{macro}{\svgx@magick@exe}
% \begin{option}{magicksetting}
% \changes{v2.00}{2017/02/24}{new}
% \begin{macro}{\svgx@magick@set}
% \begin{option}{magickoperator}
% \changes{v2.00}{2017/02/24}{new}
% \begin{macro}{\svgx@magick@opr}
% Setting the command including maybe the path to \app{ImageMagick}. The keys
% \opt{magicksetting} and \app{magickoperator} should be used to add optional
% arguments before (\emph{Settings}) or after (\emph{Operators}) the input
% file. They can either be set for all or a specific output format as like
% option \opt{convertdpi}. For this \cs{svgx@setformatkey} is used.
%    \begin{macrocode}
%<*base>
\svg@dummy@key{magickexe}
\svg@dummy@key{magicksetting}
\svg@dummy@key{magickoperator}
%</base>
%<*extract>
\newcommand*\svgx@magick@exe{}
\DefineFamilyKey{SVG}{magickexe}{%
  \renewcommand*\svgx@magick@exe{#1}%
  \FamilyKeyStateProcessed%
}
\newcommand*\svgx@magick@set{}
\DefineFamilyKey{SVG}{magicksetting}{%
  \svgx@setformatkey{#1}{svgx@magick@set}%
  \FamilyKeyStateProcessed%
}
\newcommand*\svgx@magick@opr{}
\DefineFamilyKey{SVG}{magickoperator}{%
  \svgx@setformatkey{#1}{svgx@magick@opr}%
  \FamilyKeyStateProcessed%
}
%</extract>
%    \end{macrocode}
% \end{macro}^^A \svgx@magick@opr
% \end{option}^^A magickoperator
% \end{macro}^^A \svgx@magick@set
% \end{option}^^A magicksetting
% \end{macro}^^A \svgx@magick@exe
% \end{option}^^A magickexe
% \begin{option}{gsexe}
% \changes{v2.00}{2017/02/24}{new}
% \begin{macro}{\svgx@gs@exe}
% \begin{option}{gsopt}
% \changes{v2.00}{2017/02/24}{new}
% \begin{macro}{\svgx@gs@opt}
% \begin{option}{gsdevice}
% \changes{v2.00}{2017/02/24}{new}
% \begin{macro}{\svgx@gs@device}
% Options to set the command including maybe the path to \app{Ghostscript}. As 
% \app{Ghostscript} needs a specific device defined for different output
% formats, the option \opt{gsdevice} can be used. It can either be set for all 
% or a specific output format just like \opt{gsopt} in the same manner like 
% option \opt{convertdpi}. 
%    \begin{macrocode}
%<*base>
\svg@dummy@key{gsexe}
\svg@dummy@key{gsopt}
\svg@dummy@key{gsdevice}
%</base>
%<*extract>
\newcommand*\svgx@gs@exe{}
\DefineFamilyKey{SVG}{gsexe}{%
  \renewcommand*\svgx@gs@exe{#1}%
  \FamilyKeyStateProcessed%
}
\newcommand*\svgx@gs@opt{}
\DefineFamilyKey{SVG}{gsopt}{%
  \svgx@setformatkey{#1}{svgx@gs@opt}%
  \FamilyKeyStateProcessed%
}
\newcommand*\svgx@gs@device{}
\DefineFamilyKey{SVG}{gsdevice}{%
  \svgx@setformatkey{#1}{svgx@gs@device}%
  \FamilyKeyStateProcessed%
}
%</extract>
%    \end{macrocode}
% \end{macro}^^A \svgx@gs@device
% \end{option}^^A gsdevice
% \end{macro}^^A \svgx@gs@opt
% \end{option}^^A gsopt
% \end{macro}^^A \svgx@gs@exe
% \end{option}^^A gsexe
%
% \subsubsection{Setting output folder}
%
% \begin{option}{extractpath}
% \changes{v2.00}{2017/02/24}{new}
% \begin{option}{path}
% \changes{v2.00}{2017/02/24}{deprecated}
% \begin{option}{extractname}
% \changes{v2.00}{2017/02/24}{new}
% \begin{option}{name}
% \changes{v2.00}{2017/02/24}{deprecated}
% \changes{v2.00}{2017/02/24}{support of \pkg{subfig} removed}
% \begin{macro}{\svgx@out@path}
% \begin{macro}{\svgx@out@name}
% \begin{macro}{\svgx@out@base}
% The option \opt{extractpath} controls, in which folder the results both of 
% the extraction as well as the conversion of \app{ImageMagick} or 
% \app{Ghostscript} will be located. With option \opt{extractname} the 
% name of the extracted and maybe converted file itself can be changed.
%    \begin{macrocode}
%<*base>
\svg@dummy@key{extractpath}
\svg@dummy@key{path}
\svg@dummy@key{extractname}
\svg@dummy@key{name}
%</base>
%<*extract>
\newcommand*\svgx@out@path{}
\newcommand*\svgx@out@name{\svg@out@name-extract}
\newcommand*\svgx@out@base{\svgx@out@path\svgx@out@name}
\DefineFamilyKey{SVG}{extractpath}{%
  \FamilySetNumerical{SVG}{extractpath}{svg@tempa}{%
    {svgpath}{0},{svgdir}{0},%
    {svgsubpath}{1},{svgsubdir}{1},%
    {basepath}{2},{basedir}{2},{jobpath}{2},{jobdir}{2},%
    {basesubpath}{3},{basesubdir}{3},{jobsubpath}{3},{jobsubdir}{3}%
  }{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \ifcase\svg@tempa\relax% svgpath
      \renewcommand*\svgx@out@path{\svg@file@path}%
    \or% svgsubpath
      \renewcommand*\svgx@out@path{\svg@file@path svg-extract/}%
    \or% basepath
      \renewcommand*\svgx@out@path{./}%
    \or% basesubpath
      \renewcommand*\svgx@out@path{./svg-extract/}%
    \fi%
  \else%
    \renewcommand*\svgx@out@path{#1}%
    \svg@normalize@path{\svgx@out@path}%
    \FamilyKeyStateProcessed%
  \fi%
}
\DefineFamilyKey{SVG}{path}{%
  \svg@deprecated@key[svg-extract]{path=#1}{extractpath=#1}%
}
\DefineFamilyKey{SVG}{extractname}{%
  \renewcommand*\svgx@out@name{#1\svg@file@ext-extract}%
  \FamilyKeyStateProcessed%
}
\DefineFamilyKey{SVG}{name}{%
  \svg@deprecated@key[svg-extract]{name=#1}{extractname=#1}%
}
%</extract>
%    \end{macrocode}
% \end{macro}^^A \svgx@out@base
% \end{macro}^^A \svgx@out@name
% \end{macro}^^A \svgx@out@path
% \end{option}^^A name
% \end{option}^^A extractname
% \end{option}^^A path
% \end{option}^^A extractpath
%
% \subsubsection{Options for the extraction of graphics}
%
% \begin{option}{extractwidth}
% \changes{v2.00}{2017/02/20}{new}
% \begin{macro}{\svgx@param@width}
% \begin{option}{extractheight}
% \changes{v2.00}{2017/02/20}{new}
% \begin{macro}{\svgx@param@width}
% \begin{option}{extractscale}
% \changes{v2.00}{2017/02/20}{new}
% \begin{macro}{\svgx@param@scale}
% For graphic extraction, the given settings regarding the size for inclusion 
% can be overwritten with these options. Using \val{\cs{relax}} as value leads 
% to reseting an option as unset, regardless of what was previously given. The
% value \val{inherit} means, that the actual option for including is used for
% extraction as well. This is the default setting.
%    \begin{macrocode}
%<*base>
\svg@dummy@key{extractwidth}
\svg@dummy@key{extractheight}
\svg@dummy@key{extractscale}
%</base>
%<*extract>
\newcommand*\svgx@param@width{\svg@param@width}
\DefineFamilyKey{SVG}{extractwidth}{%
  \FamilyKeyStateUnknownValue%
  \svg@ifvalueisrelax{#1}{%
    \renewcommand*\svgx@param@width{\z@}%
    \FamilyKeyStateProcessed%
  }{%
    \ifstr{#1}{inherit}{%
      \renewcommand*\svgx@param@width{\svg@param@width}%
      \FamilyKeyStateProcessed%
    }{%
      \FamilySetLengthMacro{SVG}{extractwidth}{\svgx@param@width}{#1}%
      \ifdim\svgx@param@width<\z@\relax%
        \FamilyKeyStateUnknownValue%
      \fi%
    }%
  }%
}
\newcommand*\svgx@param@height{\svg@param@height}
\DefineFamilyKey{SVG}{extractheight}{%
  \FamilyKeyStateUnknownValue%
  \svg@ifvalueisrelax{#1}{%
    \renewcommand*\svgx@param@height{\z@}%
    \FamilyKeyStateProcessed%
  }{%
    \ifstr{#1}{inherit}{%
      \renewcommand*\svgx@param@height{\svg@param@height}%
      \FamilyKeyStateProcessed%
    }{%
      \FamilySetLengthMacro{SVG}{extractheight}{\svgx@param@height}{#1}%
      \ifdim\svgx@param@height<\z@\relax%
        \FamilyKeyStateUnknownValue%
      \fi%
    }%
  }%
}
\newcommand*\svgx@param@scale{\svg@param@scale}
\DefineFamilyKey{SVG}{extractscale}{%
  \FamilyKeyStateUnknownValue%
  \svg@ifvalueisrelax{#1}{%
    \renewcommand*\svgx@param@scale{1}%
    \FamilyKeyStateProcessed%
  }{%
    \ifstr{#1}{inherit}{%
      \renewcommand*\svgx@param@scale{\svg@param@scale}%
      \FamilyKeyStateProcessed%
    }{%
      \ifisdimension{#1\p@}{%
        \ifdim\dimexpr#1\p@\relax>\z@\relax%
          \renewcommand*\svgx@param@scale{#1}%
          \FamilyKeyStateProcessed%
        \fi%
      }{}%
    }%
  }%
}
%</extract>
%    \end{macrocode}
% \end{macro}^^A \svgx@param@scale
% \end{option}^^A extractscale
% \end{macro}^^A \svgx@param@height
% \end{option}^^A extractheight
% \end{macro}^^A \svgx@param@width
% \end{option}^^A extractwidth
% \begin{option}{extractpretex}
% \changes{v2.00}{2017/02/20}{new}
% \begin{macro}{\svgx@param@pretex}
% \begin{option}{extractapptex}
% \changes{v2.00}{2017/02/20}{new}
% \begin{macro}{\svgx@param@apptex}
% \begin{option}{extractpostex}
% The similar hooks for executing code right before or after the graphic 
% extraction.
%    \begin{macrocode}
%<*base>
\svg@dummy@key{extractpretex}
\svg@dummy@key{extractapptex}
\svg@dummy@key{extractpostex}
%</base>
%<*extract>
\newcommand*\svgx@param@pretex{\svg@param@pretex}
\DefineFamilyKey{SVG}{extractpretex}{%
  \svg@ifvalueisrelax{#1}{%
    \let\svgx@param@pretex\relax%
  }{%
    \ifstr{#1}{inherit}{%
      \def\svgx@param@pretex{\svg@param@pretex}%
    }{%
      \def\svgx@param@pretex{#1}%
    }%
  }%
  \FamilyKeyStateProcessed%
}
\newcommand*\svgx@param@apptex{\svg@param@apptex}
\DefineFamilyKey{SVG}{extractapptex}{%
  \svg@ifvalueisrelax{#1}{%
    \let\svgx@param@apptex\relax%
  }{%
    \ifstr{#1}{inherit}{%
      \def\svgx@param@apptex{\svg@param@apptex}%
    }{%
      \def\svgx@param@apptex{#1}%
    }%
  }%
  \FamilyKeyStateProcessed%
}
\DefineFamilyKey{SVG}{extractpostex}{%
  \svg@deprecated@key[svg-extract]{extractpostex=#1}{extractapptex=#1}%
}
%</extract>
%    \end{macrocode}
% \end{option}^^A extractpostex
% \end{macro}^^A \svgx@param@apptex
% \end{option}^^A extractapptex
% \end{macro}^^A \svgx@param@pretex
% \end{option}^^A extractpretex
%
% \subsubsection{Miscellaneous options}
%
% \begin{option}{clean}
% \changes{v2.00}{2017/02/24}{changes, file list possible}
% \begin{option}{clear}
% \begin{macro}{\svgx@clean}
% With option \opt{clean} files generated during the extraction process can be 
% deleted. Setting \val{true} will remove all files, \val{false} won't clear 
% any file. Additionally, a specific file list of suffixes can be given.
%    \begin{macrocode}
%<*base>
\svg@dummy@key[true]{clean}
\svg@dummy@key[true]{clear}
%</base>
%<*extract>
\newcommand*\svgx@clean{}
\DefineFamilyKey{SVG}{clean}[true]{%
  \FamilySetBool{SVG}{clean}{@svg@tempswa}{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \if@svg@tempswa%
      \renewcommand*\svgx@clean{log,aux,dvi,ps,eps,pdf,\svgx@latex@ext}%
    \else%
      \renewcommand*\svgx@clean{}%
    \fi%
  \else%
    \renewcommand*\svgx@clean{#1}%
    \FamilyKeyStateProcessed%
  \fi%
}
\DefineFamilyKey{SVG}{clear}{\FamilyOptions{SVG}{clean=#1}}
%</extract>
%    \end{macrocode}
% \end{macro}^^A \svgx@clean
% \end{option}^^A clear
% \end{option}^^A clean
% \begin{option}{exclude}
% If it is desired not to include but only extract graphics with package 
% \pkg{svg-extract}, option \opt{exclude} can be used.
%    \begin{macrocode}
%<*base>
\svg@dummy@key[true]{exclude}
%</base>
%<*extract>
\DefineFamilyKey{SVG}{exclude}[true]{%
  \FamilySetBool{SVG}{exclude}{@svg@tempswa}{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \if@svg@tempswa%
      \renewcommand*\svg@input[2][]{%
        \if@svgx@run\else%
          \PackageWarning{svg-extract}{%
            The image was neither extracted nor included%
          }%
        \fi%
      }%
    \else%
      \renewcommand*\svg@input{\svg@@input}%
    \fi%
  \fi%
}
%</extract>
%    \end{macrocode}
% \end{option}^^A exclude
%
% \iffalse
%</package&option>
%<*package&body>
% \fi
%
% \subsection{User commands}
%
% \begin{macro}{\svghidepreamblestart}
% \changes{v2.00}{2017/02/24}{new}
% \begin{macro}{\svghidepreambleend}
% \changes{v2.00}{2017/02/24}{new}
% Some dummys for package \pkg{svg}.
%    \begin{macrocode}
%<*base>
\newcommand*\svghidepreamblestart{%
  \PackageWarning{svg}{%
    The macro `\string\svghidepreamblestart' is only meant\MessageBreak%
    to be used together with package `svg-extract'.\MessageBreak%
    Nevertheless, nothing will happen%
  }%
}
\newcommand*\svghidepreambleend{%
  \PackageWarning{svg}{%
    The macro `\string\svghidepreambleend' is only meant\MessageBreak%
    to be used together with package `svg-extract'.\MessageBreak%
    Nevertheless, nothing will happen%
  }%
}
%</base>
%    \end{macrocode}
% These two macros can be used to hide some parts of the preamble during 
% reading the preamble of the main document.
%    \begin{macrocode}
%<*extract>
\let\svghidepreamblestart\relax
\let\svghidepreambleend\relax
%</extract>
%    \end{macrocode}
% \end{macro}^^A \svghidepreambleend
% \end{macro}^^A \svghidepreamblestart
%
% \subsection{Auxiliary macros}
%
% \begin{macro}{\svg@extract}
% \begin{macro}{\svgx@stream@in}
% \begin{macro}{\svgx@read@line}
% \begin{macro}{\svgx@stream@out}
% \begin{macro}{\if@svgx@preamble@write}
% The macro \cs{svg@extract} does the actual job of both extracting and 
% converting independent graphic files. Since it is necessary to run it with 
% \val{--shell-escape} enabled, the command raises a warning if it is not 
% activated. Afterwards, the package is finished.
%    \begin{macrocode}
%<*base>
\newcommand*\svg@extract[1]{}
%</base>
%<*extract>
\ifnum\pdf@shellescape=\@ne\relax\else%
  \renewcommand*\svg@extract[1]{%
    \if@svgx@run%
      \begingroup%
        \edef\svg@tempa{#1}%
        \svg@quotes@remove{\svg@tempa}%
        \PackageWarning{svg-extract}{%
          You didn't enable `shell escape' (or `write18')\MessageBreak%
          so it wasn't possible to run the extraction for\MessageBreak%
          file `\svg@tempa'%
        }%
      \endgroup%
    \fi%
  }%
  \expandafter\endinput%
\fi
%    \end{macrocode}
% If \val{--shell-escape} is enabled, the command is defined with its intended
% functionality. Some macros and a input stream as well as a output stream are 
% necessary for this.
%    \begin{macrocode}
\newread\svgx@stream@in
\newcommand*\svgx@read@line{}
\newwrite\svgx@stream@out
\newif\if@svgx@preamble@write
\renewcommand*\svg@extract[1]{%
  \if@svgx@run%
%    \end{macrocode}
% If \opt{extract} is enabled, an separate auxiliary \LaTeX~file is created 
% for extracting independent graphic files. The specified preamble is read for 
% this task, if it exists. Notice that the catcodes for \val{\#} need to be
% changed to prevent doublification when reading the line.
%    \begin{macrocode}
    \begingroup%
      \endlinechar=\m@ne%
      \IfFileExists{\svgx@preamble}{%
        \catcode`\#=12\relax%
        \immediate\openout\svgx@stream@out=\svgx@out@name.\svgx@latex@ext%
        \immediate\openin\svgx@stream@in=\svgx@preamble%
        \@svg@tempswatrue%
        \@svgx@preamble@writetrue%
        \def\svgx@read@line{}%
%    \end{macrocode}
% The given preamble file is read line by line and written to the separate 
% auxiliary \LaTeX~file \cs{svgx@out@name}\file{.}\cs{svgx@latex@ext} via the
% output stream.
%    \begin{macrocode}
        \@whilesw\if@svg@tempswa\fi{%
          \immediate\read\svgx@stream@in to\svgx@read@line%
          \ifx\svgx@read@line\@empty%
            \ifeof\svgx@stream@in\@svg@tempswafalse\fi%
          \else%
%    \end{macrocode}
% With \cs{svghidepreamblestart} and \cs{svghidepreambleend} it is possible for 
% the user to omit certain parts of the preamble. Therefor the two macros
% \cs{svgx@read@preamble@till} and \cs{svgx@read@preamble@from} are toggling
% the switch \cs{if@svgx@preamble@write}
%    \begin{macrocode}
            \svgx@read@preamble@till{\svghidepreamblestart}{}%
            \svgx@read@preamble@from{\svghidepreambleend}{}%
%    \end{macrocode}
% If the desired end of the preamble (\cs{svgx@endpreamble}) was found, the 
% readout is terminated by switching \cs{if@svg@tempswa} to \val{false}.
%    \begin{macrocode}
            \svgx@read@preamble@till{\svgx@endpreamble}{\@svg@tempswafalse}%
            \if@svgx@preamble@write%
%    \end{macrocode}
% During the readout process, it is searched with \cs{svgx@documentclass} for 
% the appearance of \cs{documentclass} and \cs{if@svgx@classfound} is set to 
% \val{true} if it was found.
%    \begin{macrocode}
              \if@svgx@classfound\else%
                \expandafter\svgx@documentclass%
                  \svgx@read@line\documentclass\documentclass\@nil%
              \fi%
%    \end{macrocode}
% Writing out the---maybe manipulated---read in line.
%    \begin{macrocode}
              \ifx\svgx@read@line\@empty\else%
                \immediate\write\svgx@stream@out{%
                  \unexpanded\expandafter{\svgx@read@line}%
                }%
              \fi%
            \fi%
          \fi%
        }%
        \immediate\closein\svgx@stream@in%
        \immediate\closeout\svgx@stream@out%
        \catcode`\#=6\relax%
%    \end{macrocode}
% Once the separate auxiliary \LaTeX~file is written, it is read in again and 
% its content is stored in \cs{svg@tempa}, since it is necessary to prepend
% some stuff to the preamble, for example a maybe not existent document class.
%    \begin{macrocode}
        \immediate\openin\svgx@stream@in=\svgx@out@name.\svgx@latex@ext%
        \def\svg@tempa{}%
        \loop\unless\ifeof\svgx@stream@in%
          \readline\svgx@stream@in to\svgx@read@line%
          \ifx\svgx@read@line\@empty\else%
            \edef\svg@tempa{%
              \unexpanded\expandafter{\svg@tempa}%
              \unexpanded\expandafter{\svgx@read@line}^^J%
            }%
          \fi%
        \repeat%
        \immediate\closein\svgx@stream@in%
      }{%
%    \end{macrocode}
% If a file was given that doesn't exist, a warning is issued.
%    \begin{macrocode}
        \svg@quotes@remove{\svgx@preamble}%
        \ifx\svgx@preamble\@empty\else%
          \PackageWarning{svg-extract}{%
            The preamble file `\svgx@preamble'\MessageBreak%
            does not exist%
          }%
        \fi%
        \def\svg@tempa{}%
      }%
%    \end{macrocode}
% After the preamble was read in and stored in \cs{svg@tempa}, the separate 
% auxiliary \LaTeX~file is written again.
%    \begin{macrocode}
      \immediate\openout\svgx@stream@out=\svgx@out@name.\svgx@latex@ext%
%    \end{macrocode}
% With the intention of passing the correct paper dimensions when creating a
% DVI~file, \cs{AtBeginDocument} is executed even before the document class for 
% calculating the paper size so that this is definitely the first thing to
% happen at the beginning of the document. This ensures that any \cs{special} 
% command is definitely used with the correct paper size.
%    \begin{macrocode}
      \immediate\write\svgx@stream@out{%
        \string\AtBeginDocument{\string\svgxsetpapersize}\@percentchar^^J%
      }%
%    \end{macrocode}
% If no document class was found during reading the preamble file, then class 
% \cs{article} is used.
%    \begin{macrocode}
      \if@svgx@classfound\else%
        \immediate\write\svgx@stream@out{\string\documentclass{article}}%
      \fi%
%    \end{macrocode}
% And now the stored preamble.
%    \begin{macrocode}
      \ifx\svg@tempa\@empty\else%
        \immediate\write\svgx@stream@out{\unexpanded\expandafter{\svg@tempa}}%
      \fi%
%    \end{macrocode}
% After the given preamble was written, package \pkg{svg-extract} will be 
% loaded in case it was forgotten.
%    \begin{macrocode}
      \immediate\write\svgx@stream@out{\string\usepackage{svg-extract}}%
%    \end{macrocode}
% Now all parameters relevant for the export are evaluated and appended.
%    \begin{macrocode}
      \def\svg@tempa##1{%
        \immediate\write\svgx@stream@out{\string\svgsetup{##1}}%
      }%
      \if@svg@ink@latex\else%
        \svg@tempa{inkscapelatex=false}%
      \fi%
      \ifdim\svgx@param@width>\z@\relax%
        \svg@tempa{width=\svgx@param@width}%
      \fi%
      \ifdim\svgx@param@height>\z@\relax%
        \svg@tempa{height=\svgx@param@height}%
      \fi%
      \ifdim\dimexpr\svgx@param@scale\p@\relax=\p@\relax\else%
        \svg@tempa{scale=\svgx@param@scale}%
      \fi%
      \def\svg@tempb{\svg@param@pretex}%
      \ifx\svgx@param@pretex\svg@tempb\relax%
        \let\svgx@param@pretex\svg@param@pretex%
      \fi%
      \ifx\svgx@param@pretex\relax\else%
        \svg@tempa{pretex=\unexpanded\expandafter{\svgx@param@pretex}}%
      \fi%
      \def\svg@tempb{\svg@param@apptex}%
      \ifx\svgx@param@apptex\svg@tempb\relax%
        \let\svgx@param@apptex\svg@param@apptex%
      \fi%
      \ifx\svgx@param@apptex\relax\else%
        \svg@tempa{apptex=\unexpanded\expandafter{\svgx@param@apptex}}%
      \fi%
%    \end{macrocode}
% Parameter \prm{lastpage} is only considered for including \file{pdf} files.
%    \begin{macrocode}
      \ifstr{\svg@ink@format}{pdf}{%
        \ifnum\value{svg@param@lastpage}>\z@\relax%
          \edef\svg@tempa{lastpage=\the\value{svg@param@lastpage}}%
        \else%
          \ifnum\value{svg@param@lastpage}=\z@\relax%
            \def\svg@tempa{lastpage=true}%
          \else%
            \def\svg@tempa{lastpage=false}%
          \fi%
        \fi%
        \immediate\write\svgx@stream@out{\string\svgxsetbox[\svg@tempa]{#1}}%
      }{%
        \immediate\write\svgx@stream@out{\string\svgxsetbox{#1}}%
      }%
%    \end{macrocode}
% If package \pkg{xr} exists, it is used to evaluate possible existing labels 
% within the included \LaTeX~file created by \app{Inkscape}
%    \begin{macrocode}
      \if@svg@ink@latex%
        \IfFileExists{xr.sty}{%
          \immediate\write\svgx@stream@out{^^J%
            \string\usepackage{xr}^^J%
            \string\externaldocument{\jobname}%
          }%
        }{}%
      \fi%
      \immediate\write\svgx@stream@out{^^J%
%    \end{macrocode}
% As we are now at the end of the preamble and júst before the beginning of the 
% document, the paper dimension are set again to make sure, that these settings 
% are active at the end of the preamble. Additionally it is executed again at 
% the very end of \cs{AtBeginDocument} to ensure, that no other package used 
% this hook for manipulating the paper size.
%    \begin{macrocode}
        \string\svgxsetpapersize^^J%
        \string\AtBeginDocument{\string\svgxsetpapersize}^^J^^J%
        \string\begin{document}^^J%
        \string\pagestyle{empty}^^J%
        \string\svgxoutputbox\@percentchar^^J%
        \string\end{document}%
      }%
      \immediate\closeout\svgx@stream@out%
    \endgroup%
%    \end{macrocode}
% After creating the separate auxiliary \LaTeX~file, the actual export and 
% convert processes can be done.
%    \begin{macrocode}
    \ifstr{\svgx@format\svgx@cnv@format}{}{%
      \PackageWarning{svg-extract}{%
        Both keys `extractformat' and `convertformat' are\MessageBreak%
        empty, so nothing to do so far%
      }%
    }{%
%    \end{macrocode}
% First of all the separate auxiliary \LaTeX~file is compiled with the detected 
% \LaTeX~processor (\cs{svgx@latex@exe}) as often as defined by counter option 
% \opt{extractruns}.
%    \begin{macrocode}
      \svg@quotes@remove{\svgx@out@path}%
      \svg@quotes@remove{\svgx@out@name}%
      \PackageInfo{svg-extract}{%
        Running LaTeX for graphic extraction%
        \ifx\svgx@latex@opt\@empty\else%
          \space with added options `\svgx@latex@opt'%
        \fi%
      }%
      \loop\ifnum\value{svgx@runs}>\z@\relax%
        \ShellEscape{%
          \svgx@latex@exe\space\svgx@latex@opt\space%
          "\svgx@out@name.\svgx@latex@ext"%
        }%
        \advance\c@svgx@runs\m@ne%
      \repeat%
%    \end{macrocode}
% All files requested with option \opt{extractformat} are created with internal 
% conversion tools supplied by most \LaTeXe~distributions if necessarry.
%    \begin{macrocode}
      \def\svg@tempa##1##2##3{%
        \edef\svg@tempb{%
          \@nameuse{svgx@##1@exe}\space\@nameuse{svgx@##1@opt}\space%
          "\svgx@out@name.##2"%
        }%
        \PackageInfo{svg-extract}{Running ##1}%
        \ShellEscape{\svg@tempb}%
      }%
      \@svg@tempswafalse%
      \ifxetex\else\ifpdf\else%
        \@svg@tempswatrue%
      \fi\fi%
      \if@svg@tempswa%
        \svg@tempa{dvips}{dvi}{ps}%
        \svgx@ifinlist{eps}{\svgx@format}{\svg@tempa{pstoeps}{ps}{eps}}{}%
        \svgx@ifinlist{pdf}{\svgx@format}{\svg@tempa{pstopdf}{ps}{pdf}}{}%
      \else%
        \svgx@ifinlist{ps}{\svgx@format}{\svg@tempa{pdftops}{pdf}{ps}}{}%
        \svgx@ifinlist{eps}{\svgx@format}{\svg@tempa{pdftoeps}{pdf}{eps}}{}%
      \fi%
%    \end{macrocode}
% Now the desired conversion tool is invoked if requested.
%    \begin{macrocode}
      \if@svgx@cnv@run%
%    \end{macrocode}
% If no density was given at all, the density for \file{png}~files is set to 
% \val{300dpi} by default.
%    \begin{macrocode}
        \ifx\svgx@cnv@dpi\relax%
          \ifx\svgx@cnv@dpi@png\@undefined%
            \def\svgx@cnv@dpi@png{300}%
          \fi%
        \fi%
%    \end{macrocode}
% The first given file type with option \opt{extractformat} is used as source 
% for the conversion process.
%    \begin{macrocode}
        \expandafter\svgx@cnv@get@informat\expandafter{\svgx@format}%
%    \end{macrocode}
% The conversion is done for each desired file type given in a list by option 
% \opt{convertformat}.
%    \begin{macrocode}
        \@for\svg@tempa:=\svgx@cnv@format\do{%
          \ifx\svg@tempa\@empty\else%
            \expandafter\svgx@ifinlist\expandafter{\svg@tempa}{\svgx@format}{%
              \PackageWarning{svg-extract}{%
                File type `\svg@tempa' was specified for option\MessageBreak% 
                `extractformat' (\svgx@format) as well as for \MessageBreak
                option `convertformat' (\svgx@cnv@format) so the\MessageBreak%
                conversion won't be done%
              }%
            }{%
              \PackageInfo{svg-extract}{%
                Converting `\svgx@out@name.\svgx@cnv@informat'\MessageBreak%
                to `\svgx@out@name.\svg@tempa'%
              }%
              \ShellEscape{%
                \svgx@cnv@cmd{\svgx@out@name}{\svgx@cnv@informat}{\svg@tempa}%
              }%
            }%
          \fi%
        }%
      \fi%
%    \end{macrocode}
% As both extraction and conversion are done, all files are moved to the 
% desired output folder (\opt{extractpath}).
%    \begin{macrocode}
      \svg@shell@mkdir{\svgx@out@path}%
      \edef\svg@tempb{\svgx@format,\svgx@cnv@format}%
      \@for\svg@tempa:=\svg@tempb\do{%
        \ifx\svg@tempa\@empty\else%
          \svgx@checkandmove{\svgx@out@name}{\svg@tempa}{\svgx@out@base}%
        \fi%
      }%
%    \end{macrocode}
% At the very end, all unwanted auxiliary files are deleted.
%    \begin{macrocode}
      \@for\svg@tempa:=\svgx@clean\do{%
        \expandafter\svgx@ifinlist\expandafter{\svg@tempa}{\svg@tempb}{}{%
          \IfFileExists{"\svgx@out@name".\svg@tempa}{%
            \svg@shell@rm{\svgx@out@name.\svg@tempa}%
          }{}%
        }%
      }%
    }%
  \fi%
}
%</extract>
%    \end{macrocode}
% \end{macro}^^A \if@svgx@preamble@write
% \end{macro}^^A \svgx@stream@out
% \end{macro}^^A \svgx@read@line
% \end{macro}^^A \svgx@stream@in
% \end{macro}^^A \svg@extract
%
% \iffalse
%</package&body>
%<*package&extract&body>
% \fi
%
% \begin{macro}{\svgx@documentclass}
% \begin{macro}{\if@svgx@classfound}
% This delimited macro is used to find a occurrence of \cs{documentclass} 
% within a read in line. The delinmiter \cs{documentclass} is used twice in
% order to ignore the possible occurrence of white space or anything else right
% before \cs{documentclass}.
%    \begin{macrocode}
\newif\if@svgx@classfound
\newcommand*\svgx@documentclass{}
\def\svgx@documentclass#1\documentclass#2\documentclass#3\@nil{%
  \IfArgIsEmpty{#2}{}{\@svgx@classfoundtrue}%
}
%    \end{macrocode}
% \end{macro}^^A \if@svgx@classfound
% \end{macro}^^A \svgx@documentclass
% \begin{macro}{\svgx@read@preamble@till}
% \begin{macro}{\svgx@read@preamble@from}
% \begin{macro}{\svgx@read@preamble@skip}
% These macros are used to skip some parts of a read in preamble file.
%    \begin{macrocode}
\newcommand*\svgx@read@preamble@till[2]{%
  \svgx@read@preamble@skip#1\@nil{till}{#2}%
}
\newcommand*\svgx@read@preamble@from[2]{%
  \svgx@read@preamble@skip#1\@nil{from}{#2}%
}
%    \end{macrocode}
% In principle, the functionality is the same as for \cs{svgx@documentclass}.
%    \begin{macrocode}
\newcommand*\svgx@read@preamble@skip{}
\def\svgx@read@preamble@skip#1\@nil#2#3{%
%    \end{macrocode}
% A given token is used to create the macro \cs{svg@tempa} delimited by the 
% token itself which is used twice to get any stuff right before or after the
% occurrence.
%    \begin{macrocode}
  \def\svg@tempa##1{%
    \def\svg@tempa####1##1####2##1####3\@nil{%
      \IfArgIsEmpty{####3}{}{%
%    \end{macrocode}
% Write everything which was found right before the macro which starts hiding 
% area to the output stream and stop writing with \cs{if@svgx@preamble@write}.
%    \begin{macrocode}
        \ifstr{#2}{till}{%
          \IfArgIsEmpty{####1}{}{%
            \immediate\write\svgx@stream@out{####1}%
          }%
          \@svgx@preamble@writefalse%
        }{%
%    \end{macrocode}
% Write everything which was found right after the macro which ends the hiding 
% area and start writing again with \cs{if@svgx@preamble@write}.
%    \begin{macrocode}
          \ifstr{#2}{from}{%
            \IfArgIsEmpty{####2}{%
              \def\svgx@read@line{}%
            }{%
              \def\svgx@read@line{####2}%
            }%
            \@svgx@preamble@writetrue%
          }{}%
        }%
%    \end{macrocode}
% Additonal stuff which should be done.
%    \begin{macrocode}
        #3%
      }%
    }%
  }%
%    \end{macrocode}
% Creating the macro \cs{svg@tempa} delimited by the first argument.
%    \begin{macrocode}
  \edef\svg@tempb{\expandafter\detokenize\expandafter{#1}}%
  \expandafter\svg@tempa\expandafter{\svg@tempb}%
%    \end{macrocode}
% Calling the created macro.
%    \begin{macrocode}
  \edef\svg@tempb{%
    \expandafter\detokenize\expandafter{\svgx@read@line}\svg@tempb\svg@tempb%
  }%
  \expandafter\svg@tempa\svg@tempb\@nil%
}
%    \end{macrocode}
% \end{macro}^^A \svgx@read@preamble@skip
% \end{macro}^^A \svgx@read@preamble@from
% \end{macro}^^A \svgx@read@preamble@till
% \begin{macro}{\svgx@cnv@informat}
% \begin{macro}{\svgx@cnv@get@informat}
% Macro \cs{svgx@cnv@get@informat} extracts the first list entry out of the 
% first argument (\cs{svgx@format}).
%    \begin{macrocode}
\newcommand*\svgx@cnv@informat{}
\newcommand*\svgx@cnv@get@informat[1]{%
  \begingroup%
    \def\svg@tempa##1,##2\@nil{%
      \def\svg@tempa{##1}%
    }%
    \svg@tempa#1,\@nil%
    \edef\svg@tempa{%
      \noexpand\endgroup%
      \noexpand\def\noexpand\svgx@cnv@informat{\svg@tempa}%
    }%
  \svg@tempa%
%    \end{macrocode}
% If the first argument (\cs{svgx@format}) was empty, \cs{svgx@cnv@informat} is 
% set to the a file type, which is generated anyway.
%    \begin{macrocode}
  \ifx\svgx@cnv@informat\@empty%
    \renewcommand*\svgx@cnv@informat{pdf}%
    \ifxetex\else\ifpdf\else%
      \renewcommand*\svgx@cnv@informat{ps}%
    \fi\fi%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \svgx@cnv@get@informat
% \end{macro}^^A \svgx@cnv@informat
% \begin{macro}{\svgx@magick@cmd}
% \begin{macro}{\svgx@gs@cmd}
% Depending on option \opt{convert}, one of these two macros is actually used
% by \cs{svgx@cnv@cmd}. For invoking the conversion process, the required 
% platform-dependent executable is set, if nothing was set by a package option.
%    \begin{macrocode}
\ifx\svgx@magick@exe\@empty
  \ifwindows
    \renewcommand*\svgx@magick@exe{magick}
  \else
    \renewcommand*\svgx@magick@exe{convert}
  \fi
\fi
\newcommand*\svgx@magick@cmd[3]{%
  \svgx@magick@exe\space%
  \svgx@useformatkey{svgx@cnv@dpi}{#3}{-density }%
  \svgx@useformatkey{svgx@magick@set}{#3}{}%
  "#1.#2"\space%
  \svgx@useformatkey{svgx@magick@opr}{#3}{}%
  "#1.#3"%
}
%    \end{macrocode}
%    \begin{macrocode}
\ifx\svgx@gs@exe\@empty
  \ifwindows
    \renewcommand*\svgx@gs@exe{gswin64c}
  \else
    \renewcommand*\svgx@gs@exe{gs}
  \fi
\fi
\newcommand*\svgx@gs@cmd[3]{%
  \svgx@gs@exe\space-dSAFER -dBATCH -dNOPAUSE\space%
  \svgx@useformatkey{svgx@gs@device}{#3}{-sDEVICE=}%
  \svgx@useformatkey{svgx@cnv@dpi}{#3}{-r}%
  \svgx@useformatkey{svgx@gs@opt}{#3}{}%
  -sOutputFile="#1.#3"\space"#1.#2"%
}
%    \end{macrocode}
% \end{macro}^^A \svgx@gs@cmd
% \end{macro}^^A \svgx@magick@cmd
% \begin{macro}{\svgx@checkandmove}
% If the file doesn't exist
%    \begin{macrocode}
\newcommand*\svgx@checkandmove[3]{%
  \begingroup%
    \IfFileExists{"#1".#2}{%
      \svg@shell@move{#1.#2}{#3.#2}%
    }{%
      \edef\svg@tempa{#2}%
      \@svg@tempswafalse%
      \expandafter\svgx@ifinlist\expandafter{\svg@tempa}{\svgx@cnv@format}{%
        \@svg@tempswatrue%
        \def\svg@tempb{conversion}%
      }{%
        \expandafter\svgx@ifinlist\expandafter{\svg@tempa}{pdf,ps,eps}{%
          \@svg@tempswatrue%
          \def\svg@tempb{extraction}%
        }{}%
      }%
      \if@svg@tempswa%
        \edef\svg@tempb{%
          The graphic file \svg@tempb\space failed\MessageBreak%
          for `#1.#2'\MessageBreak%
          Troubleshooting: Please check the log file how the\MessageBreak%
          invocation of the extraction took place and try\MessageBreak%
          to execute it yourself in the terminal%
        }%
      \else%
        \def\svg@tempb{%
          The extraction to format `#2' failed\MessageBreak%
          for `#1.#2'\MessageBreak%
          Only file types `pdf,ps,eps' are supported for\MessageBreak%
          key `exportformat'%
        }%
      \fi%
      \PackageWarning{svg-extract}{\svg@tempb}%
    }%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \svgx@checkandmove
%
% \iffalse
%</package&extract&body>
%<*package&extract&option>
% \fi
%
% \begin{macro}{\svgx@ifinlist}
% Check, if the first argument is included in a comma-separated list in the 
% second argument. Keep in mind that the first argument is not expanded at all, 
% the second one exactly once. 
%    \begin{macrocode}
\newcommand*\svgx@ifinlist[2]{%
  \begingroup%
    \def\svg@tempa##1,#1,##2\@nil{%
      \IfArgIsEmpty{##2}{%
        \aftergroup\@secondoftwo%
      }{%
        \aftergroup\@firstoftwo%
      }%
    }%
    \expandafter\svg@tempa\expandafter,#2,#1,\@nil%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \svgx@ifinlist
% \begin{macro}{\svgx@onlywindows}
% Do only some stuff, if Windows was detected.
%    \begin{macrocode}
\newcommand*\svgx@onlywindows[1]{}
\AfterPackage*{ifplatform}{\renewcommand*\svgx@onlywindows[1]{\ifwindows#1\fi}}
%    \end{macrocode}
% \end{macro}^^A \svgx@onlywindows
% \begin{macro}{\svgx@ifkeyandval}
% It is checked whether a key was given as \val{\meta{key}=\meta{value}} or 
% like \val{\meta{key}=\{\meta{format}=\meta{value}\}}.
%    \begin{macrocode}
\newcommand*\svgx@ifkeyandval[3]{%
  \def\svg@tempa##1=##2=##3\@nil{\ifstr{##3}{=}{#2}{#3}}%
  \svg@tempa#1==\@nil%
}
%    \end{macrocode}
% \end{macro}^^A \svgx@ifkeyandval
% \begin{macro}{\svgx@cnv@get@dpi}
% This macro is used to resolve a given value to set the density for the 
% conversion. The delimited macros \cs{svg@tempa} and \cs{svg@tempb} are 
% defined to first crop any given suffix \val{dpi} and second to split two 
% numbers at \val{x}, if present. Pay attention how both macros are invoked. 
% In the end, a passed value in any of the forms \val{300}, \val{300dpi}, 
% \val{300x400} or \val{300x400dpi} and even \val{300dpix400dpi} is possible.
% The result is stored in \cs{svg@tempa}.
%    \begin{macrocode}
\newcommand*\svgx@cnv@get@dpi[1]{%
  \begingroup%
    \def\svg@tempa##1dpi##2x##3dpi##4\@nil{%
      \edef\svg@tempa{##1}%
%    \end{macrocode}
% Switch \cs{if@svg@tempswa} as \cs{iftrue} means, a valid value was found.
%    \begin{macrocode}
      \@svg@tempswafalse%
%    \end{macrocode}
% If only the first argument is a number and third is empty, a single number 
% was given and there's nothing more to do. If the argument is something like 
% \val{300dpix400dpi}, the third argument is the second number.
%    \begin{macrocode}
      \ifnumber{##1}{%
        \IfArgIsEmpty{##3}{\@svg@tempswatrue}{%
          \ifnumber{##3}{\edef\svg@tempa{##1x##3}}{}%
        }%
      }{}%
      \if@svg@tempswa\else%
        \expandafter\svg@tempb\svg@tempa xx\@nil%
      \fi%
    }%
%    \end{macrocode}
% Macro \cs{svg@tempb} splits at \val{x} and checks, if something valid like 
% \val{300x400} was given. If true, the value is stored in \cs{svg@tempa}.
%    \begin{macrocode}
    \def\svg@tempb##1x##2x##3\@nil{%
      \ifstr{##3}{x}{%
        \@svg@tempswatrue%
        \IfArgIsEmpty{##1}{\@svg@tempswafalse}{%
          \ifnumber{##1}{}{\@svg@tempswafalse}%
        }%
        \IfArgIsEmpty{##2}{\@svg@tempswafalse}{%
          \ifnumber{##2}{}{\@svg@tempswafalse}%
        }%
        \if@svg@tempswa%
          \edef\svg@tempa{##1x##2}%
        \fi%
      }{}%
    }%
    \IfArgIsEmpty{#1}{%
      \let\svg@tempa\@empty%
    }{%
      \lowercase{\svg@tempa#1dpi#1xdpi\@nil}%
      \if@svg@tempswa\else%
        \let\svg@tempa\relax%
      \fi%
    }%
    \edef\svg@tempb{%
      \noexpand\endgroup%
      \ifx\svg@tempa\relax%
        \noexpand\let\noexpand\svg@tempa\noexpand\relax%
      \else%
        \noexpand\def\noexpand\svg@tempa{\svg@tempa}%
      \fi%
    }%
  \svg@tempb%
}
%    \end{macrocode}
% \end{macro}^^A \svgx@cnv@get@dpi
% \begin{macro}{\svgx@setformatkey}
% \begin{macro}{\svgx@useformatkey}
% With \cs{svgx@setformatkey} the---maybe output format depend---keys for the 
% conversion tools are set. First argument contains the value given to a key, 
% second the command sequence name of the macro, to whom the value shall be 
% allocated.
%    \begin{macrocode}
\newcommand*\svgx@setformatkey[2]{%
%    \end{macrocode}
% A key of the form \val{\meta{key}=\{\meta{format}=\meta{value}\}} is given. 
% The desired output format can be accessed with \val{\#\#1}, the value with 
% \val{\#\#2} within the arguments of \cs{svgx@ifkeyandval}.
%    \begin{macrocode}
  \svgx@ifkeyandval{#1}{%
    \svg@ifvalueisrelax{##2}{%
      \expandafter\let\csname #2@##1\endcsname\relax%
    }{%
      \@namedef{#2@##1}{##2}%
    }%
%    \end{macrocode}
% A key of the form \val{\meta{key}=\{\meta{format}=\meta{value}\}} is given.
% The value itself can be used with \val{\#\#1}.
%    \begin{macrocode}
  }{%
    \svg@ifvalueisrelax{##1}{%
      \expandafter\let\csname #2\endcsname\relax%
    }{%
      \@namedef{#2}{##1}%
    }%
  }%
}
%    \end{macrocode}
% The command \cs{svgx@useformatkey} checks, if a format specific key was 
% definded with \cs{svgx@setformatkey}, whereas the format is given in the 
% second argument. If this is not the case, the setting for all output formats 
% is used. After that, a specific key appended with a \val{+} can be used to do 
% some additional stuff.
%    \begin{macrocode}
\newcommand*\svgx@useformatkey[3]{%
  \scr@ifundefinedorrelax{#1@#2}{%
    \scr@ifundefinedorrelax{#1}{}{%
      \expandafter\ifx\csname #1\endcsname\@empty\else%
        #3\@nameuse{#1}\space%
      \fi%
    }%
    \scr@ifundefinedorrelax{#1@#2+}{}{%
      \expandafter\ifx\csname #1@#2+\endcsname\@empty\else%
        #3\@nameuse{#1@#2+}\space%
      \fi%
    }%
  }{%
%    \end{macrocode}
% If this a format specific key was definded, it is used.
%    \begin{macrocode}
    \expandafter\ifx\csname #1@#2\endcsname\@empty\else%
      #3\@nameuse{#1@#2}\space%
    \fi%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \svgx@useformatkey
% \end{macro}^^A \svgx@setformatkey
%
% \subsection{Commands for the separate auxiliary \LaTeX-file}
%
% For the extraction of independent graphics, an auxiliary \LaTeX~file is 
% needed. Within this file, the following commands are used to include the 
% desired graphic.
%
% \begin{macro}{\svgxsetbox}
% \begin{macro}{\svgx@box}
% Within the preamble of the auxiliary \LaTeX~file, the desired grahic is used 
% to setup a box, which is used both to define the papersize as well as for the 
% output itself.
%    \begin{macrocode}
\newbox\svgx@box
\newcommand*\svgxsetbox[2][]{%
  \sbox\svgx@box{\svg@@input[{#1},draft=false]{#2}}%
}
%    \end{macrocode}
% \end{macro}^^A \svgx@box
% \end{macro}^^A \svgxsetbox
% \begin{macro}{\svgxsetpapersize}
% This macro sets all well known length macros for defining the paper size as 
% well as the type area to the size of \cs{svgx@box}.
%    \begin{macrocode}
\newcommand*\svgxsetpapersize{%
  \setlength\paperwidth{\the\wd\svgx@box}%
  \ifx\stockwidth\@undefined\else%
    \setlength\stockwidth{\paperwidth}%
  \fi%
  \ifx\mediawidth\@undefined\else%
    \setlength\mediawidth{\paperwidth}%
  \fi%
  \setlength\textwidth{\paperwidth}%
  \setlength\paperheight{\the\dimexpr\ht\svgx@box+\dp\svgx@box\relax}%
  \ifx\stockheight\@undefined\else%
    \setlength\stockheight{\paperheight}%
  \fi%
  \ifx\mediaheight\@undefined\else%
    \setlength\mediaheight{\paperheight}%
  \fi%
  \setlength\textheight{\paperheight}%
%    \end{macrocode}
% Any other length regarding the layout is set to have no influence at all. 
% Hence the document has the same size as the graphic.
%    \begin{macrocode}
  \hoffset=-1in%
  \oddsidemargin=\z@%
  \evensidemargin=\z@%
  \voffset=-1in%
  \topmargin=\z@%
  \headheight=\z@%
  \headsep=\z@%
  \topskip=\z@%
  \footskip=\z@%
  \marginparsep=\z@%
  \marginparwidth=\z@%
  \marginparpush=\z@%
}
\@onlypreamble\svgxsetpapersize
%    \end{macrocode}
% \end{macro}^^A \svgxsetpapersize
% \begin{macro}{\svgxoutputbox}
% \begin{macro}{\if@svgx@beamer}
% With \cs{svgxoutputbox} the created box is displayed.
%    \begin{macrocode}
\newif\if@svgx@beamer
\@ifclassloaded{beamer}{\@svgx@beamertrue}{}%
\newcommand*\svgxoutputbox{%
  \begingroup%
    \setlength\parindent{\z@}%
    \setlength\parskip{\z@}%
    \setlength\parfillskip{\z@}%
    \if@svgx@beamer%
      \setbeamertemplate{navigation symbols}{}%
      \begin{frame}[plain]%
      \usebox\svgx@box%
      \end{frame}%
    \else%
      \usebox\svgx@box%
    \fi%
    \endgraf%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \if@svgx@beamer
% \end{macro}^^A \svgxoutputbox
%
% \iffalse
%</package&extract&option>
%<*package&option>
% \fi
%
% \section{Processing Options}
%
% Setting the default options and processing the given ones during when loading 
% the packages.
%    \begin{macrocode}
%<*base>
\FamilyExecuteOptions{SVG}{%
  inkscape=true,inkscapepath=basesubdir,inkscapelatex=true,%
  inkscapearea=drawing,usexcolor=true,usetransparent=true%
}
%</base>
%<*extract>
\FamilyExecuteOptions{SVG}{%
  extract=true,extractpath=basesubdir,extractruns=2,convert=magick,%
  gsdevice={png=png16m},gsdevice={jpeg=jpeg},gsdevice={jpg=jpeg},%
  gsdevice={tif=tiff48nc},gsdevice={tiff=tiff48nc},%
  gsdevice={eps=eps2write},gsdevice={ps=ps2write}%
}
%</extract>
\FamilyProcessOptions{SVG}
%    \end{macrocode}
%
% \iffalse
%</package&option>
%<*package&base&body>
% \fi
%
% \section{Macros for file access}
%
% Finally, platform dependend macros for creating directories as well as moving 
% and deleting files are provided, if \val{--shell-escape} is enabled. Only then
% package \pkg{ifplatform} is only used in order to do not raise a warning.
%    \begin{macrocode}
\ifnum\pdf@shellescape=\@ne\relax\else%
  \expandafter\endinput%
\fi
\RequirePackage{ifplatform}
%    \end{macrocode}
% \begin{macro}{\svg@shell@mkdir}
% \begin{macro}{\svg@shell@@mkdir}
% \begin{macro}{\svg@shell@mv}
% \begin{macro}{\svg@shell@@mv}
% \begin{macro}{\svg@shell@rm}
% \begin{macro}{\svg@shell@@rm}
% The platform dependent commands for file access.
%    \begin{macrocode}
\ifwindows
  \newcommand*\svg@shell@@mkdir[1]{if not exist "#1" mkdir "#1"}
  \newcommand*\svg@shell@@mv{move}
  \newcommand*\svg@shell@@rm{del}
\else
  \newcommand*\svg@shell@@mkdir[1]{mkdir -p "#1"}
  \newcommand*\svg@shell@@mv{mv}
  \newcommand*\svg@shell@@rm{rm}
\fi
%    \end{macrocode}
% A directory should only be created, if it isn't the current working directory.
%    \begin{macrocode}
\newcommand*\svg@shell@mkdir[1]{%
  \begingroup%
    \edef\svg@tempa{#1}%
    \svg@quotes@remove{\svg@tempa}%
    \@svg@tempswatrue%
    \ifstr{\svg@tempa}{}{\@svg@tempswafalse}{%
    \ifstr{\svg@tempa}{./}{\@svg@tempswafalse}{%
    }}%
    \if@svg@tempswa%
      \ShellEscape{\svg@shell@@mkdir{\svg@tempa}}%
    \fi%
  \endgroup%
}
%    \end{macrocode}
% Commands for moving and deleting files.
%    \begin{macrocode}
\newcommand*\svg@shell@move[2]{%
  \ShellEscape{\svg@shell@@mv\space"#1"\space"#2"}%
}
\newcommand*\svg@shell@rm[1]{%
  \ShellEscape{\svg@shell@@rm\space"#1"}%
}
%    \end{macrocode}
% \end{macro}^^A \svg@shell@@rm
% \end{macro}^^A \svg@shell@rm
% \end{macro}^^A \svg@shell@@mv
% \end{macro}^^A \svg@shell@mv
% \end{macro}^^A \svg@shell@@mkdir
% \end{macro}^^A \svg@shell@mkdir
%
% \iffalse
%</package&base&body>
% \fi
%
% \Finale
%
\endinput
%
% \iffalse
%<*package&old>
% \fi
%
% \section{Old Implementation}
%   The package, which requires the packages \pkg{xkeyval} for the options,
%   \pkg{subfig} for automatic labeling within the subfigure command, the 
%   \pkg{import} package for correct handling of paths, \pkg{graphicx} for the
%   \file{pdf}~file inclusion commands, \pkg{transparent} for transparency, and 
%   \pkg{xcolor} for color, is initialized.
%    \begin{macrocode}
\ProvidesPackage{svg}[2012/09/05 v1.0 SVG inclusion and extraction]%
\@ifpackageloaded{xkeyval}{}{\RequirePackage{xkeyval}}%
\@ifpackageloaded{subfig}{}{\RequirePackage{subfig}}%
\@ifpackageloaded{import}{}{\RequirePackage{import}}%
\@ifpackageloaded{graphicx}{}{\RequirePackage{graphicx}}%
\@ifpackageloaded{transparent}{}{\RequirePackage{transparent}}%
\@ifpackageloaded{xcolor}{}{\RequirePackage{xcolor}}%
%    \end{macrocode}
%
% \subsection{Input definition}
%   All commands used for input (i.e. for the \file{svg}~file and preamble) are
%   defined within the \cs{SVG@in} prefix, and set by the key definition of the 
%   line following their definition. The \opt{exclude} boolean, used to stop the
%   inclusion of the \file{svg}~file within the document is also defined.
%    \begin{macrocode}
\def\SVG@in@preamble{\jobname.tex}%
\define@key[SVG]{svg.sty}{preamble}{\def\SVG@in@preamble{#1}}%
\def\SVG@in@path{./}%
\define@key[SVG]{svg.sty}{svgpath}{\def\SVG@in@path{#1}}%
\def\SVG@in@end{\begin{document}}%
\define@key[SVG]{svg.sty}{end}{\def\SVG@in@end{#1}}%
\define@boolkey[SVG]{svg.sty}[SVG@in@]{exclude}[true]{}%
%    \end{macrocode}
%
% \subsection{Length definition}
%   All commands used for output are defined within the \cs{SVG@out} prefix,
%   beginning with the dimensions of the extracted image. If no dimensions are
%   supplied both \cs{ifSVG@out@usewidth} and \cs{ifSVG@out@useheight} are 
%   \val{false}, and so the natural dimensions of the \file{svg}~file are used.
%   If both \cs{ifSVG@out@usewidth} and \cs{ifSVG@out@useheight} are 
%   \val{true}, the width is used.
%    \begin{macrocode}
\newlength\SVG@out@width%
\newif\ifSVG@out@usewidth%
\define@key[SVG]{svg.sty}{width}{%
  \setlength{\SVG@out@width}{#1}\SVG@out@usewidthtrue%
}%
\newlength\SVG@out@height%
\newif\ifSVG@out@useheight%
\define@key[SVG]{svg.sty}{height}{%
  \setlength{\SVG@out@height}{#1}\SVG@out@useheighttrue%
}%
%    \end{macrocode}
%
% \subsection{Extract booleans}
%   The booleans for the extraction formats are defined. Additionally,
%   the global export variable is defined, which is set to \val{true}
%   whenever any extraction is requested.
%    \begin{macrocode}
\define@boolkey[SVG]{svg.sty}[SVG@out@]{pdf}[true]{}%
\define@boolkey[SVG]{svg.sty}[SVG@out@]{eps}[true]{}%
\define@boolkey[SVG]{svg.sty}[SVG@out@]{png}[true]{}%
\newif\ifSVG@out@extract
%    \end{macrocode}
%
% \subsection{Output definitions}
%   The extraction path, extraction root name, clean boolean,
%   pre-\LaTeX~commands, and post-\LaTeX~commands are defined.
%    \begin{macrocode}
\def\SVG@out@path{./}%
\define@key[SVG]{svg.sty}{path}{\def\SVG@out@path{#1}}%
\def\SVG@out@name{Fig.\arabic{svgfigure}\alph{subfigure}}%
\define@key[SVG]{svg.sty}{name}{\def\SVG@out@name{#1}}%
\define@boolkey[SVG]{svg.sty}[SVG@out@]{clean}[true]{}%
\def\SVG@out@pretex{}%
\define@key[SVG]{svg.sty}{pretex}{\def\SVG@out@pretex{#1}}%
\def\SVG@out@postex{}%
\define@key[SVG]{svg.sty}{postex}{\def\SVG@out@postex{#1}}%
%    \end{macrocode}
%
% \subsection{Command definitions}
%   The command options are defined within the prefix \cs{SVG@cmd} and
%   are set by the key definition following each command definition.
%    \begin{macrocode}
\def\SVG@cmd@inkscape{inkscape -z -C}%
\define@key[SVG]{svg.sty}{inkscape}{\def\SVG@cmd@inkscape{#1}}%
\def\SVG@cmd@pdflatex{pdflatex}%
\define@key[SVG]{svg.sty}{pdflatex}{\def\SVG@cmd@pdflatex{#1}}%
\def\SVG@cmd@pdftops{pdftops -eps}%
\define@key[SVG]{svg.sty}{pdftops}{\def\SVG@cmd@pdftops{#1}}%
\def\SVG@cmd@convert{convert -density 300}%
\define@key[SVG]{svg.sty}{convert}{\def\SVG@cmd@convert{#1}}%
%    \end{macrocode}
%
% \subsection{Process options}
%   All the options for the package are processed, and a counter is defined, 
%   which is used to correctly handle the \cnt{subfigure} counting.
%    \begin{macrocode}
\ProcessOptionsX[SVG]%
\newcounter{svgfigure}[figure]%
%    \end{macrocode}
%
% \subsection{User interface}
%   Define the macro to globally set keys.
%    \begin{macrocode}
\def\setsvg#1{\setkeys[SVG]{svg.sty}{#1}}%
%    \end{macrocode}
%
%   Define the macro used to include an \file{svg}~file. Set the keys and
%   determine if extraction should occur.
%    \begin{macrocode}
\newread\SVG@in@file%
\newwrite\SVG@out@file%
\def\includesvg{\@ifnextchar[\@includesvg{\@includesvg[]}}%
\def\@includesvg[#1]#2{%
  \setkeys[SVG]{svg.sty}{#1}%
  \SVG@out@extractfalse%
  \ifSVG@out@pdf \SVG@out@extracttrue \fi%
  \ifSVG@out@eps \SVG@out@extracttrue \fi%
  \ifSVG@out@png \SVG@out@extracttrue \fi%
%    \end{macrocode}
% Run \app{Inkscape} to separate the \file{svg}~file into text and image. Only 
% run \app{Inkscape} if the \file{svg}~file is newer than the generated text 
% and image.
%    \begin{macrocode}
  \ifnum\pdfstrcmp
  {\pdffilemoddate{\SVG@in@path#2.svg}}%
  {\pdffilemoddate{\SVG@in@path#2.pdf}}>0%
    \immediate\write18{%
      \SVG@cmd@inkscape\space%
        -f \SVG@in@path#2.svg\space%
        -A \SVG@in@path#2.pdf\space%
        --export-latex%
    }%
  \fi%
%    \end{macrocode}
% Determine the image width and height using \cs{includegraphics}.
%    \begin{macrocode}
  \ifSVG@out@usewidth%
    \settoheight\SVG@out@height{%
      \includegraphics[width=\SVG@out@width]{\SVG@in@path#2}%
    }%
  \else%
    \ifSVG@out@useheight%
      \settowidth\SVG@out@width{%
        \includegraphics[height=\SVG@out@height]{\SVG@in@path#2}%
      }%
    \else%
      \settoheight\SVG@out@height{%
        \includegraphics{\SVG@in@path#2}%
      }%
      \settowidth\SVG@out@width{\includegraphics{\SVG@in@path#2}}%
    \fi%
  \fi%
%    \end{macrocode}
% Open the output file for extraction.
%    \begin{macrocode}
% Open the output file.
  \ifSVG@out@extract%
    \setcounter{svgfigure}{\value{figure}}%
    \stepcounter{svgfigure}%
    \def\SVG@out@filename{\SVG@out@name}%
    \immediate\openout\SVG@out@file=\SVG@out@path\SVG@out@filename.tex%
  \fi%
%    \end{macrocode}
% Open and write the preamble. Notice that the catcodes for \val{\#} need
% to be changed to prevent double expansion when reading the line.
%    \begin{macrocode}
  \ifSVG@out@extract%
    \def\SVG@in@line{}%
    \immediate\openin\SVG@in@file=\SVG@in@preamble%
  \fi%
  \newif\ifSVG@in@read%
  \ifSVG@out@extract \SVG@in@readtrue \fi%
  \@whilesw\ifSVG@in@read\fi{%
    \catcode`\#=12\relax\endlinechar=-1%
    \immediate\read\SVG@in@file to \SVG@in@line%
    \ifx\SVG@in@end\SVG@in@line%
      \SVG@in@readfalse%
    \else%
      \immediate\write\SVG@out@file{\unexpanded\expandafter{\SVG@in@line}}%
    \fi%
    \ifeof\SVG@in@file\SVG@in@readfalse\fi%
    \endlinechar=13\catcode`\#=6\relax%
  }%
  \ifSVG@out@extract \immediate\closein\SVG@in@file \fi%
%    \end{macrocode}
% Now write everything needed after the preamble. This includes
% requiring the \pkg{import} package and defining all the dimensions need
% to match the document size with the image size.
%    \begin{macrocode}
  \ifSVG@out@extract%
    \def\SVG@out@defpack{%
      \makeatletter%
      \@ifpackageloaded{import}{}{\RequirePackage{import}}%
      \@ifpackageloaded{graphicx}{}{\RequirePackage{graphicx}}%
      \@ifpackageloaded{transparent}{}{\RequirePackage{transparent}}%
      \@ifpackageloaded{xcolor}{}{\RequirePackage{xcolor}}%
      \makeatother%
    }%
    \def\SVG@out@defwidth{\def\svgwidth{0.99\textwidth}}%
    \def\SVG@out@definput{\import{\SVG@in@path}{#2.pdf_tex}}%
    \immediate\write\SVG@out@file{\unexpanded\expandafter{\SVG@out@defpack}}%
    \immediate\write\SVG@out@file{%
      \noexpand\setlength{\pdfpagewidth}{\the\SVG@out@width}%
    }%
    \immediate\write\SVG@out@file{%
      \noexpand\setlength{\pdfpageheight}{\the\SVG@out@height}%
    }%
    \immediate\write\SVG@out@file{%
      \noexpand\setlength{\paperheight}{\pdfpageheight}%
    }%
    \immediate\write\SVG@out@file{%
      \noexpand\setlength{\paperwidth}{\pdfpagewidth}%
    }%
    \immediate\write\SVG@out@file{%
      \noexpand\setlength{\textheight}{\paperheight}%
    }%
    \immediate\write\SVG@out@file{%
      \noexpand\setlength{\textwidth}{\paperwidth}%
    }%
    \immediate\write\SVG@out@file{%
      \noexpand\setlength{\textheight}{\paperheight}%
    }%
    \immediate\write\SVG@out@file{\noexpand\setlength{\oddsidemargin}{-1in}}%
    \immediate\write\SVG@out@file{\noexpand\setlength{\evensidemargin}{-1in}}%
    \immediate\write\SVG@out@file{\noexpand\setlength{\topmargin}{-1in}}%
    \immediate\write\SVG@out@file{\noexpand\setlength{\headheight}{0in}}%
    \immediate\write\SVG@out@file{\noexpand\setlength{\headsep}{0in}}%
    \immediate\write\SVG@out@file{\noexpand\setlength{\topskip}{0in}}%
    \immediate\write\SVG@out@file{\noexpand\setlength{\footskip}{0in}}%
    \immediate\write\SVG@out@file{\noexpand\setlength{\parindent}{0in}}%
    \immediate\write\SVG@out@file{\noexpand\setlength{\parsep}{0in}}%
    \immediate\write\SVG@out@file{\noexpand\setlength{\parskip}{0in}}%
    \immediate\write\SVG@out@file{%
      \noexpand\begin{document}%
      \noexpand\pagestyle{empty}%
      \noexpand\begin{center}%
        \unexpanded\expandafter{\SVG@out@defwidth}%
        \unexpanded\expandafter{\SVG@out@pretex}%
        \expandafter\noexpand\SVG@out@definput%
        \unexpanded\expandafter{\SVG@out@postex}%
        \noexpand\end{center}%
        \noexpand\end{document}%
      }%
    \immediate\closeout\SVG@out@file%
  \fi%
%    \end{macrocode}
% Run \LaTeX{} on the extracted file and create the \file{pdf}~file.
%    \begin{macrocode}
  \ifSVG@out@extract%
    \immediate\write18{%
      \SVG@cmd@pdflatex\space\SVG@out@path\SVG@out@filename.tex%
    }%
  \fi%
%    \end{macrocode}
% Convert the \file{pdf}~file to \file{eps}~file if requested.
%    \begin{macrocode}
  \ifSVG@out@eps%
    \immediate\write18{\SVG@cmd@pdftops\space\SVG@out@filename.pdf}%
    \immediate\write18{%
      mv \SVG@out@filename.eps\space\SVG@out@path\SVG@out@filename.eps%
    }%
  \fi%
%    \end{macrocode}
% Convert the \file{pdf}~file to \file{png}~file if requested.
%    \begin{macrocode}
  \ifSVG@out@png%
    \immediate\write18{%
      \SVG@cmd@convert\space%
        \SVG@out@filename.pdf\space\SVG@out@filename.png%
    }%
    \immediate\write18{%
      mv \SVG@out@filename.png\space\SVG@out@path\SVG@out@filename.png%
    }%
  \fi%
%    \end{macrocode}
% Clean up if requested.
%    \begin{macrocode}
  \ifSVG@out@extract%
    \ifSVG@out@pdf%
      \immediate\write18{%
        mv \SVG@out@filename.pdf\space\SVG@out@path\SVG@out@filename.pdf%
      }%
    \else%
      \ifSVG@out@clean \immediate\write18{rm \SVG@out@filename.pdf} \fi%
    \fi%
    \ifSVG@out@clean%
      \immediate\write18{%
        rm
          \SVG@out@path\SVG@out@filename.tex\space%
          \SVG@out@filename.aux\space%
          \SVG@out@filename.log\space%
          \SVG@out@filename.out%
      }%
    \fi%
  \fi%
%    \end{macrocode}
% Finally, include the \file{svg}~file in the current document and end the
% package.
%    \begin{macrocode}
  \ifSVG@in@exclude\else%
    {%
      \def\svgwidth{\the\SVG@out@width}%
      \SVG@out@pretex%
      \import{\SVG@in@path}{#2.pdf_tex}%
      \SVG@out@postex%
    }%
  \fi%
}%
%    \end{macrocode}
%
% \iffalse
%</package&old>
% \fi
%
% \Finale
%
\endinput
