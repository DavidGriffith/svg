% \CheckSum{0}
% \iffalse meta-comment
%
%  svg -- Include SVG pictures in pdfLaTeX documents using Inkscape
% ----------------------------------------------------------------------------
%
%  Copyright (C) Philip Ilten <philten@cern.ch>,  2012-2016
%  Copyright (C) Falk Hanisch <hanisch.latex@outlook.com>, 2016-2017
% 
% ----------------------------------------------------------------------------
%
%  This work may be distributed and/or modified under the conditions of the
%  LaTeX Project Public License, version 1.3c of the license. The latest
%  version of this license is in http://www.latex-project.org/lppl.txt and
%  version 1.3c or later is part of all distributions of LaTeX 2005/12/01
%  or later and of this work. This work has the LPPL maintenance status
%  "author-maintained". The current maintainer and author of this work
%  is Falk Hanisch.
%
% ----------------------------------------------------------------------------
%
%<*batchfile>
\ifx\documentclass\@undefined
\input docstrip.tex
\keepsilent

\begingroup
\catcode`\^^M=13 \catcode`\ =12 %
\gdef\svgpreamble{%
Copyright (C) Philip Ilten <philten@cern.ch>,  2012-2016
Copyright (C) Falk Hanisch <hanisch.latex@outlook.com>, 2016-2017

This file was generated from file svg.dtx.
----------------------------------------------------------------------------

This work may be distributed and/or modified under the conditions
of the LaTeX Project Public License, version 1.3c of the license.
The latest version of this license is in
    http://www.latex-project.org/lppl.txt
and version 1.3c or later is part of all distributions of
LaTeX 2005/12/01 or later and of this work.

This work has the LPPL maintenance status "author-maintained".

The current maintainer and author of this work is Falk Hanisch.

This work consists of the main source file svg.dtx%
%^^A%and the derived files
%^^A%    README
%^^A%    svg.dtx (with derived files svg.sty, svg.pdf, Fig.1a.pdf, Fig.1b.eps, 
%^^A%    Fig.2.pdf, Fig.2.png),
%^^A%    preamble.tex, example.svg (with derived files example.pdf and 
%^^A%    example.pdf_tex), 
%^^A%    root.C (with derived files root.svg, root.pdf, and root.pdf_tex). 
%^^A%
%^^A% The svg package by Philip Ilten.
%^^A%
%^^A% To extract package files and create documentation:
%^^A%
%^^A%      pdflatex -shell-escape svg.dtx
%^^A%
%^^A% Please note that Inkscape generates TeX files with comments, and
%^^A% since this document is generated using docstrip which interprets
%^^A% comments, special versions of example.pdf_tex and root.pdf_tex have
%^^A% been provided with the comments removed. This package will fail to
%^^A% compile when example.pdf/example.pdf_tex has an older modification
%^^A% date than example.svg and root.pdf/root.pdf_tex has an older
%^^A% modification date than root.svg as this package will generate new
%^^A% versions of example.pdf_tex and root.pdf_tex with comments.
%^^A%
%^^A% To finish the installation move the following file into a directory
%^^A% searched by LaTeX:
%^^A%
%^^A%      svg.sty
%^^A%
%^^A%
}
\endgroup

\declarepreamble\svgbasepreamble

svg -- Include SVG pictures in LaTeX documents using Inkscape

\svgpreamble

\endpreamble
\declarepreamble\svgextractpreamble

svg-extract -- Extract detached graphic files from SVG pictures

\svgpreamble

\endpreamble
\askforoverwritefalse
\usedir{tex/latex/svg}
\generate{%
  \usepreamble\svgbasepreamble
  \file{svg-new.sty}{%
    \from{svg.dtx}{package,option,base}%
    \from{svg.dtx}{package,body,base}%
  }
  \usepreamble\svgextractpreamble
  \file{svg-extract.sty}{%
    \from{svg.dtx}{package,option,extract}%
    \from{svg.dtx}{package,body,extract}%
  }
}
\else
\let\endbatchfile\relax
\fi
\endbatchfile
%</batchfile>
%
% \fi
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
% \iffalse
%<*driver>
\ifx\ProvidesFile\@undefined\def\ProvidesFile#1[#2]{}\fi
\ProvidesFile{svg.dtx}[%
%</driver>
%<package&option>\NeedsTeXFormat{LaTeX2e}
%<package&option&base>\ProvidesPackage{svg}[%
%<package&option&extract>\ProvidesPackage{svg-extract}[%
%<*driver|package&option>
  2017/00/00 v2.00\space%
%<package&option&base>  (include SVG pictures)%
%<package&option&extract>  (extract detached graphics from SVG pictures)%
]
%</driver|package&option>
%<*driver>
\documentclass[english,xindy]{tudscrdoc}
\usepackage{selinput}\SelectInputMappings{adieresis={ä},germandbls={ß}}
\usepackage[T1]{fontenc}
\usepackage{babel}
\KOMAoptions{parskip=half-}

\usepackage{svg}
%\newcommand*\includesvg[2][]{}

\usepackage{relsize}
\usepackage{listings}
%\usepackage{subfig}

\usepackage{bookmark}
\usepackage[babel]{microtype}

\CodelineIndex
\RecordChanges
\GetFileInfo{svg.dtx}
\title{The packages \pkg{svg} and \pkg{svg-extract}}
\author{%
  Philip Ilten (2012--2016) \\
  Falk Hanisch (2016--2017) \\
  \url{https://github.com/mrpiggi/svg} \\
  \mailto{hanisch.latex@outlook.com}
}
\date{\fileversion\nobreakspace(\filedate)}

\begin{document}
  \maketitle
  \ToDo{replace 2017/00/00 with release date}[Release]
  \ToDo{create \file{svg.sty} instead of \file{svg-new.sty}}[Release]
  \ToDo{update derived files in batch preamble}[Release]
  \tableofcontents
  \DocInput{\filename}
\end{document}
%</driver>
% \fi
%
% \changes{v1.0}{2004/11/05}{Initial version by Philip Ilten}
% \changes{v2.00}{2016/09/23}{New maintainer: Falk Hanisch}
%
% \lstnewenvironment{example}{%
% \lstset{basicstyle=\footnotesize\ttfamily,columns=flexible,frame=single,%
% backgroundcolor=\color{yellow!20},xleftmargin=\fboxsep,%
% xrightmargin=\fboxsep,gobble=1}}{}
%
% \newcommand{\svg}{{\scshape svg}\xspace}
% \newcommand{\pdf}{{\scshape pdf}\xspace}
% \newcommand{\eps}{{\scshape eps}\xspace}
% \newcommand{\png}{{\scshape png}\xspace}
% \newcommand{\latex}{\LaTeX\xspace}
% \newcommand{\croot}{{\scshape Root}\xspace}
% \newcommand{\pdflatex}{{\scshape PdfLatex}\xspace}
% \newcommand{\inkscape}{{\scshape Inkscape}\xspace}
% \newcommand{\pdftops}{{\scshape PdfToPs}\xspace}
% \newcommand{\convert}{{\scshape Convert}\xspace}
%
% \section{Introduction}\label{sec:intro}
%
% \ToDo{REVISE!}
% \ToDo{hint for inkscape on terminal (inkscape -V)}[Release]
% 
% The open source program \inkscape has provided an excellent resource
% for the simple and easy creation of images and diagrams using a
% graphical user interface. The work by Johan B. C. Engelen has
% further enhanced the ability of \inkscape to split an \svg into a
% text component that can be imported into \latex, and an image
% component that can be imported as a \pdf. For further information see the
% |svg-inkscape| documentation on
% \hrfn{http://www.ctan.org/tex-archive/info/svg-inkscape}{CTAN}.
% Consequently it is now possible to include an \svg into a \latex
% document where the text within the \svg has been rendered natively
% by \latex.
%
% The purpose of this package is twofold. First, the syntax of the
% command |\includegraphics| from the |graphicx| package has been
% extended to an |\includesvg| command, which allows the specification
% of the \svg width and height using keys in an optional first
% argument. Second, this package allows for the extraction of the
% \svg, as rendered within the \latex document, to an independent
% image file. This is particularly useful when attempting to provide
% images to journals or collaborators, and one wishes the image to
% appear exactly as it does within the original \latex document.
%
% There is actually a third purpose to this package, which will almost
% certainly be relevant to experimental particle physicists only, who
% frequently use the analysis package \croot. Further details on how to
% obtain beautiful \croot plots using this package are given in Section
% \ref{sec:root}.
%
% This documentation is broken into five parts: an explanation of the
% usage is given in Section \ref{sec:svg}, an example is given in
% Section \ref{sec:example}, further details with use in \croot is
% given in Section \ref{sec:root}, and finally, the full
% implementation is given in Section \ref{sec:implementation} which
% hopefully should not need to be read.
%
% There is one further point which is important to mention. This
% package relies heavily upon executing commands from the shell using
% the |\write18| command, and so it is necessary for the flag
% |-shell-escape| to be included when compiling documents using this
% package. Additionally, this package requires a working installation
% of \inkscape and \pdflatex in order for an \svg to be included or
% extracted to a \pdf. In order to extract to \eps and \png formats,
% the programs \pdftops and \convert (part of ImageMagick) must be
% installed respectively. Finally, this package will not work on
% Windows, but should run on any *nix platform as long as the paths to
% the appropriate programs are correctly defined.
%
% \section{Usage}\label{sec:usage}
%
% \ToDo{REPLACE!}
%
% \DescribeMacro{\includesvg} The command to include an \svg is
% similar to the |\includegraphics| command provided by the |graphicx|
% package. However, now the command
% \begin{example}
%   \includesvg[<options>]{<svg filename>}
% \end{example}
% is used where |<svg filename>| is the filename of the \svg without
% the path or the |.svg| postfix.
%
% \DescribeMacro{\setsvg} The |<options>|, described in detail below,
% can be specified globally for the package
% \begin{example}
%   \usepackage[<options>]{svg}
% \end{example}
% and reset locally when supplied to the |\includesvg| macro. The
% options can also be reset globally using the macro |\setsvg|
% \begin{example}
%   \setsvg{<options>}
% \end{example}
% where |<options>| is a comma separated list of options.
%
% \DescribeOption{width}
% \DescribeOption{height}
% \DescribeOption{svgpath}
% The width of the \svg can be
% specified via the |width| option and the height by the |height|
% option. If both the width and height are specified, the width will
% be used and the height will be rescaled to match the aspect ratio of
% the \svg. The path to the \svg can be specified using the |svgpath|
% option, where the path must terminate in a |/|. The default
% |svgpath| is set to the current directory, |./|.
%
% \DescribeOption{pdf}
% \DescribeOption{eps}
% \DescribeOption{png}
% The included \svg can be extracted
% from the document into a \pdf, \eps, or \png independent of the
% document. The |pdf| flag enables \pdf extraction, while the |eps|
% and |png| flags enable \eps and \png extraction respectively. For
% example,
% \begin{example}
%   \includesvg[pdf,eps,<additional options>]{<svg filename>}
% \end{example}
% will extract the \svg to both \pdf and \eps formats By default, all
% of these flags are set to false and no extraction of the \svg is
% performed. The extraction will render the \svg to the specified
% output(s) of choice using the same size as specified within the
% |\includesvg| command. Consequently, the scale between the image and
% text in the extracted output(s) will remain identical to the scale
% within the document from which the \svg was extracted.
%
% \DescribeOption{name}
% \DescribeOption{path}
% The root name of the extracted
% output can be specified with the |name| option. For example,
% \begin{example}
%   \includesvg[name=foo,eps,png,<additional options>]{<svg filename>}
% \end{example}
% will extract the \svg to the files |foo.eps| and |foo.png| in the
% current directory. By default, |name| is set to
% |Fig.\arabic{svgfigure}\alph{subfigure}| and so any \svg included
% within a |figure| or |subfigure| environment will automatically be
% labeled; i.e. if an \svg is included in the first figure and second
% subfigure of the document, and \pdf extraction was requested, the
% \svg will be extracted to the file |Fig.1b.pdf|. A path for the
% extracted files can also be specified with the |path| option, which
% must terminate with a |/|. The default |path| is set to the current
% directory, |./|.
%
% \DescribeOption{clean}
% \DescribeOption{exclude}
% Because a large number of files is
% generated for each \svg extraction, it is oftentimes desirable to
% automatically remove the temporary files. Using the option |clean|
% will remove any generated files created other than the extracted
% output(s) requested. The |clean| option is by default set as |false|
% to enable debugging. Additionally, sometimes it may be necessary to
% export an \svg without including it in the current document. If the
% flag |exclude| is specified, the \svg will not be rendered in the
% current document, but will be extracted to the requested output(s).
%
% \DescribeOption{pretex}
% \DescribeOption{postex}
% Commands prior and post to the
% inclusion of the \svg may be desired, such as font or color
% commands. For example, to change the text size of the include \svg
% text one could use
% \begin{example}
%   {\tiny \includsvg[<options>]{<svg filename>}}
% \end{example}
% where now the text will be rendered in the font size specified by
% |\tiny|. In this example, however, the |\tiny| command would not be
% included in the extracted output and so the options |pretex| and
% |postex| are provided where the \latex provided to |pretex| is
% included before the \svg, and |postex| after the \svg. Consequently,
% the example above can be rewritten as
% \begin{example}
%   \includsvg[pretex=\tiny,<additional options>]{<svg filename>}
% \end{example}
% where now the changed font size will be propagated to the extracted
% output.
%
% \DescribeOption{preamble}
% \DescribeOption{end}
% Specialized \latex macros can be used
% in the \svg which can then be defined in the preamble of the \latex
% document in which the \svg is to be included. Additionally,
% specialized packages such as |\relsize| may be needed by the \latex
% code extracted from the \svg. Consequently, the preamble of the
% current \latex document is used for the extraction of the \svg by
% default. It is possible, however, to specify a different preamble
% with the option |preamble| where the file to use as the preamble
% (including path and postfix) is given as the argument. The default
% definition of |preamble| is |\jobname.tex|, and should suffice for
% most cases. The preamble up to the line defined by the option
% |end| will be used, which is set to a default of
% |\begin{document}|. Notice that an exact match must be made, and so
% if any comments or text are on the same line after the
% |\begin{document}|, the preamble will not be correctly extracted.
%
% \DescribeOption{inkscape}
% \DescribeOption{pdflatex}
% \DescribeOption{pdftops}
% \DescribeOption{convert}
% A variety of
% commands are executed directly to the system, via |\write18| using
% this package and consequently, it may be necessary to change the
% binary paths and options for each individual command. For the
% inclusion of an \svg, \inkscape is used to separate the text and
% image from the \svg and can be set using the |inkscape| option. By
% default the |inkscape| option is set to |inkscape -z -C| which
% performs a non-gui export of \svg page (notice that the |-C| option
% indicates page and not drawing). For the extraction of a \pdf,
% the \latex program is used which is set by the |pdflatex| option and
% set to |pdflatex| by default. The extraction of an \eps is performed
% by converting a \pdf to an \eps using \pdftops. This command is set
% with the |pdftops| option and is set by default to
% |pdftops -eps|. Finally, conversion to \png is accomplished via the
% \convert program which is set with the |convert| option and by
% default set to |convert -density 300| where |-density|
% controls the resolution of the extracted \png in dots per inch.
%
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% 
% \section{Usage of package \pkg{svg}}\label{sec:svg}
%
% \ToDo{List/name all loaded packages, hint for graphicx with options}
%
% \DescribeOption{usexcolor}
% \DescribeOption{noxcolor}
% \DescribeOption{usetransparent}
% \DescribeOption{notransparent}
%
% \DescribeMacro{\svgsetup}
%
% \DescribeMacro{\svgpath}
% \ToDo{%
% With \cs{svgpath} the user can give several root paths to \file{svg}~files in 
% the same way as \cs{graphicspath} is used.}
%
% \DescribeOption{inkscape}
% \ToDo{onlynewer not with xelatex}
% \DescribeOption{inkscapeformat}
% \DescribeOption{inkscapearea}
% \DescribeOption{inkscapelatex}
% \DescribeOption{inkscapedpi}
% \DescribeOption{inkscapeexe}
% \DescribeOption{inkscapeopt}
% \DescribeOption{width}
% \DescribeOption{height}
% \DescribeOption{scale}
% \DescribeOption{pretex}
% \DescribeOption{apptex}
% \DescribeOption{outpath}
%
% \DescribeMacro{\includesvg}
% \ToDo{onlynewer not with xelatex}
% \begin{DescribeParameterParent}{Macro}{\includesvg}
% \DescribeParameter{inkscape}
% \DescribeParameter{inkscapeformat}
% \DescribeParameter{inkscapearea}
% \DescribeParameter{inkscapelatex}
% \DescribeParameter{inkscapedpi}
% \DescribeParameter{inkscapeexe}
% \DescribeParameter{inkscapeopt}
% \DescribeParameter{width}
% \DescribeParameter{height}
% \DescribeParameter{scale}
% \DescribeParameter{pretex}
% \DescribeParameter{apptex}
% \DescribeParameter{outpath}
% \DescribeParameter{lastpage}
% \DescribeParameter{angle}
% \ToDo{angle after widht, height and scale}
% \DescribeParameter{origin}
% \end{DescribeParameterParent}
%
%
%
%
%
%
% \section{Usage of package \pkg{svg-extract}}\label{sec:svg-extract}
%
% In contrast to package \pkg{svg}, the console commands for graphic extraction 
% are executed with each LaTeX run by package \pkg{svg-extract} when 
% shell-escape mode is activated.
% \ToDo{\dots}
%
% \DescribeOption{extractwidth}
% \DescribeOption{extractheight}
% \DescribeOption{extractscale}
%
% \DescribeOption{extractpretex}
% \DescribeOption{extractapptex}
%
% \DescribeOption{exclude}
% \DescribeOption{clean}
%
%
% \section{Example}\label{sec:example}
%
% \ToDo{REVISE!}
% \ToDo{remove \cs{href}?}
% As an example\footnote{The image used here is a slightly modified
% version of the image used in the initial documentation on how to
% include an \svg in \latex by J. Engelen available on
% \href{http://www.ctan.org/tex-archive/info/svg-inkscape}{CTAN}.}
% take the following lines of code
% \begin{example}
%   \begin{figure}
%     \subfloat[This text is too large!]{%
%       \includesvg[clean,preamble=preamble.tex,pdf,width=5cm]{example}%
%     }%
%     \subfloat[This text fits better.]{%
%       \includesvg[%
%         clean,preamble=preamble.tex,eps,pretex=\relscale{0.5},width=5cm%
%       ]{example}%
%     }%
%     \caption{An example figure.\label{fig:example}}
%   \end{figure}
% \end{example}
% where the \svg |example.svg| within this directory has been included
% twice using the |\svginclude| command. The output is shown in Figure
% \ref{fig:example}.
%
% \begin{figure}
%   \begin{center}
%     \subfloat[This text is too large!]{%
%       \includesvg[%
%         name=Fig.1a,clean,preamble=examples/preamble.tex,pdf,width=5cm%
%       ]{examples/example}%
%     }%
%     \subfloat[This text fits better.]{%
%       \includesvg[%
%         name=Fig.1b,clean,preamble=examples/preamble.tex,%
%         eps,pretex=\relscale{0.5},width=5cm%
%       ]{examples/example}%
%     }%
%     \caption{An example figure.\label{fig:example}}
%   \end{center}
% \end{figure}
%
% The first subfigure is created with the export option |pdf| with the
% default |name|, and so the file |Fig.1a.pdf| is extracted. However,
% the text is overrunning the margins of the image, and so the second
% subfigure decreases the relative size of the text within the image
% using the |pretex| option. Now, an \eps is requested for
% extraction, and so the file |Fig.1b.eps| is created.
%
% Notice that for both subfigures, the |preamble| was set to
% |preamble.tex|, also included in this current directory, rather than
% the default current document. Additionally, the flag |clean| has
% been used which forces the cleanup of any extraneous generated
% files.
%
% \section{ROOT}\label{sec:root}
%
% \ToDo{REVISE!}
% \croot has the ability to export directly to an \svg, which means
% that it is possible to completely by-pass all of \croot's internal
% text rendering machinery, and let \latex handle the text
% natively. This means that all of the ugly fonts that are rendered by
% \croot can now be completely avoided, with the additional bonus of
% being able to add references within plots. So how does one go about
% using this package with \croot?
% \ToDo{remove \cs{href}?}
% \begin{enumerate}
% \item Create the plot with \croot as normal, but turn off all \latex
%   interpretation of text strings. This is a bit tricky, but can be
%   accomplished by setting the font in \croot to a precision of zero
%   as described in the documentation for
%   \href{http://root.cern.ch/root/html/TAttText.html}{\ttfamily
%   TAttFill}. Remember that the font is set using the function
%   |(TAttFill*)->SetTextFont(i)| where |i| is the (font type) $\times
%   ~10 ~+$ (font precision). In the following lines of code, a
%   |TStyle| is defined which sets the font to type ``Courier New''
%   with a precision of zero.
%   \begin{example}
%     TStyle *style = new TStyle("style","style"); int FONT = 80;
%     style->SetTextFont(FONT);
%     style->SetLabelFont(FONT,"XYZ");
%     style->SetTitleFont(FONT,"XYZ");
%     style->SetTitleFont(FONT,"");
%     gROOT->SetStyle("style");
%     gROOT->ForceStyle();
%   \end{example}
%   Now, just use the standard \latex syntax for creating labels,
%   etc. Note however, that the backslash must be escaped due to
%   interpretation of special characters by C++.
% \item Print the plot as an \svg.
%   \begin{example}
%     gPad->Print("foo.svg");
%   \end{example}
% \item Include the \svg within the document using this package.
%   \begin{example}
%     \usepackage[clean,pdf]{svg}
%     ...
%     \includesvg[width=\columnwidth]{foo}
%   \end{example}
% \end{enumerate}
%
% \begin{figure}
%   \begin{center}
%     \includesvg[%
%       clean,preamble=examples/preamble.tex,pdf,png,height=6cm,pretex=\tiny%
%     ]{examples/root}
%   \end{center}
%   \caption{%
%     Rendering of a \croot plot (no more ``Comic CERNs'').\label{fig:root}%
%   }
% \end{figure}
%
% Consider the example image produced by \croot in Figure
% \ref{fig:root}. This figure was generated by the \croot macro
% |root.C|, provided within this directory, which produces the \svg
% |root.svg| when run. The code used to produce this \svg from within
% \croot is
% \lstinputlisting[basicstyle=\footnotesize\ttfamily,columns=flexible,
% frame=single,backgroundcolor=\color{yellow!20},xleftmargin=\fboxsep,
% xrightmargin=\fboxsep,gobble=1]{examples/root.C} where the text produced
% within the \croot plot is set to a precision of zero. The plot was
% then included within this document using the \latex code
% \begin{example}
%   \begin{figure}
%     \begin{center}
%       \includesvg[clean,preamble=preamble.tex,pdf,png,height=6cm,pretex=\tiny]
%       {root}
%     \end{center}
%     \caption{Rendering of a \croot plot (no more ``Comic
%     CERNs'').\label{fig:root}}
%   \end{figure}
% \end{example}
% which produces the extracted images |Fig.2.pdf| and
% |Fig.2.png|. Enjoy plots from \croot with natively rendered \latex!
%
% \StopEventually{\PrintIndex\PrintChanges\PrintToDos}
%
% \iffalse
%<*package&option>
% \fi
%
% \section{Implementation}\label{sec:implementation}
% \subsection{Initialization}
%
% The package \pkg{svg} requires \pkg{scrbase} for options processing, the
% packages \pkg{ifluatex}, \pkg{ifpdf} and \pkg{ifxetex} for detecting the 
% used \LaTeX{} engine, \pkg{pdftexcmds} for pdf\TeX{} primitives when using
% Lua\TeX, \pkg{shellesc} for engine independent access to systems commands as 
% well as \pkg{graphicx} for the inclusion of \file{pdf}~files. The usage of 
% packages \pkg{xcolor} and \pkg{transparent} can be switched of with the 
% corresponding options. The package \pkg{svg-extract} only needs package
% \pkg{svg} itself.
%    \begin{macrocode}
%<*base>
\RequirePackage{scrbase}[2016/06/14]
\RequirePackage{ifluatex}[2016/05/16]
\RequirePackage{ifpdf}[2016/05/14]
\RequirePackage{ifxetex}[2010/09/12]
\RequirePackage{pdftexcmds}[2016/05/21]
\RequirePackage{shellesc}[2016/06/07]
\RequirePackage{graphicx}[1999/02/16]
%</base>
%<*extract>
\RequirePackage{svg-new}[2017/00/00]
%</extract>
%    \end{macrocode}
% With the interface provided by package \pkg{scrbase} all package options and 
% the optional parameters for \cs{includesvg}\oarg{parameters}\marg{svgfile} 
% are defined.
%    \begin{macrocode}
\DefineFamily{SVG}
\DefineFamilyMember{SVG}
\DefineFamilyMember[.param]{SVG}
%    \end{macrocode}
%
% \iffalse
%<*base>
% \fi
%
% \begin{macro}{\svgsetup}
% \changes{v2.00}{2017/02/17}{new}
% \begin{macro}{\setsvg}
% The macro \cs{svgsetup} can be used to change options after loading the 
% package \pkg{svg} both in preamble and the document body. For compatibility 
% reasons, \cs{setsvg} is also defined.
%    \begin{macrocode}
\newcommand*\svgsetup{\FamilyOptions{SVG}}
\newcommand*\setsvg{\FamilyOptions{SVG}}
%    \end{macrocode}
% \end{macro}^^A \setsvg
% \end{macro}^^A \svgsetup
% \begin{macro}{\svg@local@param@set}
% \begin{macro}{\svg@local@param@use}
% \begin{macro}{\svg@local@param@def}
% Most of the package options can also be used as optional parameters for 
% \cs{includesvg}. Some of them are overloaded for the usage as optional 
% argument and there are some keys, which \emph{only} can be used as optional
% parameters. This is realized in such a way that \cs{svg@local@param@use} is 
% extended with \cs{svg@local@param@def} by the definition of local keys during
% the loading of package \pkg{svg}.
%    \begin{macrocode}
\newcommand*\svg@local@param@set[1]{%
  \svg@local@param@use%
  \FamilyOptions{SVG}{#1}%
%    \end{macrocode}
% As \cs{svg@local@param@set} is always used in a local group, it is possible 
% to set \opt{inkscapelatex} to \val{false}, if the output format was set to 
% \val{png} with option \opt{inkscapeformat}.
%    \begin{macrocode}
  \ifstr{\svg@ink@format}{png}{\FamilyOptions{SVG}{inkscapelatex=false}}{}%
}
\newcommand*\svg@local@param@use{}
\newcommand*\svg@local@param@def[1]{%
  \edef\svg@local@param@use{%
    \unexpanded\expandafter{\svg@local@param@use}\unexpanded{#1}%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \svg@local@param@def
% \end{macro}^^A \svg@local@param@use
% \end{macro}^^A \svg@local@param@set
% \begin{option}{usexcolor}
% \changes{v2.00}{2017/02/17}{new}
% \begin{option}{noxcolor}
% \begin{macro}{\if@svg@use@xcolor}
% \begin{option}{usetransparent}
% \changes{v2.00}{2017/02/17}{new}
% \begin{option}{notransparent}
% \begin{macro}{\if@svg@use@transparent}
% Options for preventing packages \pkg{xcolor} and \pkg{transparent} to be 
% loaded.
%    \begin{macrocode}
\newif\if@svg@use@xcolor
\FamilyBoolKey{SVG}{usexcolor}{@svg@use@xcolor}
\DeclareOption{noxcolor}{\FamilyOptions{SVG}{usexcolor=false}}
\newif\if@svg@use@transparent
\FamilyBoolKey{SVG}{usetransparent}{@svg@use@transparent}
\DeclareOption{notransparent}{\FamilyOptions{SVG}{usetransparent=false}}
%    \end{macrocode}
% They are only available during the loading process of package \pkg{svg}.
%    \begin{macrocode}
\AtEndOfPackage{%
  \RelaxFamilyKey{SVG}{usexcolor}%
  \RelaxFamilyKey{SVG}{usetransparent}%
  \if@svg@use@xcolor%
    \RequirePackage{xcolor}[2016/05/11]%
  \else%
    \AfterPackage*{xcolor}{%
      \PackageWarning{svg}{Package `xcolor' was loaded anyway}%
    }%
  \fi%
  \if@svg@use@transparent%
    \RequirePackage{transparent}[2016/05/16]%
  \else%
    \AfterPackage*{transparent}{%
      \PackageWarning{svg}{Package `transparent' was loaded anyway}%
    }%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \if@svg@use@transparent
% \end{option}^^A notransparent
% \end{option}^^A usetransparent
% \end{macro}^^A \if@svg@use@xcolor
% \end{option}^^A noxcolor
% \end{option}^^A usexcolor
% \begin{macro}{\svg@tempa}
% \begin{macro}{\svg@tempb}
% \begin{macro}{\if@svg@tempswa}
% \begin{macro}{\svg@tempcnt}
% Internal temporary macros.
%    \begin{macrocode}
\newcommand*\svg@tempa{}
\newcommand*\svg@tempb{}
\newif\if@svg@tempswa
\newcount\svg@tempcnt
%    \end{macrocode}
% \end{macro}^^A \svg@tempcnt
% \end{macro}^^A \if@svg@tempswa
% \end{macro}^^A \svg@tempb
% \end{macro}^^A \svg@tempa
%
% \subsection{Handling path information}
%
% Both packages \pkg{svg} and \pkg{svg-extract} should be able to handle 
% user-defined input and output paths. As there is the possibility for users to 
% provide paths with or without quotes to \LaTeX, this is taken into account.
%
% \begin{macro}{\svg@quotes@remove}
% \begin{macro}{\svg@quotes@@remove}
% These two commands are used to remove all occuring quotes within a string. 
% The only argument passed to \cs{svg@quotes@remove} is not the string itself
% but a macro in which a string is stored.
%    \begin{macrocode}
\newcommand*\svg@quotes@remove[1]{%
  \begingroup%
    \edef\svg@tempa{#1}%
    \expandafter\svg@quotes@@remove\svg@tempa""\@nil%
    \edef\svg@tempb{%
      \endgroup%
      \noexpand\def\noexpand#1{\unexpanded\expandafter{\svg@tempa}}%
    }%
  \svg@tempb%
}
\newcommand*\svg@quotes@@remove{}
\def\svg@quotes@@remove#1"#2"#3\@nil{%
  \IfArgIsEmpty{#2}{%
    \edef\svg@tempa{#1}%
  }{%
    \svg@quotes@@remove#1#2#3""\@nil%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \svg@quotes@@remove
% \end{macro}^^A \svg@quotes@remove
% \begin{macro}{\svg@quotes@check}
% \begin{macro}{\svg@quotes@@check}
% \begin{macro}{\if@svg@quotes@found}
% During the treatment of paths, it may be necessary to temporarily remove 
% quotes and, if required, add them again later. For this purpose, the switch 
% \cs{if@svg@quotes@found} as well as the commands \cs{svg@quotes@check} and
% \cs{svg@quotes@@check}, which controls the switch, are defined. As before, 
% the string is passed in a macro to \cs{svg@quotes@check}.
%    \begin{macrocode}
\newif\if@svg@quotes@found
\newcommand*\svg@quotes@check[1]{%
  \expandafter\svg@quotes@@check#1"\@nil%
}
\newcommand*\svg@quotes@@check{}
\def\svg@quotes@@check#1"#2\@nil{%
  \IfArgIsEmpty{#2}{\@svg@quotes@foundfalse}{\@svg@quotes@foundtrue}%
}
%    \end{macrocode}
% \end{macro}^^A \if@svg@quotes@found
% \end{macro}^^A \svg@quotes@@check
% \end{macro}^^A \svg@quotes@check
% \begin{macro}{\svg@normalize@path}
% \begin{macro}{\svg@normalize@@path}
% If any path is given, a trailing slash is needed. These two macros ensure
% that this condition is fulfilled in any case, even if this is not considered
% by the user. As before, a macro containgin the path string is passed to 
% \cs{svg@normalize@path}.
%    \begin{macrocode}
\newcommand*\svg@normalize@path[1]{%
  \begingroup%
    \svg@quotes@check{#1}%
    \svg@quotes@remove{#1}%
    \expandafter\svg@normalize@@path#1//\@nil%
    \edef\svg@tempb{%
      \endgroup%
      \if@svg@quotes@found%
        \noexpand\def\noexpand#1{"\unexpanded\expandafter{\svg@tempa}"}%
      \else%
        \noexpand\def\noexpand#1{\unexpanded\expandafter{\svg@tempa}}%
      \fi%
    }%
  \svg@tempb%
}
\newcommand*\svg@normalize@@path{}
\def\svg@normalize@@path#1/#2/\@nil{%
  \IfArgIsEmpty{#2}{%
    \IfArgIsEmpty{#1}{\def\svg@tempa{}}{\def\svg@tempa{#1/}}%
  }{%
    \svg@normalize@@path#2/\@nil%
    \edef\svg@tempa{#1/\unexpanded\expandafter{\svg@tempa}}%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \svg@normalize@@path
% \end{macro}^^A \svg@normalize@path
% \begin{macro}{\svgpath}
% \changes{v2.00}{2017/02/12}{new}
% \begin{macro}{\svg@path}
% With \cs{svgpath} the user can give several root paths to \file{svg}~files in 
% the same way as \cs{graphicspath} is used. The only difference is that a 
% missing slash is added at the end of the path, if needed.
%    \begin{macrocode}
\newcommand*\svg@path{}
\let\svg@path\@undefined
\newcommand*\svgpath[1]{%
  \def\svg@path{}%
  \@tfor\svg@tempa:=#1\do{%
    \svg@normalize@path{\svg@tempa}%
    \edef\svg@path{\svg@path{\svg@tempa}}%
  }%
  \ifx\svg@path\@empty%
    \let\svg@path\@undefined%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \svg@path
% \end{macro}^^A \svgpath
%
% \iffalse
%</base>
%</package&option>
%<*package&body&base>
% \fi
%
% \begin{macro}{\svg@get@path}
% \begin{macro}{\svg@get@@path}
% \begin{macro}{\if@svg@file@found}
% \begin{macro}{\svg@file@path}
% \begin{macro}{\svg@file@name}
% \begin{macro}{\svg@file@base}
% \begin{macro}{\svg@file@ext}
% The command \cs{svg@get@path} tries to find a given \file{svg}~file. If the 
% searched file wasn't found in the current path, all paths given with 
% \cs{svgpath} are evaluated. If there was no appropriate file again, all paths
% given by \cs{graphicspath} are examined. The results for file path and name 
% are stored in \cs{svg@file@path} and \cs{svg@file@name} as well as the 
% compound of both is saved in \cs{svg@file@base}.
%    \begin{macrocode}
\newif\if@svg@file@found
\newcommand*\svg@file@path{}
\newcommand*\svg@file@name{}
\newcommand*\svg@file@base{}
\newcommand*\svg@file@ext{}
\newcommand*\svg@get@path[2][svg]{%
  \begingroup%
    \@svg@file@foundfalse%
    \svg@get@@path{#2}{#1}%
    \if@svg@file@found\else%
      \ifx\svg@path\@undefined\else%
        \let\input@path\svg@path%
        \svg@get@@path{#2}{#1}%
      \fi%
    \fi%
    \if@svg@file@found\else%
      \ifx\Ginput@path\@undefined\else%
        \let\input@path\Ginput@path%
        \svg@get@@path{#2}{#1}%
      \fi%
    \fi%
    \edef\svg@tempa{%
      \endgroup%
      \if@svg@file@found%
        \noexpand\@svg@file@foundtrue%
        \noexpand\def\noexpand\svg@file@path{\filename@area}%
        \noexpand\def\noexpand\svg@file@name{\filename@base}%
        \noexpand\def\noexpand\svg@file@base{\filename@area\filename@base}%
      \else%
        \noexpand\@svg@file@foundfalse%
        \noexpand\def\noexpand\svg@file@path{}%
        \noexpand\def\noexpand\svg@file@name{#2}%
        \noexpand\def\noexpand\svg@file@base{#2}%
      \fi%
    }%
  \svg@tempa%
}
%    \end{macrocode}
% The macro \cs{svg@get@@path} does the actual search job.
%    \begin{macrocode}
\newcommand*\svg@get@@path[2]{%
  \edef\svg@tempa{#1}%
  \svg@quotes@check{\svg@tempa}%
  \svg@quotes@remove{\svg@tempa}%
%    \end{macrocode}
% A maybe given, unneeded file extension is removed.
%    \begin{macrocode}
  \def\svg@tempb##1.#2##2\@nil{\def\svg@tempa{##1.#2}}%
  \expandafter\svg@tempb\svg@tempa.#2\@nil%
  \if@svg@quotes@found%
    \edef\svg@tempa{"\svg@tempa"}%
  \fi%
%    \end{macrocode}
% The specified file is searched with \cs{IfFileExists}. If the file search was 
% succesful, the macro \cs{svg@filename@parse} is called with the result.
%    \begin{macrocode}
  \IfFileExists{\svg@tempa}{%
    \@svg@file@foundtrue%
    \expandafter\svg@filename@parse\expandafter{\@filef@und}%
  }{}%
}
%    \end{macrocode}
% \end{macro}^^A \svg@file@ext
% \end{macro}^^A \svg@file@base
% \end{macro}^^A \svg@file@name
% \end{macro}^^A \svg@file@path
% \end{macro}^^A \if@svg@file@found
% \end{macro}^^A \svg@get@@path
% \end{macro}^^A \svg@get@path
% \begin{macro}{\svg@filename@parse}
% As the internal \LaTeXe{} command \cs{filename@parse} is not able to split a 
% given file name containing quotes, \cs{svg@filename@parse} is defined to 
% resolve this problem.
%    \begin{macrocode}
\newcommand*\svg@filename@parse[1]{%
  \begingroup%
    \def\svg@tempa##1{%
      \def\svg@tempb####1####2\@nil{%
        \ifstr{####1}{"}{\def\svg@tempb{####2}}{\def\svg@tempb{####1####2}}%
      }%
      \expandafter\svg@tempb##1\@nil%
      \edef##1{\svg@tempb}%
    }%
%    \end{macrocode}
% The given path and file is parsed with \cs{filename@parse}. If an extension 
% was found, it is appended to the file name for a second parsing run.
%    \begin{macrocode}
    \filename@parse{#1}%
    \ifx\filename@ext\relax\else%
      \edef\filename@base{\filename@base.\filename@ext}%
    \fi%
%    \end{macrocode}
% If there are quotes in the file path, the closing one will be found as first 
% character in \cs{filename@base} as \cs{filename@area} is splitted at the last
% slash. This leading quote is removed from \cs{filename@base} with 
% \cs{svg@tempa}.
%    \begin{macrocode}
    \svg@quotes@check{\filename@area}%
    \if@svg@quotes@found%
      \svg@quotes@remove{\filename@area}%
      \edef\filename@area{"\filename@area"}%
      \svg@tempa{\filename@base}%
    \fi%
%    \end{macrocode}
% Before the second call of \cs{filename@parse} remaining quotes are removed 
% and the path in \cs{filename@area} is temporary stored in \cs{svg@tempa}.
%    \begin{macrocode}
    \svg@quotes@check{\filename@base}%
    \if@svg@quotes@found%
      \svg@quotes@remove{\filename@base}%
    \fi%
    \let\svg@tempa\filename@area%
    \expandafter\filename@parse\expandafter{\filename@base}%
    \let\filename@area\svg@tempa%
    \if@svg@quotes@found%
       \edef\filename@base{"\filename@base"}%
    \fi%
%    \end{macrocode}
% With \cs{svg@tempa} the group is closed and the results are saved in the
% macros \cs{filename@\dots}.
%    \begin{macrocode}
    \edef\svg@tempa{%
      \noexpand\endgroup%
      \noexpand\def\noexpand\filename@area{\filename@area}%
      \noexpand\def\noexpand\filename@base{\filename@base}%
      \ifx\filename@ext\relax%
        \noexpand\let\noexpand\filename@ext\noexpand\relax%
      \else%
        \noexpand\def\noexpand\filename@ext{\filename@ext}%
      \fi%
    }%
  \svg@tempa%
}
%    \end{macrocode}
% \end{macro}^^A \svg@filename@parse
% \begin{macro}{\svg@file@missing}
% The error message, which is raised, if an file is missing after the export 
% with \app{Inkscape}.
%    \begin{macrocode}
\newcommand*\svg@file@missing[1]{%
  \begingroup%
    \edef\svg@tempa{#1}%
    \expandafter\svg@filename@parse\expandafter{\svg@tempa}%
    \svg@quotes@remove{\filename@area}%
    \svg@quotes@remove{\filename@base}%
    \PackageError{svg}{%
      File `\filename@base.\filename@ext' is missing%
    }{%
      Did you run the export with Inkscape? There's no file\MessageBreak%
      `\filename@area\filename@base.\filename@ext'%
    }%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \svg@file@missing
% \begin{macro}{\svg@iffilenewer}
% The macro \cs{svg@iffilenewer} is used to decide, whether the export with 
% \app{Inkscape} is necessarry due to an updated \file{svg}~file. This can only 
% be done, if \cs{pdf@filemoddate} is definied. Unfortunately this functionality
% isn't provided by Xe\TeX.
%    \begin{macrocode}
\ifx\pdf@filemoddate\@undefined
  \newcommand*\svg@iffilenewer[2]{\@gobbletwo}
\else
  \newcommand*\svg@iffilenewer[2]{%
    \begingroup%
      \edef\svg@tempa{\pdf@filemoddate{#1}}%
      \edef\svg@tempb{\pdf@filemoddate{#2}}%
      \ifnum\pdf@strcmp{\svg@tempa}{\svg@tempb}>\z@\relax%
        \aftergroup\@firstoftwo%
      \else%
        \aftergroup\@secondoftwo%
      \fi%
    \endgroup%
  }
\fi
%    \end{macrocode}
% \end{macro}^^A \svg@iffilenewer
%
% \iffalse
%</package&body&base>
%<*package&option>
%<*base>
% \fi
%
% \subsection{Defining Options}
%
% \begin{macro}{\svg@deprecated@key}
% With version v2.00 the whole user interface was renewed. For reasons of 
% compatibility, outdated options and parameters from version~v1.0 are also 
% provided. If an old key was given, a warning is issued and the valid key is
% used.
%    \begin{macrocode}
\newcommand*\svg@deprecated@key[3][svg]{%
  \PackageWarning{#1}{%
    The option key `#2' is deprecated.\MessageBreak%
    It's recommended to use `#3'\MessageBreak%
    instead%
  }%
  \FamilyOptions{SVG}{#3}%
}
%    \end{macrocode}
% \end{macro}^^A \svg@deprecated@key
% \begin{macro}{\svg@ifvalueisrelax}
% For some keys the usage of \val{\cs{relax}} as a value should lead to a 
% special reaction, such as restoring to default behavior or reseting the key.
% Therefore, \cs{svg@ifvalueisrelax} checks, whether \val{\cs{relax}} was used
% as value or not.
%    \begin{macrocode}
\newcommand*\svg@ifvalueisrelax[1]{%
  \begingroup%
    \def\svg@tempa{#1}%
    \def\svg@tempb{\relax}%
    \ifx\svg@tempa\svg@tempb\relax%
      \aftergroup\@firstoftwo%
    \else%
      \aftergroup\@secondoftwo%
    \fi%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \svg@ifvalueisrelax
%
% \subsubsection{The invocation of \app{Inkscape}}
%
% The Application \app{Inkscape} is used to create includable graphic files in 
% a desired format (\file{pdf/eps/ps/png}) out of files in \file{svg}~format, 
% whereas the support of \LaTeX{} can optionally be used.
%
% \begin{option}{inkscape}
% \changes{v2.00}{2017/02/17}{new}
% \begin{macro}{\svg@ink@mode}
% The intension of option \opt{inkscape} is to control the running behaviour of 
% \app{Inkscape}. It can be switched off at all or invoked only if necessarry 
% or the command line call can be forced with every run of \LaTeX. Additionally 
% option \opt{inkscape} can be used as wrapper for options \opt{inkscapeformat},
% \opt{inkscapearea}, \opt{inkscapelatex} and \opt{inkscapedpi}, which are
% declared later.
%    \begin{macrocode}
\newcommand*\svg@ink@mode{}
\DefineFamilyKey{SVG}{inkscape}[true]{%
  \FamilySetNumerical{SVG}{inkscape}{svg@tempa}{%
    {false}{0},{off}{0},{no}{0},%
    {true}{1},{on}{1},{yes}{1},{onlynewer}{1},{newer}{1},%
    {force}{2},{forced}{2},{overwrite}{2},%
    {pdf}{3},{eps}{4},{ps}{5},{png}{6},%
    {drawing}{7},{crop}{7},%
    {page}{8},{nocrop}{8},%
    {tex}{9},{latex}{9},{exportlatex}{9},{latexexport}{9},%
    {notex}{10},{nolatex}{10},{noexportlatex}{10},{nolatexexport}{10},%
    {latexnoexport}{10},{raw}{10},{plain}{10},{simple}{10}%
  }{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \ifnum\svg@tempa<\thr@@\relax%
      \let\svg@ink@mode\svg@tempa%
    \else%
      \ifcase\svg@tempa\relax\or\or\or% pdf
        \FamilyOptions{SVG}{inkscapeformat=pdf}%
      \or% eps
        \FamilyOptions{SVG}{inkscapeformat=eps}%
      \or% ps
        \FamilyOptions{SVG}{inkscapeformat=ps}%
      \or% png
        \FamilyOptions{SVG}{inkscapeformat=png}%
      \or% drawing
        \FamilyOptions{SVG}{inkscapearea=drawing}%
      \or% page
        \FamilyOptions{SVG}{inkscapearea=page}%
      \or% tex
        \FamilyOptions{SVG}{inkscapelatex=true}%
      \or% notex
        \FamilyOptions{SVG}{inkscapelatex=false}%
      \fi%
    \fi%
%    \end{macrocode}
% It's also possible to set the option \opt{inkscapedpi} by passing a number 
% followed by \val{dpi} like \opt{inkscape=\val{300dpi}}.
%    \begin{macrocode}
  \else% dpi
    \def\svg@tempa##1dpi##2\@nil{%
      \ifstr{##2}{dpi}{\FamilyOptions{SVG}{inkscapedpi=##1}}{}%
    }%
    \svg@tempa#1dpi\@nil%
%    \end{macrocode}
% In version~v1.0 tHe option \opt{inkscape} was used to set both the executable 
% and options for \app{Inkscape}. This is taken into account here.
%    \begin{macrocode}
    \ifx\FamilyKeyState\FamilyKeyStateProcessed\else%
%    \end{macrocode}
% Splitting executable from options with delimitted macros. After calling 
% \cs{svg@tempa} with the given value, the part for the executable is stored in 
% \cs{svg@tempa} and the option part---which is recognized by the first \val{-} 
% character--- in \cs{svg@tempb}.
%    \begin{macrocode}
      \def\svg@tempa##1-##2\@nil{%
        \IfArgIsEmpty{##2}{\def\svg@tempb{}}{%
          \def\svg@tempa##1####1\@nil{\def\svg@tempb{####1}}%
          \svg@tempa#1\@nil%
        }%
        \def\svg@tempa{##1}%
      }%
      \svg@tempa#1-\@nil%
      \PackageWarning{svg}{%
        Setting the executable and associated options\MessageBreak% 
        for Inkscape should be done with options\MessageBreak%
        `inkscapeexe=\svg@tempa'%
        \ifx\svg@tempb\@empty\else%
          \MessageBreak and `inkscapeopt=\svg@tempb'%
        \fi.\MessageBreak% 
        Nevertheless, this was done by now anyway%
      }%
      \edef\svg@tempa{%
        \noexpand\FamilyOptions{SVG}{inkscapeexe=\svg@tempa}%
        \ifx\svg@tempb\@empty\else%
          \noexpand\FamilyOptions{SVG}{inkscapeopt=\svg@tempb}%
        \fi%
      }%
      \svg@tempa%
    \fi%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \svg@ink@mode
% \end{option}^^A inkscape
% \begin{option}{inkscapeformat}
% \changes{v2.00}{2017/02/17}{new}
% \begin{macro}{\svg@ink@format}
% With option \opt{inkscapeformat} the output format of the \app{Inkscape} 
% export function, which is called via \cs{ShellEscape}, can be configured.
% It is set to \val{pdf} or, if dvi output could be detected, to \val{eps} 
% during initialization.
%    \begin{macrocode}
\newcommand*\svg@ink@format{pdf}
\ifxetex\else\ifpdf\else
  \renewcommand*\svg@ink@format{eps}
\fi\fi
\DefineFamilyKey{SVG}{inkscapeformat}{%
  \FamilySetNumerical{SVG}{inkscapeformat}{svg@tempa}{%
    {pdf}{0},{eps}{1},{ps}{2},{png}{3}%
  }{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \ifcase\svg@tempa\relax% latex
      \renewcommand*\svg@ink@format{pdf}%
    \or% eps
      \renewcommand*\svg@ink@format{eps}%
    \or% ps
      \renewcommand*\svg@ink@format{ps}%
    \or% png
      \renewcommand*\svg@ink@format{png}%
    \fi%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \svg@ink@format
% \end{option}^^A inkscapeformat
% \begin{option}{inkscapearea}
% \changes{v2.00}{2017/02/17}{new}
% \begin{macro}{\svg@ink@area}
% The exported area for an \app{Inkscape} graphic can be set with this option.
%    \begin{macrocode}
\newcommand*\svg@ink@area{}
\DefineFamilyKey{SVG}{inkscapearea}{%
  \FamilySetNumerical{SVG}{inkscapearea}{svg@tempa}{%
    {drawing}{0},{crop}{0},%
    {page}{1},{nocrop}{1}%
  }{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \ifcase\svg@tempa\relax% drawing
      \renewcommand*\svg@ink@area{-D}%
    \else% page
      \renewcommand*\svg@ink@area{-C}%
    \fi%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \svg@ink@area
% \end{option}^^A inkscapearea
% \begin{option}{inkscapelatex}
% \changes{v2.00}{2017/02/17}{new}
% \begin{macro}{\svg@ink@latex}
% This options controls whether the \app{Inkscape} export will be invoked with 
% or without the generation of a seperate \LaTeX{}~file.
%    \begin{macrocode}
\newif\if@svg@ink@latex
\FamilyBoolKey{SVG}{inkscapelatex}{@svg@ink@latex}
%    \end{macrocode}
% \end{macro}^^A \svg@ink@latex
% \end{option}^^A inkscapelatex
% \begin{option}{inkscapedpi}
% \changes{v2.00}{2017/02/17}{new}
% \begin{option}{inkscapedensity}
% \begin{macro}{\svg@ink@dpi}
% A density can be chosen, which is used during export with \app{Inkscape} for 
% bitmaps and rasterization of filters.
%    \begin{macrocode}
\newcommand*\svg@ink@dpi{}
\let\svg@ink@dpi\relax
\DefineFamilyKey{SVG}{inkscapedpi}{%
  \FamilyKeyStateUnknownValue%
  \svg@ifvalueisrelax{#1}{%
    \let\svg@ink@dpi\relax%
    \FamilyKeyStateProcessed%
  }{%
    \def\svg@tempa##1dpi##2\@nil{\def\svg@tempa{##1}}%
    \svg@tempa#1dpi\@nil%
    \ifnumber{\svg@tempa}{%
      \edef\svg@ink@dpi{\svg@tempa}%
      \FamilyKeyStateProcessed%
    }{}%
  }%
}
\DefineFamilyKey{SVG}{inkscapedensity}{\FamilyOptions{SVG}{inkscapedpi=#1}}
%    \end{macrocode}
% \end{macro}^^A \svg@ink@dpi
% \end{option}^^A inkscapedensity
% \end{option}^^A inkscapedpi
% \begin{option}{inkscapeexe}
% \changes{v2.00}{2017/02/17}{new}
% \begin{macro}{\svg@ink@exe}
% \begin{option}{inkscapeopt}
% \changes{v2.00}{2017/02/17}{new}
% \begin{macro}{\svg@ink@opt}
% With these options, the terminal command for invoking \app{Inkscape} as well 
% as additional options can be defined.
%    \begin{macrocode}
\newcommand*\svg@ink@exe{inkscape}
\DefineFamilyKey{SVG}{inkscapeexe}{%
  \renewcommand*\svg@ink@exe{#1}%
  \FamilyKeyStateProcessed%
}
\newcommand*\svg@ink@opt{}
\DefineFamilyKey{SVG}{inkscapeopt}{%
  \renewcommand*\svg@ink@opt{#1}%
  \FamilyKeyStateProcessed%
}
%    \end{macrocode}
% \end{macro}^^A \svg@ink@opt
% \end{option}^^A inkscapeopt
% \end{macro}^^A \svg@ink@exe
% \end{option}^^A inkscapeexe
%
% \subsubsection{Setting input folder}
%
% \begin{option}{svgpath}
% In version~v1.0 setting the path to \file{svg}~files was done via option. So 
% this method is provided as well.
%    \begin{macrocode}
\DefineFamilyKey{SVG}{svgpath}{%
  \PackageWarning{svg}{%
    The key `svgpath' is deprecated. It's recommended\MessageBreak%
    to use `\string\svgpath' instead%
  }%
  \svgpath{{#1}}%
  \FamilyKeyStateProcessed%
}
%    \end{macrocode}
% \end{option}^^A svgpath
%
% \subsubsection{Setting output folder}
%
% \begin{option}{outpath}
% \changes{v2.00}{2017/02/17}{new}
% \begin{option}{outname}
% \changes{v2.00}{2017/02/17}{new}
% \begin{macro}{\svg@out@path}
% \begin{macro}{\svg@out@name}
% \begin{macro}{\svg@out@base}
% The option \opt{outpath} controls, in which folder the results of the
% \app{Inkscape} export will be located. With option \opt{outname} the name of
% the exported file itself can be changed.
%    \begin{macrocode}
\newcommand*\svg@out@path{}
\newcommand*\svg@out@name{\svg@file@name\svg@file@ext}
\newcommand*\svg@out@base{\svg@out@path\svg@out@name.\svg@ink@format}
\DefineFamilyKey{SVG}{outpath}{%
  \FamilySetNumerical{SVG}{outpath}{svg@tempa}{%
    {svgpath}{0},{svgdir}{0},%
    {svgsubpath}{1},{svgsubdir}{1},%
    {basepath}{2},{basedir}{2},{jobpath}{2},{jobdir}{2},%
    {basesubpath}{3},{basesubdir}{3},{jobsubpath}{3},{jobsubdir}{3}%
  }{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \ifcase\svg@tempa\relax% svgpath
      \renewcommand*\svg@out@path{\svg@file@path}%
    \or% svgsubpath
      \renewcommand*\svg@out@path{\svg@file@path svg-out/}%
    \or% basepath
      \renewcommand*\svg@out@path{./}%
    \or% basesubpath
      \renewcommand*\svg@out@path{./svg-out/}%
    \fi%
  \else%
    \renewcommand*\svg@out@path{#1}%
    \svg@normalize@path{\svg@out@path}%
    \FamilyKeyStateProcessed%
  \fi%
}
\DefineFamilyKey{SVG}{outname}{%
  \renewcommand*\svg@out@name{#1\svg@file@ext}%
  \FamilyKeyStateProcessed%
}
%    \end{macrocode}
% \end{macro}^^A \svg@out@base
% \end{macro}^^A \svg@out@name
% \end{macro}^^A \svg@out@path
% \end{option}^^A outname
% \end{option}^^A outpath
%
% \iffalse
%</base>
% \fi
%
% \subsubsection{Options for the inclusion of graphics}
%
% After the graphic export with \app{Inkscape}, the inclusion of those graphics 
% can be controlled with the following options.
%
% \begin{option}{width}
% \begin{macro}{\svg@param@width}
% \begin{option}{height}
% \begin{macro}{\svg@param@width}
% \begin{option}{scale}
% \changes{v2.00}{2017/02/17}{new}
% \begin{macro}{\svg@param@scale}
% These options determine the size of the included graphics. The usage of
% \val{\cs{relax}} as value resets the respective option to the default 
% behavior.
%    \begin{macrocode}
%<*base>
\newcommand*\svg@param@width{\z@}
\DefineFamilyKey{SVG}{width}{%
  \FamilyKeyStateUnknownValue%
  \svg@ifvalueisrelax{#1}{%
    \renewcommand*\svg@param@width{\z@}%
    \FamilyKeyStateProcessed%
  }{%
    \FamilySetLengthMacro{SVG}{width}{\svg@param@width}{#1}%
    \ifdim\svg@param@width<\z@\relax%
      \FamilyKeyStateUnknownValue%
    \fi%
  }%
}
\newcommand*\svg@param@height{\z@}
\DefineFamilyKey{SVG}{height}{%
  \FamilyKeyStateUnknownValue%
  \svg@ifvalueisrelax{#1}{%
    \renewcommand*\svg@param@height{\z@}%
    \FamilyKeyStateProcessed%
  }{%
    \FamilySetLengthMacro{SVG}{height}{\svg@param@height}{#1}%
    \ifdim\svg@param@height<\z@\relax%
      \FamilyKeyStateUnknownValue%
    \fi%
  }%
}
\newcommand*\svg@param@scale{1}
\DefineFamilyKey{SVG}{scale}{%
  \FamilyKeyStateUnknownValue%
  \svg@ifvalueisrelax{#1}{%
    \renewcommand*\svg@param@scale{1}%
    \FamilyKeyStateProcessed%
  }{%
    \ifisdimension{#1\p@}{%
      \ifdim\dimexpr#1\p@\relax>\z@\relax%
        \renewcommand*\svg@param@scale{#1}%
        \FamilyKeyStateProcessed%
      \fi%
    }{}%
  }%
}
%</base>
%    \end{macrocode}
% \end{macro}^^A \svg@param@scale
% \end{option}^^A scale
% \end{macro}^^A \svg@param@height
% \end{option}^^A height
% \end{macro}^^A \svg@param@width
% \end{option}^^A width
% \begin{option}{extractwidth}
% \changes{v2.00}{2017/02/20}{new}
% \begin{macro}{\svgx@param@width}
% \begin{option}{extractheight}
% \changes{v2.00}{2017/02/20}{new}
% \begin{macro}{\svgx@param@width}
% \begin{option}{extractscale}
% \changes{v2.00}{2017/02/17}{new}
% \begin{macro}{\svgx@param@scale}
% For graphic extraction, the given settings regarding the size for inclusion 
% can be overwritten with these options. Using \val{\cs{relax}} as value leads 
% to reseting an option as unset, regardless of what was previously given. The
% value \val{inherit} means, that the actual option for including is used for
% extraction as well. This is the default setting.
%    \begin{macrocode}
%<*extract>
\newcommand*\svgx@param@width{\svg@param@width}
\DefineFamilyKey{SVG}{extractwidth}{%
  \FamilyKeyStateUnknownValue%
  \svg@ifvalueisrelax{#1}{%
    \renewcommand*\svgx@param@width{\z@}%
    \FamilyKeyStateProcessed%
  }{%
    \ifstr{#1}{inherit}{%
      \renewcommand*\svgx@param@width{\svg@param@width}%
      \FamilyKeyStateProcessed%
    }{%
      \FamilySetLengthMacro{SVG}{extractwidth}{\svgx@param@width}{#1}%
      \ifdim\svgx@param@width<\z@\relax%
        \FamilyKeyStateUnknownValue%
      \fi%
    }%
  }%
}
\newcommand*\svgx@param@height{\svg@param@height}
\DefineFamilyKey{SVG}{extractheight}{%
  \FamilyKeyStateUnknownValue%
  \svg@ifvalueisrelax{#1}{%
    \renewcommand*\svgx@param@height{\z@}%
    \FamilyKeyStateProcessed%
  }{%
    \ifstr{#1}{inherit}{%
      \renewcommand*\svgx@param@height{\svg@param@height}%
      \FamilyKeyStateProcessed%
    }{%
      \FamilySetLengthMacro{SVG}{extractheight}{\svgx@param@height}{#1}%
      \ifdim\svgx@param@height<\z@\relax%
        \FamilyKeyStateUnknownValue%
      \fi%
    }%
  }%
}
\newcommand*\svgx@param@scale{\svg@param@scale}
\DefineFamilyKey{SVG}{extractscale}{%
  \FamilyKeyStateUnknownValue%
  \svg@ifvalueisrelax{#1}{%
    \renewcommand*\svgx@param@scale{1}%
    \FamilyKeyStateProcessed%
  }{%
    \ifstr{#1}{inherit}{%
      \renewcommand*\svgx@param@scale{\svg@param@scale}%
      \FamilyKeyStateProcessed%
    }{%
      \ifisdimension{#1\p@}{%
        \ifdim\dimexpr#1\p@\relax>\z@\relax%
          \renewcommand*\svgx@param@scale{#1}%
          \FamilyKeyStateProcessed%
        \fi%
      }{}%
    }%
  }%
}
%</extract>
%    \end{macrocode}
% \end{macro}^^A \svgx@param@scale
% \end{option}^^A scale
% \end{macro}^^A \svgx@param@height
% \end{option}^^A height
% \end{macro}^^A \svgx@param@width
% \end{option}^^A width
% \begin{option}{pretex}
% \begin{macro}{\svg@param@pretex}
% \begin{option}{apptex}
% \begin{macro}{\svg@param@apptex}
% \begin{option}{postex}
% For executing code right before or after the graphic inclusion, two hooks are 
% defined.
%    \begin{macrocode}
%<*base>
\newcommand*\svg@param@pretex{}
\let\svg@param@pretex\relax
\DefineFamilyKey{SVG}{pretex}{%
  \svg@ifvalueisrelax{#1}{%
    \let\svg@param@pretex\relax%
  }{%
    \def\svg@param@pretex{#1}%
  }%
  \FamilyKeyStateProcessed%
}
\newcommand*\svg@param@apptex{}
\let\svg@param@apptex\relax
\DefineFamilyKey{SVG}{apptex}{%
  \svg@ifvalueisrelax{#1}{%
    \let\svg@param@apptex\relax%
  }{%
    \def\svg@param@apptex{#1}%
  }%
  \FamilyKeyStateProcessed%
}
\DefineFamilyKey{SVG}{postex}{%
  \svg@deprecated@key{postex=#1}{apptex=#1}%
}
%</base>
%    \end{macrocode}
% \end{option}^^A postex
% \end{macro}^^A \svg@param@apptex
% \end{option}^^A apptex
% \end{macro}^^A \svg@param@pretex
% \end{option}^^A pretex
% \begin{option}{extractpretex}
% \changes{v2.00}{2017/02/20}{new}
% \begin{macro}{\svgx@param@pretex}
% \begin{option}{extractapptex}
% \changes{v2.00}{2017/02/20}{new}
% \begin{macro}{\svgx@param@apptex}
% \begin{option}{extractpostex}
% The similar hooks for executing code right before or after the graphic 
% extraction.
%    \begin{macrocode}
%<*extract>
\newcommand*\svgx@param@pretex{\svg@param@pretex}
\DefineFamilyKey{SVG}{extractpretex}{%
  \svg@ifvalueisrelax{#1}{%
    \let\svgx@param@pretex\relax%
  }{%
    \ifstr{#1}{inherit}{%
      \def\svgx@param@pretex{\svg@param@pretex}%
    }{%
      \def\svgx@param@pretex{#1}%
    }%
  }%
  \FamilyKeyStateProcessed%
}
\newcommand*\svgx@param@apptex{\svg@param@apptex}
\DefineFamilyKey{SVG}{extractapptex}{%
  \svg@ifvalueisrelax{#1}{%
    \let\svgx@param@apptex\relax%
  }{%
    \ifstr{#1}{inherit}{%
      \def\svgx@param@apptex{\svg@param@apptex}%
    }{%
      \def\svgx@param@apptex{#1}%
    }%
  }%
  \FamilyKeyStateProcessed%
}
\DefineFamilyKey{SVG}{extractpostex}{%
  \svg@deprecated@key[svg-extract]{extractpostex=#1}{extractapptex=#1}%
}
%</extract>
%    \end{macrocode}
% \end{option}^^A extractpostex
% \end{macro}^^A \svgx@param@apptex
% \end{option}^^A extractapptex
% \end{macro}^^A \svgx@param@pretex
% \end{option}^^A extractpretex
%
% \iffalse
%<*base>
% \fi
%
% \begin{option}{lastpage}
% \changes{v2.00}{2017/02/20}{new}
% \begin{counter}{svg@param@lastpage}
% For \app{Inkscape}~0.91 a bug concerning the \LaTeX{} export has been reproted
% (\url{https://bugs.launchpad.net/ubuntu/+source/inkscape/+bug/1417470}). 
% Sometimes the \LaTeX{}~file created by \app{Inkscape} tries to include more
% pages than actually are present in the \file{pdf}~file. To work around this 
% problem, a patch is provided. For this purpose, the total page number is read 
% from the \file{pdf}~file. 
%    \begin{macrocode}
\newcounter{svg@param@lastpage}
\DefineFamilyKey{SVG}{lastpage}{%
  \FamilySetNumerical{SVG}{lastpage}{svg@tempa}{%
    {false}{0},{off}{0},{no}{0},{ignore}{0},%
    {true}{1},{on}{1},{yes}{1},{auto}{1}%
  }{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \ifcase\svg@tempa\relax% false
      \FamilySetCounter{SVG}{lastpage}{svg@param@lastpage}{\m@ne}%
    \or% true
      \FamilySetCounter{SVG}{lastpage}{svg@param@lastpage}{\z@}%
    \fi%
  \fi%
}
%    \end{macrocode}
% \end{counter}^^A svg@param@lastpage
% \end{option}^^A lastpage
% \begin{option}{draft}
% \begin{macro}{\if@svg@draft}
% The option \opt{draft} has the same effect as the eponymous option of package
% \pkg{graphicx}.
%    \begin{macrocode}
\newif\if@svg@draft
\FamilyBoolKey{SVG}{draft}{@svg@draft}
\AtBeginDocument{\if@svg@draft\else\ifGin@draft\@svg@drafttrue\fi\fi}
%    \end{macrocode}
% \end{macro}^^A \if@svg@draft
% \end{option}^^A draft
%
% \iffalse
%</base>
%<*extract>
% \fi
%
% \subsubsection{Options for the extraction of detached graphics}
%
% \begin{option}{exclude}
% If it is desired not to include but only extract graphics with package 
% \pkg{svg-extract}, option \opt{exclude} can be used.
%    \begin{macrocode}
\FamilyBoolKey{SVG}{exclude}{@svg@exclude}
%    \end{macrocode}
% \end{option}^^A exclude
%
% \iffalse
%</extract>
% \fi
%
%
% \subsection{Processing Options}
%
% Setting the default options and processing the given ones during when loading 
% the packages.
%    \begin{macrocode}
%<*base>
\FamilyExecuteOptions{SVG}{%
  inkscape=true,inkscapearea=drawing,inkscapelatex=true,%
  outpath=basesubdir,usexcolor=true,usetransparent=true%
}
%</base>
\FamilyProcessOptions{SVG}
%    \end{macrocode}
%
% \iffalse
%</package&option>
%<*package&body>
%<*base>
% \fi
%
% \subsection{Including \file{svg} files}
%
% \begin{macro}{\svg@deprecated@param}
% This macro checks, if \cs{svgwidth} or \cs{svgscale} are defined. In this 
% case, the given values are passed to the correlating parameters and a warning 
% is raised.
%    \begin{macrocode}
\newcommand*\svg@deprecated@param{%
  \@svg@tempswafalse%
  \ifx\svgwidth\@undefined\else%
    \edef\svg@tempa{\noexpand\FamilyOptions{SVG}{width=\svgwidth}}%
    \svg@tempa%
    \@svg@tempswatrue%
  \fi%
  \ifx\svgscale\@undefined\else%
    \edef\svg@tempa{\noexpand\FamilyOptions{SVG}{scale=\svgscale}}%
    \svg@tempa%
    \@svg@tempswatrue%
  \fi%
  \if@svg@tempswa%
    \PackageWarning{svg}{%
      You should specify the image size with parameters\MessageBreak%
      `width' and `height' or `scale' instead of using\MessageBreak%
      `\string\svgscale' or `\string\svgwidth'%
    }%
    \let\svgwidth\@undefined%
    \let\svgscale\@undefined%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \svg@deprecated@param
% \begin{macro}{\svg@wrn@scale}
% The option \opt{scale} respectively the parameter \prm{scale} is only 
% considered if the size was not specified.
%    \begin{macrocode}
\newcommand*\svg@wrn@scale{%
  \ifdim\dimexpr\svg@param@scale\p@\relax=\p@\relax\else%
    \@svg@tempswafalse%
    \ifdim\svg@param@width>\z@\relax%
      \@svg@tempswatrue%
    \fi%
    \ifdim\svg@param@height>\z@\relax%
      \@svg@tempswatrue%
    \fi%
    \if@svg@tempswa%
      \PackageWarning{svg}{%
        The parameter `scale' is only considered if neither\MessageBreak%
        `width' nor `height' are specified%
      }%
    \fi%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \svg@wrn@scale
% \begin{macro}{\svg@get@lastpage}
% This macro is used to circumvent the multiple pages bug for \file{pdf}~files 
% of \app{Inkscape}~0.91, when the the \LaTeX{} export was enabled. For this
% purpose, the total page number is read from the \file{pdf}~file. 
%    \begin{macrocode}
\newcommand*\svg@get@lastpage[1]{%
  \ifstr{\svg@ink@format}{pdf}{%
    \begingroup%
      \svg@tempcnt=\m@ne\relax%
      \ifx\XeTeXpdfpagecount\@undefined%
        \ifpdf%
          \ifx\pdfximage\@undefined%
            \ifx\saveimageresource\@undefined\else%
              \saveimageresource{#1}%
              \svg@tempcnt=\lastsavedimageresourcepages\relax%
            \fi%
          \else%
            \pdfximage{#1}%
            \svg@tempcnt=\pdflastximagepages\relax%
          \fi%
        \fi%
      \else%
        \svg@tempcnt=\XeTeXpdfpagecount#1\relax%
      \fi%
      \ifnum\svg@tempcnt=\m@ne\relax%
        \PackageWarning{svg}{%
          It wasn't possible to detect the last page\MessageBreak%
          of `#1'%
        }%
      \else%
        \PackageInfo{svg}{Last page of `#1' is \the\svg@tempcnt}%
      \fi%
      \edef\svg@tempa{%
        \noexpand\endgroup%
        \noexpand\FamilyOptions{SVG}{lastpage=\the\svg@tempcnt}%
      }%
    \svg@tempa%
  }{}%
}
%    \end{macrocode}
% \end{macro}^^A \svg@get@lastpage
% \begin{macro}{\includesvg}
% For the inclusion of \file{svg}~files the command \cs{includesvg} is defined.
% \begin{parameter}{inkscape}
% \begin{parameter}{inkscapeformat}
% \begin{parameter}{inkscapearea}
% \begin{parameter}{inkscapelatex}
% \begin{parameter}{inkscapedpi}
% \begin{parameter}{inkscapeexe}
% \begin{parameter}{inkscapeopt}
% \begin{parameter}{width}
% \begin{parameter}{height}
% \begin{parameter}{scale}
% \begin{parameter}{pretex}
% \begin{parameter}{apptex}
% \begin{parameter}{outpath}
% \begin{parameter}{lastpage}
% \begin{parameter}{angle}
% \begin{parameter}{origin}
% Most of the optional parameters have the same effect as the identically named
% options. Moreover, there are some additional parameters, which can only be
% used as optional argument for \cs{includesvg} but not as an option.
%
% In addition to the automatic finding of the last page, which is included, it 
% can also be given directly as parameter.
%    \begin{macrocode}
\svg@local@param@def{%
  \FamilyCounterKey[.param]{SVG}{lastpage}{svg@param@lastpage}%
}
%    \end{macrocode}
% The parameters \prm{angle} and \prm{origin} are definied as pendants to the 
% keys provided by \cs{includegraphics}.
%    \begin{macrocode}
\newcommand*\svg@param@angle{0}
\svg@local@param@def{%
  \DefineFamilyKey[.param]{SVG}{angle}{%
    \renewcommand*\svg@param@angle{#1}%
    \FamilyKeyStateProcessed%
  }%
}
\newcommand*\svg@param@origin{c}
\svg@local@param@def{%
  \DefineFamilyKey[.param]{SVG}{origin}[c]{%
    \renewcommand*\svg@param@origin{#1}%
    \FamilyKeyStateProcessed%
  }%
}
%    \end{macrocode}
% \end{parameter}^^A origin
% \end{parameter}^^A angle
% \end{parameter}^^A lastpage
% \end{parameter}^^A outpath
% \end{parameter}^^A apptex
% \end{parameter}^^A pretex
% \end{parameter}^^A scale
% \end{parameter}^^A height
% \end{parameter}^^A width
% \end{parameter}^^A inkscapeopt
% \end{parameter}^^A inkscapeexe
% \end{parameter}^^A inkscapedpi
% \end{parameter}^^A inkscapelatex
% \end{parameter}^^A inkscapearea
% \end{parameter}^^A inkscapeformat
% \end{parameter}^^A inkscape
% The actual command for including \file{svg}~files.
%    \begin{macrocode}
\newcommand*{\includesvg}[2][]{%
  \begingroup%
%    \end{macrocode}
% Checking for deprecated commands \cs{svgwidth} and \cs{svgscale}.
%    \begin{macrocode}
    \svg@deprecated@param%
%    \end{macrocode}
% Setting all FamilyOptions in local context (within a group).
%    \begin{macrocode}
    \svg@local@param@set{#1}%
    \if@svg@ink@latex%
      \def\svg@file@ext{_svg-tex}%
    \else%
      \def\svg@file@ext{_svg-raw}%
    \fi%
    \@onelevel@sanitize\svg@file@ext%
%    \end{macrocode}
% Searching all given paths for the relevant \file{svg}~file.
%    \begin{macrocode}
    \svg@get@path{#2}%
    \if@svg@file@found%
%    \end{macrocode}
% Running the export with \app{Inkscape} (if necessarry) and checking the 
% required files for graphic inclusion.
%    \begin{macrocode}
      \svg@ink@run%
      \IfFileExists{\svg@out@base}{}{%
        \@svg@file@foundfalse%
        \svg@file@missing{\svg@out@base}%
      }%
      \if@svg@ink@latex%
        \IfFileExists{\svg@out@base_tex}{}{%
          \@svg@file@foundfalse%
          \svg@file@missing{\svg@out@base_tex}%
        }%
      \fi%
%    \end{macrocode}
% Include the resulting graphic file and maybe extract detached files.
%    \begin{macrocode}
      \if@svg@file@found%
        \svg@input{\svg@out@base}%
        \svg@extract{\svg@out@base}%
      \fi%
    \else%
%    \end{macrocode}
% Raise an error, if the requested \file{svg}~file wasn't found.
%    \begin{macrocode}
      \edef\svg@tempa{#2.svg}%
      \svg@quotes@remove{\svg@tempa}%
      \PackageError{svg}{File `\svg@tempa' is missing}{%
        There's no file `\svg@tempa' neither in current\MessageBreak%
        directory nor any other searched path given by\MessageBreak%
        \string\svgpath%
        \ifx\svg@path\@undefined\space\else%
          \space(\svg@path)\MessageBreak%
        \fi%
         or \string\graphicspath%
        \ifx\Ginput@path\@undefined\else%
          \space(\Ginput@path)%
        \fi.%
      }%
    \fi%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \includesvg
% \begin{macro}{\svg@ink@run}
% \begin{macro}{\if@svg@ink@run}
% The command, which performs the call of \app{Inkscape} via \cs{ShellEscape}.
%    \begin{macrocode}
\newif\if@svg@ink@run
\newcommand*\svg@ink@run{%
  \ifnum\svg@ink@mode>\z@\relax%
    \begingroup%
%    \end{macrocode}
% If the mode for \opt{inkscape} was set to \val{force}, \app{Inkscape} will be 
% called in any case. Otherwise, some checks are performed to detect, if a run 
% of \app{Inkscape} is actually necessarry.
%    \begin{macrocode}
      \@svg@ink@runtrue%
      \ifnum\svg@ink@mode=\tw@\relax\else%
%    \end{macrocode}
% This is the case when the \file{svg}~file is newer than the corresponding
% exported file, or if the latter isn't present at all.
%    \begin{macrocode}
        \svg@iffilenewer{\svg@file@base.svg}{\svg@out@base}{}{%
          \@svg@ink@runfalse%
        }%
%    \end{macrocode}
% The same is true, when the associated \LaTeX{}~file is missing. But when this 
% file already exists, maybe the user did some changes to this file. In this 
% case, overwriting this file is maybe not intended.
%    \begin{macrocode}
        \if@svg@ink@latex%
          \IfFileExists{\svg@out@base_tex}{%
            \ifnum\pdf@shellescape=\@ne\relax\if@svg@ink@run%
              \svg@iffilenewer{\svg@out@base_tex}{\svg@out@base}{%
                \@svg@ink@runfalse%
                \edef\svg@tempa{\svg@out@base}%
                \svg@quotes@remove{\svg@tempa}%
                \PackageWarning{svg}{%
                  Since the encountered filedate of file\MessageBreak%
                  `\svg@tempa_tex' is newer than \MessageBreak%
                  `\svg@tempa' it's supposed that\MessageBreak%
                  you customized this file. To avoid an accidental\MessageBreak%
                  overwriting of this file, the Inkscape export\MessageBreak%
                  won't be done. If you want to overwrite the\MessageBreak%
                  existing file please choose the parameter\MessageBreak%
                  `inkscape=force'%
                }%
              }{}%
            \fi\fi%
          }{\@svg@ink@runtrue}%
        \fi%
      \fi%
%    \end{macrocode}
% If all checks were positive, the export with \app{Inkscape} can be done in 
% case \val{--shell-escape} is enabled.
%    \begin{macrocode}
      \if@svg@ink@run%
        \ifnum\pdf@shellescape=\@ne\relax%
%    \end{macrocode}
% For exporting \file{png}~files, the used density ist set to \val{300dpi}, if 
% no value was given.
%    \begin{macrocode}
          \ifx\svg@ink@dpi\relax%
            \ifstr{\svg@ink@format}{png}{%
              \FamilyOptions{SVG}{inkscapedpi=300}%
            }{}%
          \fi%
          \PackageInfo{svg}{%
            Calling Inkscape%
            \ifx\svg@ink@opt\@empty\else%
              \space with added options `\svg@ink@opt'%
            \fi%
          }%
%    \end{macrocode}
% Executing \app{Inkscape} on command line. Afterwards, the export results are 
% moved into the given output path.
%    \begin{macrocode}
          \edef\svg@tempa{\svg@file@base}%
          \edef\svg@tempb{\svg@out@name}%
          \svg@quotes@remove{\svg@tempa}%
          \svg@quotes@remove{\svg@tempb}%
          \ShellEscape{\svg@ink@cmd{\svg@tempa}{\svg@tempb}}%
          \IfFileExists{\svg@out@name.\svg@ink@format}{%
            \edef\svg@tempb{\svg@tempb.\svg@ink@format}%
            \svg@quotes@remove{\svg@out@base}%
            \svg@shell@mkdir{\svg@out@path}%
            \svg@shell@move{\svg@tempb}{\svg@out@base}%
            \if@svg@ink@latex%
              \svg@shell@move{\svg@tempb_tex}{\svg@out@base_tex}%
            \fi%
          }{%
            \PackageWarning{svg}{%
              The export with Inkscape failed for file\MessageBreak%
              `\svg@tempa.svg'\MessageBreak%
              Troubleshooting: Please check in the log file how\MessageBreak%
              the invocation of Inkscape took place and try to\MessageBreak%
              execute it yourself in the terminal%
            }%
          }%
%    \end{macrocode}
% If \val{--shell-escape} wasn't enabled, a warning is issued.
%    \begin{macrocode}
        \else%
          \edef\svg@tempa{\svg@file@base}%
          \svg@quotes@remove{\svg@tempa}%
          \PackageWarning{svg}{%
            You didn't enable `shell escape' (or `write18')\MessageBreak%
            so it wasn't possible to launch the Inkscape export\MessageBreak%
            for `\svg@tempa.svg'%
          }%
        \fi%
      \fi%
    \endgroup%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \if@svg@ink@run
% \end{macro}^^A \svg@ink@run
% \begin{macro}{\svg@ink@cmd}
% The actual call of \app{Inkscape} at command line.
%    \begin{macrocode}
\newcommand*\svg@ink@cmd[2]{%
  \svg@ink@exe\space-z\space\svg@ink@area\space%
  \ifx\svg@ink@dpi\relax\else--export-dpi=\svg@ink@dpi\space\fi%
  \if@svg@ink@latex--export-latex\space\fi%
  \svg@ink@opt\space%
  --file="#1.svg"\space%
  --export-\svg@ink@format="#2.\svg@ink@format"\space%
}
%    \end{macrocode}
% \end{macro}^^A \svg@ink@cmd
% \begin{macro}{\svg@input}
% \begin{macro}{\svg@@input}
% With \cs{svg@@input} the export results of \app{Inkscape} are included. The 
% macro \cs{svg@input} is defined in order to realize the option \opt{exclude} 
% for package \pkg{svg-extract}.
%    \begin{macrocode}
\newcommand*\svg@input{\svg@@input}
\newcommand*\svg@@input[2][]{%
  \IfArgIsEmpty{#1}{}{\svg@local@param@set{#1}}%
  \if@svg@draft%
    \@svg@ink@latexfalse%
  \fi%
%    \end{macrocode}
% If the export with \app{Inkscape} was done with \LaTeX{} support enabled, the 
% corresponding file will be used together with \cs{input}. The necessary 
% patches to environment \env{picture} as well as command \cs{includegraphics} 
% are made beforehand with \cs{svg@patches}.
%    \begin{macrocode}
  \edef\svg@tempa{#2}%
  \if@svg@ink@latex%
    \svg@patches{\svg@tempa}%
    \ifnum\value{svg@param@lastpage}=\z@\relax%
      \expandafter\svg@get@lastpage\expandafter{\svg@tempa}%
    \fi%
    \edef\svg@tempa{%
      \ifx\svg@param@pretex\relax\else%
        \noexpand\svg@param@pretex%
      \fi%
      \noexpand\input{\svg@tempa_tex}%
      \ifx\svg@param@apptex\relax\else%
        \noexpand\svg@param@apptex%
      \fi%
    }%
%    \end{macrocode}
% If a rotation angle was given, the input is done within \cs{rotatebox}.
%    \begin{macrocode}
    \ifdim\dimexpr\svg@param@angle\p@\relax=\z@\relax%
      \svg@tempa%
    \else%
      \edef\svg@tempb{origin=\svg@param@origin}%
      \expandafter\rotatebox\expandafter[\svg@tempb]{\svg@param@angle}{%
        \svg@tempa%
      }%
    \fi%
  \else%
%    \end{macrocode}
% If the export with \app{Inkscape} was done without \LaTeX{} support, the 
% resulting graphic file will be included with \cs{includegraphics}.
%    \begin{macrocode}
    \svg@wrn@scale%
    \edef\svg@tempb{keepaspectratio,scale=\svg@param@scale}%
    \ifdim\svg@param@height>\z@\relax%
      \edef\svg@tempb{\svg@tempb,height=\svg@param@height}%
    \fi%
    \ifdim\svg@param@width>\z@\relax%
      \edef\svg@tempb{\svg@tempb,width=\svg@param@width}%
    \fi%
    \ifdim\dimexpr\svg@param@angle\p@\relax=\z@\relax\else%
      \edef\svg@tempb{\svg@tempb,origin=\svg@param@origin,angle=\svg@param@angle}%
    \fi%
    \if@svg@draft%
      \edef\svg@tempb{\svg@tempb,draft}%
    \else%
      \edef\svg@tempb{\svg@tempb,draft=false}%
    \fi%
    \expandafter\includegraphics\expandafter[\svg@tempb]{\svg@tempa}%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \svg@@input
% \end{macro}^^A \svg@input
% \begin{macro}{\svg@patches}
% \begin{macro}{\svg@picture@saved}
% \begin{macro}{\svg@pictur@patched}
% \begin{macro}{\svg@includegraphics@saved}
% \begin{macro}{\svg@includegraphics@patched}
% \begin{macro}{\svg@includegraphics@file}
% \ToDo{doc \dots}
%    \begin{macrocode}
\newcommand*\svg@patches[1]{%
  \let\svg@picture@saved\picture%
  \let\picture\svg@picture@patched%
  \let\svg@includegraphics@saved\includegraphics%
  \let\includegraphics\svg@includegraphics@patched%
  \edef\svg@includegraphics@file{#1}%
}
\newcommand*\svg@picture@saved{}
\newcommand*\svg@picture@patched{}
\newcommand*\svg@pictur@patched{}
\long\def\svg@picture@patched#1{\svg@pictur@patched@#1}
\def\svg@pictur@patched@(#1,#2){%
  \svg@wrn@scale%
  \ifdim\svg@param@height>\z@\relax%
    \Gscale@div\svg@tempa{#1\p@}{#2\p@}%
    \setlength\unitlength{\svg@param@height}%
    \setlength\unitlength{\svg@tempa\unitlength}%
    \ifdim\svg@param@width>\z@\relax%
      \ifdim\unitlength>\svg@param@width\relax%
        \setlength\unitlength{\svg@param@width}%
      \fi%
    \fi%
  \else%
    \ifdim\svg@param@width>\z@\relax%
      \setlength\unitlength{\svg@param@width}%
    \else%
      \setlength\unitlength{\svg@param@scale\unitlength}%
    \fi%
  \fi%
  \svg@picture@saved(#1,#2)%
}
\DefineFamily{SVGpatch}
\DefineFamilyMember{SVGpatch}
\newcounter{svg@param@currpage}
\setcounter{svg@param@currpage}{\m@ne}
\FamilyCounterKey{SVGpatch}{page}{svg@param@currpage}
\DefineFamilyKey{SVGpatch}{width}{\FamilyKeyStateProcessed}
\newcommand*\svg@includegraphics@file{}
\newcommand*\svg@includegraphics@saved{}
\newcommand*\svg@includegraphics@patched[2][]{%
  \FamilyOptions{SVGpatch}{#1}%
  \ifnum\value{svg@param@lastpage}<\z@\relax%
    \FamilySetCounter{SVGpatch}{page}{svg@param@currpage}{%
      \the\value{svg@param@lastpage}%
    }%
  \fi%
  \ifnum\value{svg@param@currpage}>\value{svg@param@lastpage}\relax\else%
    \if@svg@draft%
      \def\svg@tempb{#1,draft}%
    \else%
      \def\svg@tempb{#1,draft=false}%
    \fi%
    \expandafter\svg@includegraphics@saved\expandafter[\svg@tempb]{%
      \svg@includegraphics@file%
    }%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \svg@includegraphics@file
% \end{macro}^^A \svg@includegraphics@patched
% \end{macro}^^A \svg@includegraphics@saved
% \end{macro}^^A \svg@pictur@patched
% \end{macro}^^A \svg@picture@saved
% \end{macro}^^A \svg@patches
%
% \iffalse
%</base>
%</package&body>
%<*package&old>
% \fi
%
% \subsection{Length definition}
%   All commands used for output are defined within the |\SVG@out|
%   prefix, beginning with the dimensions of the extracted image. If no
%   dimensions are supplied both |useheight| and |usewidth| are
%   |false|, and so the natural dimensions of the \svg are used. If
%   both |usewidth| and |useheight| are |true|, the width is used.
%    \begin{macrocode}
\newlength\SVG@out@width%
\newif\ifSVG@out@usewidth%
\define@key[SVG]{svg.sty}{width}{%
  \setlength{\SVG@out@width}{#1}\SVG@out@usewidthtrue%
}%
\newlength\SVG@out@height%
\newif\ifSVG@out@useheight%
\define@key[SVG]{svg.sty}{height}{%
  \setlength{\SVG@out@height}{#1}\SVG@out@useheighttrue%
}%
%    \end{macrocode}
%
% \subsection{Extract booleans}
%   The booleans for the extraction formats are defined. Additionally,
%   the global export variable is defined, which is set to |true|
%   whenever any extraction is requested.
%    \begin{macrocode}
\define@boolkey[SVG]{svg.sty}[SVG@out@]{pdf}[true]{}%
\define@boolkey[SVG]{svg.sty}[SVG@out@]{eps}[true]{}%
\define@boolkey[SVG]{svg.sty}[SVG@out@]{png}[true]{}%
\newif\ifSVG@out@extract
%    \end{macrocode}
%
% \subsection{Output definitions}
%   The extraction path, extraction root name, clean boolean,
%   pre-\latex commands, and post-\latex commands are defined.
%    \begin{macrocode}
\def\SVG@out@path{./}%
\define@key[SVG]{svg.sty}{path}{\def\SVG@out@path{#1}}%
\def\SVG@out@name{Fig.\arabic{svgfigure}\alph{subfigure}}%
\define@key[SVG]{svg.sty}{name}{\def\SVG@out@name{#1}}%
\define@boolkey[SVG]{svg.sty}[SVG@out@]{clean}[true]{}%
\def\SVG@out@pretex{}%
\define@key[SVG]{svg.sty}{pretex}{\def\SVG@out@pretex{#1}}%
\def\SVG@out@postex{}%
\define@key[SVG]{svg.sty}{postex}{\def\SVG@out@postex{#1}}%
%    \end{macrocode}
%
% \subsection{Command definitions}
%   The command options are defined within the prefix |\SVG@cmd| and
%   are set by the key definition following each command definition.
%    \begin{macrocode}
\def\SVG@cmd@inkscape{inkscape -z -C}%
\define@key[SVG]{svg.sty}{inkscape}{\def\SVG@cmd@inkscape{#1}}%
\def\SVG@cmd@pdflatex{pdflatex}%
\define@key[SVG]{svg.sty}{pdflatex}{\def\SVG@cmd@pdflatex{#1}}%
\def\SVG@cmd@pdftops{pdftops -eps}%
\define@key[SVG]{svg.sty}{pdftops}{\def\SVG@cmd@pdftops{#1}}%
\def\SVG@cmd@convert{convert -density 300}%
\define@key[SVG]{svg.sty}{convert}{\def\SVG@cmd@convert{#1}}%
%    \end{macrocode}
%
% \subsection{Process options}
%   All the options for the package are processed, and the \svg
%   counter is defined. The \svg counter is used to correctly handle
%   the |subfigure| counting.
%    \begin{macrocode}
\ProcessOptionsX[SVG]%
\newcounter{svgfigure}[figure]%
%    \end{macrocode}
%
%   Define the macro to globally set keys.
%    \begin{macrocode}
\def\setsvg#1{\setkeys[SVG]{svg.sty}{#1}}%
%    \end{macrocode}
%
%   Define the macro used to include an \svg. Set the keys and
%   determine if extraction should occur.
%    \begin{macrocode}
\def\includesvg{\@ifnextchar[\@includesvg{\@includesvg[]}}%
\def\@includesvg[#1]#2{%
  \setkeys[SVG]{svg.sty}{#1}%
  \SVG@out@extractfalse%
  \ifSVG@out@pdf \SVG@out@extracttrue \fi%
  \ifSVG@out@eps \SVG@out@extracttrue \fi%
  \ifSVG@out@png \SVG@out@extracttrue \fi%
%    \end{macrocode}
% Run \inkscape to separate the \svg into text and image. Only run
% \inkscape if the \svg is newer than the generated text and image.
%    \begin{macrocode}
  \ifnum\pdfstrcmp
  {\pdffilemoddate{\SVG@in@path#2.svg}}%
  {\pdffilemoddate{\SVG@in@path#2.pdf}}>0%
    \immediate\write18{%
      \SVG@cmd@inkscape\space%
        -f \SVG@in@path#2.svg\space%
        -A \SVG@in@path#2.pdf\space%
        --export-latex%
    }%
  \fi%
%    \end{macrocode}
% Determine the image width and height using |\includegraphics|.
%    \begin{macrocode}
  \ifSVG@out@usewidth%
    \settoheight\SVG@out@height{%
      \includegraphics[width=\SVG@out@width]{\SVG@in@path#2}%
    }%
  \else%
    \ifSVG@out@useheight%
      \settowidth\SVG@out@width{%
        \includegraphics[height=\SVG@out@height]{\SVG@in@path#2}%
      }%
    \else%
      \settoheight\SVG@out@height{%
        \includegraphics{\SVG@in@path#2}%
      }%
      \settowidth\SVG@out@width{\includegraphics{\SVG@in@path#2}}%
    \fi%
  \fi%
%    \end{macrocode}
% Open the output file for extraction.
%    \begin{macrocode}
% Open the output file.
  \ifSVG@out@extract%
    \newwrite\SVG@out@file%
    \setcounter{svgfigure}{\value{figure}}%
    \stepcounter{svgfigure}%
    \def\SVG@out@filename{\SVG@out@name}%
    \immediate\openout\SVG@out@file=\SVG@out@path\SVG@out@filename.tex%
  \fi%
%    \end{macrocode}
% Open and write the preamble. Notice that the catcodes for |#| need
% to be changed to prevent double expansion when reading the line.
%    \begin{macrocode}
  \ifSVG@out@extract%
    \def\SVG@in@line{}%
    \newread\SVG@in@file%
    \immediate\openin\SVG@in@file=\SVG@in@preamble%
  \fi%
  \newif\ifSVG@in@read%
  \ifSVG@out@extract \SVG@in@readtrue \fi%
  \@whilesw\ifSVG@in@read\fi{%
    \catcode`\#=12\relax\endlinechar=-1%
    \immediate\read\SVG@in@file to \SVG@in@line%
    \ifx\SVG@in@end\SVG@in@line%
      \SVG@in@readfalse%
    \else%
      \immediate\write\SVG@out@file{\unexpanded\expandafter{\SVG@in@line}}%
    \fi%
    \ifeof\SVG@in@file\SVG@in@readfalse\fi%
    \endlinechar=13\catcode`\#=6\relax%
  }%
  \ifSVG@out@extract \immediate\closein\SVG@in@file \fi%
%    \end{macrocode}
% Now write everything needed after the preamble. This includes
% requiring the |import| package and defining all the dimensions need
% to match the document size with the image size.
%    \begin{macrocode}
  \ifSVG@out@extract%
    \def\SVG@out@defpack{%
      \makeatletter%
      \@ifpackageloaded{import}{}{\RequirePackage{import}}%
      \@ifpackageloaded{graphicx}{}{\RequirePackage{graphicx}}%
      \@ifpackageloaded{transparent}{}{\RequirePackage{transparent}}%
      \@ifpackageloaded{xcolor}{}{\RequirePackage{xcolor}}%
      \makeatother%
    }%
    \def\SVG@out@defwidth{\def\svgwidth{0.99\textwidth}}%
    \def\SVG@out@definput{\import{\SVG@in@path}{#2.pdf_tex}}%
    \immediate\write\SVG@out@file{\unexpanded\expandafter{\SVG@out@defpack}}%
    \immediate\write\SVG@out@file{%
      \noexpand\setlength{\pdfpagewidth}{\the\SVG@out@width}%
    }%
    \immediate\write\SVG@out@file{%
      \noexpand\setlength{\pdfpageheight}{\the\SVG@out@height}%
    }%
    \immediate\write\SVG@out@file{%
      \noexpand\setlength{\paperheight}{\pdfpageheight}%
    }%
    \immediate\write\SVG@out@file{%
      \noexpand\setlength{\paperwidth}{\pdfpagewidth}%
    }%
    \immediate\write\SVG@out@file{%
      \noexpand\setlength{\textheight}{\paperheight}%
    }%
    \immediate\write\SVG@out@file{%
      \noexpand\setlength{\textwidth}{\paperwidth}%
    }%
    \immediate\write\SVG@out@file{%
      \noexpand\setlength{\textheight}{\paperheight}%
    }%
    \immediate\write\SVG@out@file{\noexpand\setlength{\oddsidemargin}{-1in}}%
    \immediate\write\SVG@out@file{\noexpand\setlength{\evensidemargin}{-1in}}%
    \immediate\write\SVG@out@file{\noexpand\setlength{\topmargin}{-1in}}%
    \immediate\write\SVG@out@file{\noexpand\setlength{\headheight}{0in}}%
    \immediate\write\SVG@out@file{\noexpand\setlength{\headsep}{0in}}%
    \immediate\write\SVG@out@file{\noexpand\setlength{\topskip}{0in}}%
    \immediate\write\SVG@out@file{\noexpand\setlength{\footskip}{0in}}%
    \immediate\write\SVG@out@file{\noexpand\setlength{\parindent}{0in}}%
    \immediate\write\SVG@out@file{\noexpand\setlength{\parsep}{0in}}%
    \immediate\write\SVG@out@file{\noexpand\setlength{\parskip}{0in}}%
    \immediate\write\SVG@out@file{%
      \noexpand\begin{document}%
      \noexpand\pagestyle{empty}%
      \noexpand\begin{center}%
        \unexpanded\expandafter{\SVG@out@defwidth}%
        \unexpanded\expandafter{\SVG@out@pretex}%
        \expandafter\noexpand\SVG@out@definput%
        \unexpanded\expandafter{\SVG@out@postex}%
        \noexpand\end{center}%
        \noexpand\end{document}%
      }%
    \immediate\closeout\SVG@out@file%
  \fi%
%    \end{macrocode}
% Run \latex on the extracted file and create the \pdf.
%    \begin{macrocode}
  \ifSVG@out@extract%
    \immediate\write18{%
      \SVG@cmd@pdflatex\space\SVG@out@path\SVG@out@filename.tex%
    }%
  \fi%
%    \end{macrocode}
% Convert the \pdf to \eps if requested.
%    \begin{macrocode}
  \ifSVG@out@eps%
    \immediate\write18{\SVG@cmd@pdftops\space\SVG@out@filename.pdf}%
    \immediate\write18{%
      mv \SVG@out@filename.eps\space\SVG@out@path\SVG@out@filename.eps%
    }%
  \fi%
%    \end{macrocode}
% Convert the \pdf to \png if requested.
%    \begin{macrocode}
  \ifSVG@out@png%
    \immediate\write18{%
      \SVG@cmd@convert\space%
        \SVG@out@filename.pdf\space\SVG@out@filename.png%
    }%
    \immediate\write18{%
      mv \SVG@out@filename.png\space\SVG@out@path\SVG@out@filename.png%
    }%
  \fi%
%    \end{macrocode}
% Clean up if requested.
%    \begin{macrocode}
  \ifSVG@out@extract%
    \ifSVG@out@pdf%
      \immediate\write18{%
        mv \SVG@out@filename.pdf\space\SVG@out@path\SVG@out@filename.pdf%
      }%
    \else%
      \ifSVG@out@clean \immediate\write18{rm \SVG@out@filename.pdf} \fi%
    \fi%
    \ifSVG@out@clean%
      \immediate\write18{%
        rm
          \SVG@out@path\SVG@out@filename.tex\space%
          \SVG@out@filename.aux\space%
          \SVG@out@filename.log\space%
          \SVG@out@filename.out%
      }%
    \fi%
  \fi%
%    \end{macrocode}
% Finally, include the \svg in the current document and end the package.
%    \begin{macrocode}
  \ifSVG@in@exclude\else%
    {%
      \def\svgwidth{\the\SVG@out@width}%
      \SVG@out@pretex%
      \import{\SVG@in@path}{#2.pdf_tex}%
      \SVG@out@postex%
    }%
  \fi%
}%
%    \end{macrocode}
%
% \iffalse
%</package&old>
% \fi
%
% \Finale
%
\endinput
